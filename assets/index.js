true &&
  (function polyfill() {
    const relList = document.createElement("link").relList;
    if (relList && relList.supports && relList.supports("modulepreload")) {
      return;
    }
    for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
      processPreload(link);
    }
    new MutationObserver((mutations) => {
      for (const mutation of mutations) {
        if (mutation.type !== "childList") {
          continue;
        }
        for (const node of mutation.addedNodes) {
          if (node.tagName === "LINK" && node.rel === "modulepreload")
            processPreload(node);
        }
      }
    }).observe(document, { childList: true, subtree: true });
    function getFetchOpts(link) {
      const fetchOpts = {};
      if (link.integrity) fetchOpts.integrity = link.integrity;
      if (link.referrerPolicy) fetchOpts.referrerPolicy = link.referrerPolicy;
      if (link.crossOrigin === "use-credentials")
        fetchOpts.credentials = "include";
      else if (link.crossOrigin === "anonymous") fetchOpts.credentials = "omit";
      else fetchOpts.credentials = "same-origin";
      return fetchOpts;
    }
    function processPreload(link) {
      if (link.ep)
        // ep marker = processed
        return;
      link.ep = true;
      // prepopulate the load record
      const fetchOpts = getFetchOpts(link);
      fetch(link.href, fetchOpts);
    }
  })();

const styles = "";

/**
 * SSR Window 4.0.2
 * Better handling for window object in SSR environment
 * https://github.com/nolimits4web/ssr-window
 *
 * Copyright 2021, Vladimir Kharlampidi
 *
 * Licensed under MIT
 *
 * Released on: December 13, 2021
 */
/* eslint-disable no-param-reassign */
function isObject$2(obj) {
  return (
    obj !== null &&
    typeof obj === "object" &&
    "constructor" in obj &&
    obj.constructor === Object
  );
}
function extend$1(target, src) {
  if (target === void 0) {
    target = {};
  }
  if (src === void 0) {
    src = {};
  }
  Object.keys(src).forEach((key) => {
    if (typeof target[key] === "undefined") target[key] = src[key];
    else if (
      isObject$2(src[key]) &&
      isObject$2(target[key]) &&
      Object.keys(src[key]).length > 0
    ) {
      extend$1(target[key], src[key]);
    }
  });
}
const ssrDocument = {
  body: {},
  addEventListener() {},
  removeEventListener() {},
  activeElement: {
    blur() {},
    nodeName: "",
  },
  querySelector() {
    return null;
  },
  querySelectorAll() {
    return [];
  },
  getElementById() {
    return null;
  },
  createEvent() {
    return {
      initEvent() {},
    };
  },
  createElement() {
    return {
      children: [],
      childNodes: [],
      style: {},
      setAttribute() {},
      getElementsByTagName() {
        return [];
      },
    };
  },
  createElementNS() {
    return {};
  },
  importNode() {
    return null;
  },
  location: {
    hash: "",
    host: "",
    hostname: "",
    href: "",
    origin: "",
    pathname: "",
    protocol: "",
    search: "",
  },
};
function getDocument() {
  const doc = typeof document !== "undefined" ? document : {};
  extend$1(doc, ssrDocument);
  return doc;
}
const ssrWindow = {
  document: ssrDocument,
  navigator: {
    userAgent: "",
  },
  location: {
    hash: "",
    host: "",
    hostname: "",
    href: "",
    origin: "",
    pathname: "",
    protocol: "",
    search: "",
  },
  history: {
    replaceState() {},
    pushState() {},
    go() {},
    back() {},
  },
  CustomEvent: function CustomEvent() {
    return this;
  },
  addEventListener() {},
  removeEventListener() {},
  getComputedStyle() {
    return {
      getPropertyValue() {
        return "";
      },
    };
  },
  Image() {},
  Date() {},
  screen: {},
  setTimeout() {},
  clearTimeout() {},
  matchMedia() {
    return {};
  },
  requestAnimationFrame(callback) {
    if (typeof setTimeout === "undefined") {
      callback();
      return null;
    }
    return setTimeout(callback, 0);
  },
  cancelAnimationFrame(id) {
    if (typeof setTimeout === "undefined") {
      return;
    }
    clearTimeout(id);
  },
};
function getWindow() {
  const win = typeof window !== "undefined" ? window : {};
  extend$1(win, ssrWindow);
  return win;
}

function deleteProps(obj) {
  const object = obj;
  Object.keys(object).forEach((key) => {
    try {
      object[key] = null;
    } catch (e) {
      // no getter for object
    }
    try {
      delete object[key];
    } catch (e) {
      // something got wrong
    }
  });
}
function nextTick(callback, delay) {
  if (delay === void 0) {
    delay = 0;
  }
  return setTimeout(callback, delay);
}
function now$2() {
  return Date.now();
}
function getComputedStyle$1(el) {
  const window = getWindow();
  let style;
  if (window.getComputedStyle) {
    style = window.getComputedStyle(el, null);
  }
  if (!style && el.currentStyle) {
    style = el.currentStyle;
  }
  if (!style) {
    style = el.style;
  }
  return style;
}
function getTranslate$1(el, axis) {
  if (axis === void 0) {
    axis = "x";
  }
  const window = getWindow();
  let matrix;
  let curTransform;
  let transformMatrix;
  const curStyle = getComputedStyle$1(el);
  if (window.WebKitCSSMatrix) {
    curTransform = curStyle.transform || curStyle.webkitTransform;
    if (curTransform.split(",").length > 6) {
      curTransform = curTransform
        .split(", ")
        .map((a) => a.replace(",", "."))
        .join(", ");
    }
    // Some old versions of Webkit choke when 'none' is passed; pass
    // empty string instead in this case
    transformMatrix = new window.WebKitCSSMatrix(
      curTransform === "none" ? "" : curTransform
    );
  } else {
    transformMatrix =
      curStyle.MozTransform ||
      curStyle.OTransform ||
      curStyle.MsTransform ||
      curStyle.msTransform ||
      curStyle.transform ||
      curStyle
        .getPropertyValue("transform")
        .replace("translate(", "matrix(1, 0, 0, 1,");
    matrix = transformMatrix.toString().split(",");
  }
  if (axis === "x") {
    // Latest Chrome and webkits Fix
    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m41;
    // Crazy IE10 Matrix
    else if (matrix.length === 16) curTransform = parseFloat(matrix[12]);
    // Normal Browsers
    else curTransform = parseFloat(matrix[4]);
  }
  if (axis === "y") {
    // Latest Chrome and webkits Fix
    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m42;
    // Crazy IE10 Matrix
    else if (matrix.length === 16) curTransform = parseFloat(matrix[13]);
    // Normal Browsers
    else curTransform = parseFloat(matrix[5]);
  }
  return curTransform || 0;
}
function isObject$1(o) {
  return (
    typeof o === "object" &&
    o !== null &&
    o.constructor &&
    Object.prototype.toString.call(o).slice(8, -1) === "Object"
  );
}
function isNode(node) {
  // eslint-disable-next-line
  if (
    typeof window !== "undefined" &&
    typeof window.HTMLElement !== "undefined"
  ) {
    return node instanceof HTMLElement;
  }
  return node && (node.nodeType === 1 || node.nodeType === 11);
}
function extend() {
  const to = Object(arguments.length <= 0 ? undefined : arguments[0]);
  const noExtend = ["__proto__", "constructor", "prototype"];
  for (let i = 1; i < arguments.length; i += 1) {
    const nextSource =
      i < 0 || arguments.length <= i ? undefined : arguments[i];
    if (
      nextSource !== undefined &&
      nextSource !== null &&
      !isNode(nextSource)
    ) {
      const keysArray = Object.keys(Object(nextSource)).filter(
        (key) => noExtend.indexOf(key) < 0
      );
      for (
        let nextIndex = 0, len = keysArray.length;
        nextIndex < len;
        nextIndex += 1
      ) {
        const nextKey = keysArray[nextIndex];
        const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
        if (desc !== undefined && desc.enumerable) {
          if (isObject$1(to[nextKey]) && isObject$1(nextSource[nextKey])) {
            if (nextSource[nextKey].__swiper__) {
              to[nextKey] = nextSource[nextKey];
            } else {
              extend(to[nextKey], nextSource[nextKey]);
            }
          } else if (
            !isObject$1(to[nextKey]) &&
            isObject$1(nextSource[nextKey])
          ) {
            to[nextKey] = {};
            if (nextSource[nextKey].__swiper__) {
              to[nextKey] = nextSource[nextKey];
            } else {
              extend(to[nextKey], nextSource[nextKey]);
            }
          } else {
            to[nextKey] = nextSource[nextKey];
          }
        }
      }
    }
  }
  return to;
}
function setCSSProperty(el, varName, varValue) {
  el.style.setProperty(varName, varValue);
}
function animateCSSModeScroll(_ref) {
  let { swiper, targetPosition, side } = _ref;
  const window = getWindow();
  const startPosition = -swiper.translate;
  let startTime = null;
  let time;
  const duration = swiper.params.speed;
  swiper.wrapperEl.style.scrollSnapType = "none";
  window.cancelAnimationFrame(swiper.cssModeFrameID);
  const dir = targetPosition > startPosition ? "next" : "prev";
  const isOutOfBound = (current, target) => {
    return (
      (dir === "next" && current >= target) ||
      (dir === "prev" && current <= target)
    );
  };
  const animate = () => {
    time = new Date().getTime();
    if (startTime === null) {
      startTime = time;
    }
    const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);
    const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;
    let currentPosition =
      startPosition + easeProgress * (targetPosition - startPosition);
    if (isOutOfBound(currentPosition, targetPosition)) {
      currentPosition = targetPosition;
    }
    swiper.wrapperEl.scrollTo({
      [side]: currentPosition,
    });
    if (isOutOfBound(currentPosition, targetPosition)) {
      swiper.wrapperEl.style.overflow = "hidden";
      swiper.wrapperEl.style.scrollSnapType = "";
      setTimeout(() => {
        swiper.wrapperEl.style.overflow = "";
        swiper.wrapperEl.scrollTo({
          [side]: currentPosition,
        });
      });
      window.cancelAnimationFrame(swiper.cssModeFrameID);
      return;
    }
    swiper.cssModeFrameID = window.requestAnimationFrame(animate);
  };
  animate();
}
function elementChildren(element, selector) {
  if (selector === void 0) {
    selector = "";
  }
  return [...element.children].filter((el) => el.matches(selector));
}
function createElement(tag, classes) {
  if (classes === void 0) {
    classes = [];
  }
  const el = document.createElement(tag);
  el.classList.add(...(Array.isArray(classes) ? classes : [classes]));
  return el;
}
function elementPrevAll(el, selector) {
  const prevEls = [];
  while (el.previousElementSibling) {
    const prev = el.previousElementSibling; // eslint-disable-line
    if (selector) {
      if (prev.matches(selector)) prevEls.push(prev);
    } else prevEls.push(prev);
    el = prev;
  }
  return prevEls;
}
function elementNextAll(el, selector) {
  const nextEls = [];
  while (el.nextElementSibling) {
    const next = el.nextElementSibling; // eslint-disable-line
    if (selector) {
      if (next.matches(selector)) nextEls.push(next);
    } else nextEls.push(next);
    el = next;
  }
  return nextEls;
}
function elementStyle(el, prop) {
  const window = getWindow();
  return window.getComputedStyle(el, null).getPropertyValue(prop);
}
function elementIndex(el) {
  let child = el;
  let i;
  if (child) {
    i = 0;
    // eslint-disable-next-line
    while ((child = child.previousSibling) !== null) {
      if (child.nodeType === 1) i += 1;
    }
    return i;
  }
  return undefined;
}
function elementParents(el, selector) {
  const parents = []; // eslint-disable-line
  let parent = el.parentElement; // eslint-disable-line
  while (parent) {
    if (selector) {
      if (parent.matches(selector)) parents.push(parent);
    } else {
      parents.push(parent);
    }
    parent = parent.parentElement;
  }
  return parents;
}
function elementOuterSize(el, size, includeMargins) {
  const window = getWindow();
  if (includeMargins) {
    return (
      el[size === "width" ? "offsetWidth" : "offsetHeight"] +
      parseFloat(
        window
          .getComputedStyle(el, null)
          .getPropertyValue(size === "width" ? "margin-right" : "margin-top")
      ) +
      parseFloat(
        window
          .getComputedStyle(el, null)
          .getPropertyValue(size === "width" ? "margin-left" : "margin-bottom")
      )
    );
  }
  return el.offsetWidth;
}

let support$1;
function calcSupport() {
  const window = getWindow();
  const document = getDocument();
  return {
    smoothScroll:
      document.documentElement &&
      document.documentElement.style &&
      "scrollBehavior" in document.documentElement.style,
    touch: !!(
      "ontouchstart" in window ||
      (window.DocumentTouch && document instanceof window.DocumentTouch)
    ),
  };
}
function getSupport() {
  if (!support$1) {
    support$1 = calcSupport();
  }
  return support$1;
}

let deviceCached;
function calcDevice(_temp) {
  let { userAgent } = _temp === void 0 ? {} : _temp;
  const support = getSupport();
  const window = getWindow();
  const platform = window.navigator.platform;
  const ua = userAgent || window.navigator.userAgent;
  const device = {
    ios: false,
    android: false,
  };
  const screenWidth = window.screen.width;
  const screenHeight = window.screen.height;
  const android = ua.match(/(Android);?[\s\/]+([\d.]+)?/); // eslint-disable-line
  let ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
  const ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
  const iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/);
  const windows = platform === "Win32";
  let macos = platform === "MacIntel";

  // iPadOs 13 fix
  const iPadScreens = [
    "1024x1366",
    "1366x1024",
    "834x1194",
    "1194x834",
    "834x1112",
    "1112x834",
    "768x1024",
    "1024x768",
    "820x1180",
    "1180x820",
    "810x1080",
    "1080x810",
  ];
  if (
    !ipad &&
    macos &&
    support.touch &&
    iPadScreens.indexOf(`${screenWidth}x${screenHeight}`) >= 0
  ) {
    ipad = ua.match(/(Version)\/([\d.]+)/);
    if (!ipad) ipad = [0, 1, "13_0_0"];
    macos = false;
  }

  // Android
  if (android && !windows) {
    device.os = "android";
    device.android = true;
  }
  if (ipad || iphone || ipod) {
    device.os = "ios";
    device.ios = true;
  }

  // Export object
  return device;
}
function getDevice(overrides) {
  if (overrides === void 0) {
    overrides = {};
  }
  if (!deviceCached) {
    deviceCached = calcDevice(overrides);
  }
  return deviceCached;
}

let browser;
function calcBrowser() {
  const window = getWindow();
  let needPerspectiveFix = false;
  function isSafari() {
    const ua = window.navigator.userAgent.toLowerCase();
    return (
      ua.indexOf("safari") >= 0 &&
      ua.indexOf("chrome") < 0 &&
      ua.indexOf("android") < 0
    );
  }
  if (isSafari()) {
    const ua = String(window.navigator.userAgent);
    if (ua.includes("Version/")) {
      const [major, minor] = ua
        .split("Version/")[1]
        .split(" ")[0]
        .split(".")
        .map((num) => Number(num));
      needPerspectiveFix = major < 16 || (major === 16 && minor < 2);
    }
  }
  return {
    isSafari: needPerspectiveFix || isSafari(),
    needPerspectiveFix,
    isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(
      window.navigator.userAgent
    ),
  };
}
function getBrowser() {
  if (!browser) {
    browser = calcBrowser();
  }
  return browser;
}

function Resize(_ref) {
  let { swiper, on, emit } = _ref;
  const window = getWindow();
  let observer = null;
  let animationFrame = null;
  const resizeHandler = () => {
    if (!swiper || swiper.destroyed || !swiper.initialized) return;
    emit("beforeResize");
    emit("resize");
  };
  const createObserver = () => {
    if (!swiper || swiper.destroyed || !swiper.initialized) return;
    observer = new ResizeObserver((entries) => {
      animationFrame = window.requestAnimationFrame(() => {
        const { width, height } = swiper;
        let newWidth = width;
        let newHeight = height;
        entries.forEach((_ref2) => {
          let { contentBoxSize, contentRect, target } = _ref2;
          if (target && target !== swiper.el) return;
          newWidth = contentRect
            ? contentRect.width
            : (contentBoxSize[0] || contentBoxSize).inlineSize;
          newHeight = contentRect
            ? contentRect.height
            : (contentBoxSize[0] || contentBoxSize).blockSize;
        });
        if (newWidth !== width || newHeight !== height) {
          resizeHandler();
        }
      });
    });
    observer.observe(swiper.el);
  };
  const removeObserver = () => {
    if (animationFrame) {
      window.cancelAnimationFrame(animationFrame);
    }
    if (observer && observer.unobserve && swiper.el) {
      observer.unobserve(swiper.el);
      observer = null;
    }
  };
  const orientationChangeHandler = () => {
    if (!swiper || swiper.destroyed || !swiper.initialized) return;
    emit("orientationchange");
  };
  on("init", () => {
    if (
      swiper.params.resizeObserver &&
      typeof window.ResizeObserver !== "undefined"
    ) {
      createObserver();
      return;
    }
    window.addEventListener("resize", resizeHandler);
    window.addEventListener("orientationchange", orientationChangeHandler);
  });
  on("destroy", () => {
    removeObserver();
    window.removeEventListener("resize", resizeHandler);
    window.removeEventListener("orientationchange", orientationChangeHandler);
  });
}

function Observer$1(_ref) {
  let { swiper, extendParams, on, emit } = _ref;
  const observers = [];
  const window = getWindow();
  const attach = function (target, options) {
    if (options === void 0) {
      options = {};
    }
    const ObserverFunc =
      window.MutationObserver || window.WebkitMutationObserver;
    const observer = new ObserverFunc((mutations) => {
      // The observerUpdate event should only be triggered
      // once despite the number of mutations.  Additional
      // triggers are redundant and are very costly
      if (swiper.__preventObserver__) return;
      if (mutations.length === 1) {
        emit("observerUpdate", mutations[0]);
        return;
      }
      const observerUpdate = function observerUpdate() {
        emit("observerUpdate", mutations[0]);
      };
      if (window.requestAnimationFrame) {
        window.requestAnimationFrame(observerUpdate);
      } else {
        window.setTimeout(observerUpdate, 0);
      }
    });
    observer.observe(target, {
      attributes:
        typeof options.attributes === "undefined" ? true : options.attributes,
      childList:
        typeof options.childList === "undefined" ? true : options.childList,
      characterData:
        typeof options.characterData === "undefined"
          ? true
          : options.characterData,
    });
    observers.push(observer);
  };
  const init = () => {
    if (!swiper.params.observer) return;
    if (swiper.params.observeParents) {
      const containerParents = elementParents(swiper.hostEl);
      for (let i = 0; i < containerParents.length; i += 1) {
        attach(containerParents[i]);
      }
    }
    // Observe container
    attach(swiper.hostEl, {
      childList: swiper.params.observeSlideChildren,
    });

    // Observe wrapper
    attach(swiper.wrapperEl, {
      attributes: false,
    });
  };
  const destroy = () => {
    observers.forEach((observer) => {
      observer.disconnect();
    });
    observers.splice(0, observers.length);
  };
  extendParams({
    observer: false,
    observeParents: false,
    observeSlideChildren: false,
  });
  on("init", init);
  on("destroy", destroy);
}

/* eslint-disable no-underscore-dangle */

var eventsEmitter = {
  on(events, handler, priority) {
    const self = this;
    if (!self.eventsListeners || self.destroyed) return self;
    if (typeof handler !== "function") return self;
    const method = priority ? "unshift" : "push";
    events.split(" ").forEach((event) => {
      if (!self.eventsListeners[event]) self.eventsListeners[event] = [];
      self.eventsListeners[event][method](handler);
    });
    return self;
  },
  once(events, handler, priority) {
    const self = this;
    if (!self.eventsListeners || self.destroyed) return self;
    if (typeof handler !== "function") return self;
    function onceHandler() {
      self.off(events, onceHandler);
      if (onceHandler.__emitterProxy) {
        delete onceHandler.__emitterProxy;
      }
      for (
        var _len = arguments.length, args = new Array(_len), _key = 0;
        _key < _len;
        _key++
      ) {
        args[_key] = arguments[_key];
      }
      handler.apply(self, args);
    }
    onceHandler.__emitterProxy = handler;
    return self.on(events, onceHandler, priority);
  },
  onAny(handler, priority) {
    const self = this;
    if (!self.eventsListeners || self.destroyed) return self;
    if (typeof handler !== "function") return self;
    const method = priority ? "unshift" : "push";
    if (self.eventsAnyListeners.indexOf(handler) < 0) {
      self.eventsAnyListeners[method](handler);
    }
    return self;
  },
  offAny(handler) {
    const self = this;
    if (!self.eventsListeners || self.destroyed) return self;
    if (!self.eventsAnyListeners) return self;
    const index = self.eventsAnyListeners.indexOf(handler);
    if (index >= 0) {
      self.eventsAnyListeners.splice(index, 1);
    }
    return self;
  },
  off(events, handler) {
    const self = this;
    if (!self.eventsListeners || self.destroyed) return self;
    if (!self.eventsListeners) return self;
    events.split(" ").forEach((event) => {
      if (typeof handler === "undefined") {
        self.eventsListeners[event] = [];
      } else if (self.eventsListeners[event]) {
        self.eventsListeners[event].forEach((eventHandler, index) => {
          if (
            eventHandler === handler ||
            (eventHandler.__emitterProxy &&
              eventHandler.__emitterProxy === handler)
          ) {
            self.eventsListeners[event].splice(index, 1);
          }
        });
      }
    });
    return self;
  },
  emit() {
    const self = this;
    if (!self.eventsListeners || self.destroyed) return self;
    if (!self.eventsListeners) return self;
    let events;
    let data;
    let context;
    for (
      var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
      _key2 < _len2;
      _key2++
    ) {
      args[_key2] = arguments[_key2];
    }
    if (typeof args[0] === "string" || Array.isArray(args[0])) {
      events = args[0];
      data = args.slice(1, args.length);
      context = self;
    } else {
      events = args[0].events;
      data = args[0].data;
      context = args[0].context || self;
    }
    data.unshift(context);
    const eventsArray = Array.isArray(events) ? events : events.split(" ");
    eventsArray.forEach((event) => {
      if (self.eventsAnyListeners && self.eventsAnyListeners.length) {
        self.eventsAnyListeners.forEach((eventHandler) => {
          eventHandler.apply(context, [event, ...data]);
        });
      }
      if (self.eventsListeners && self.eventsListeners[event]) {
        self.eventsListeners[event].forEach((eventHandler) => {
          eventHandler.apply(context, data);
        });
      }
    });
    return self;
  },
};

function updateSize() {
  const swiper = this;
  let width;
  let height;
  const el = swiper.el;
  if (
    typeof swiper.params.width !== "undefined" &&
    swiper.params.width !== null
  ) {
    width = swiper.params.width;
  } else {
    width = el.clientWidth;
  }
  if (
    typeof swiper.params.height !== "undefined" &&
    swiper.params.height !== null
  ) {
    height = swiper.params.height;
  } else {
    height = el.clientHeight;
  }
  if (
    (width === 0 && swiper.isHorizontal()) ||
    (height === 0 && swiper.isVertical())
  ) {
    return;
  }

  // Subtract paddings
  width =
    width -
    parseInt(elementStyle(el, "padding-left") || 0, 10) -
    parseInt(elementStyle(el, "padding-right") || 0, 10);
  height =
    height -
    parseInt(elementStyle(el, "padding-top") || 0, 10) -
    parseInt(elementStyle(el, "padding-bottom") || 0, 10);
  if (Number.isNaN(width)) width = 0;
  if (Number.isNaN(height)) height = 0;
  Object.assign(swiper, {
    width,
    height,
    size: swiper.isHorizontal() ? width : height,
  });
}

function updateSlides() {
  const swiper = this;
  function getDirectionLabel(property) {
    if (swiper.isHorizontal()) {
      return property;
    }
    // prettier-ignore
    return {
      'width': 'height',
      'margin-top': 'margin-left',
      'margin-bottom ': 'margin-right',
      'margin-left': 'margin-top',
      'margin-right': 'margin-bottom',
      'padding-left': 'padding-top',
      'padding-right': 'padding-bottom',
      'marginRight': 'marginBottom'
    }[property];
  }
  function getDirectionPropertyValue(node, label) {
    return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);
  }
  const params = swiper.params;
  const {
    wrapperEl,
    slidesEl,
    size: swiperSize,
    rtlTranslate: rtl,
    wrongRTL,
  } = swiper;
  const isVirtual = swiper.virtual && params.virtual.enabled;
  const previousSlidesLength = isVirtual
    ? swiper.virtual.slides.length
    : swiper.slides.length;
  const slides = elementChildren(
    slidesEl,
    `.${swiper.params.slideClass}, swiper-slide`
  );
  const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;
  let snapGrid = [];
  const slidesGrid = [];
  const slidesSizesGrid = [];
  let offsetBefore = params.slidesOffsetBefore;
  if (typeof offsetBefore === "function") {
    offsetBefore = params.slidesOffsetBefore.call(swiper);
  }
  let offsetAfter = params.slidesOffsetAfter;
  if (typeof offsetAfter === "function") {
    offsetAfter = params.slidesOffsetAfter.call(swiper);
  }
  const previousSnapGridLength = swiper.snapGrid.length;
  const previousSlidesGridLength = swiper.slidesGrid.length;
  let spaceBetween = params.spaceBetween;
  let slidePosition = -offsetBefore;
  let prevSlideSize = 0;
  let index = 0;
  if (typeof swiperSize === "undefined") {
    return;
  }
  if (typeof spaceBetween === "string" && spaceBetween.indexOf("%") >= 0) {
    spaceBetween =
      (parseFloat(spaceBetween.replace("%", "")) / 100) * swiperSize;
  } else if (typeof spaceBetween === "string") {
    spaceBetween = parseFloat(spaceBetween);
  }
  swiper.virtualSize = -spaceBetween;

  // reset margins
  slides.forEach((slideEl) => {
    if (rtl) {
      slideEl.style.marginLeft = "";
    } else {
      slideEl.style.marginRight = "";
    }
    slideEl.style.marginBottom = "";
    slideEl.style.marginTop = "";
  });

  // reset cssMode offsets
  if (params.centeredSlides && params.cssMode) {
    setCSSProperty(wrapperEl, "--swiper-centered-offset-before", "");
    setCSSProperty(wrapperEl, "--swiper-centered-offset-after", "");
  }
  const gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;
  if (gridEnabled) {
    swiper.grid.initSlides(slidesLength);
  }

  // Calc slides
  let slideSize;
  const shouldResetSlideSize =
    params.slidesPerView === "auto" &&
    params.breakpoints &&
    Object.keys(params.breakpoints).filter((key) => {
      return typeof params.breakpoints[key].slidesPerView !== "undefined";
    }).length > 0;
  for (let i = 0; i < slidesLength; i += 1) {
    slideSize = 0;
    let slide;
    if (slides[i]) slide = slides[i];
    if (gridEnabled) {
      swiper.grid.updateSlide(i, slide, slidesLength, getDirectionLabel);
    }
    if (slides[i] && elementStyle(slide, "display") === "none") continue; // eslint-disable-line

    if (params.slidesPerView === "auto") {
      if (shouldResetSlideSize) {
        slides[i].style[getDirectionLabel("width")] = ``;
      }
      const slideStyles = getComputedStyle(slide);
      const currentTransform = slide.style.transform;
      const currentWebKitTransform = slide.style.webkitTransform;
      if (currentTransform) {
        slide.style.transform = "none";
      }
      if (currentWebKitTransform) {
        slide.style.webkitTransform = "none";
      }
      if (params.roundLengths) {
        slideSize = swiper.isHorizontal()
          ? elementOuterSize(slide, "width", true)
          : elementOuterSize(slide, "height", true);
      } else {
        // eslint-disable-next-line
        const width = getDirectionPropertyValue(slideStyles, "width");
        const paddingLeft = getDirectionPropertyValue(
          slideStyles,
          "padding-left"
        );
        const paddingRight = getDirectionPropertyValue(
          slideStyles,
          "padding-right"
        );
        const marginLeft = getDirectionPropertyValue(
          slideStyles,
          "margin-left"
        );
        const marginRight = getDirectionPropertyValue(
          slideStyles,
          "margin-right"
        );
        const boxSizing = slideStyles.getPropertyValue("box-sizing");
        if (boxSizing && boxSizing === "border-box") {
          slideSize = width + marginLeft + marginRight;
        } else {
          const { clientWidth, offsetWidth } = slide;
          slideSize =
            width +
            paddingLeft +
            paddingRight +
            marginLeft +
            marginRight +
            (offsetWidth - clientWidth);
        }
      }
      if (currentTransform) {
        slide.style.transform = currentTransform;
      }
      if (currentWebKitTransform) {
        slide.style.webkitTransform = currentWebKitTransform;
      }
      if (params.roundLengths) slideSize = Math.floor(slideSize);
    } else {
      slideSize =
        (swiperSize - (params.slidesPerView - 1) * spaceBetween) /
        params.slidesPerView;
      if (params.roundLengths) slideSize = Math.floor(slideSize);
      if (slides[i]) {
        slides[i].style[getDirectionLabel("width")] = `${slideSize}px`;
      }
    }
    if (slides[i]) {
      slides[i].swiperSlideSize = slideSize;
    }
    slidesSizesGrid.push(slideSize);
    if (params.centeredSlides) {
      slidePosition =
        slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;
      if (prevSlideSize === 0 && i !== 0)
        slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
      if (i === 0)
        slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
      if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;
      if (params.roundLengths) slidePosition = Math.floor(slidePosition);
      if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);
      slidesGrid.push(slidePosition);
    } else {
      if (params.roundLengths) slidePosition = Math.floor(slidePosition);
      if (
        (index - Math.min(swiper.params.slidesPerGroupSkip, index)) %
          swiper.params.slidesPerGroup ===
        0
      )
        snapGrid.push(slidePosition);
      slidesGrid.push(slidePosition);
      slidePosition = slidePosition + slideSize + spaceBetween;
    }
    swiper.virtualSize += slideSize + spaceBetween;
    prevSlideSize = slideSize;
    index += 1;
  }
  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;
  if (
    rtl &&
    wrongRTL &&
    (params.effect === "slide" || params.effect === "coverflow")
  ) {
    wrapperEl.style.width = `${swiper.virtualSize + spaceBetween}px`;
  }
  if (params.setWrapperSize) {
    wrapperEl.style[getDirectionLabel("width")] = `${
      swiper.virtualSize + spaceBetween
    }px`;
  }
  if (gridEnabled) {
    swiper.grid.updateWrapperSize(slideSize, snapGrid, getDirectionLabel);
  }

  // Remove last grid elements depending on width
  if (!params.centeredSlides) {
    const newSlidesGrid = [];
    for (let i = 0; i < snapGrid.length; i += 1) {
      let slidesGridItem = snapGrid[i];
      if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);
      if (snapGrid[i] <= swiper.virtualSize - swiperSize) {
        newSlidesGrid.push(slidesGridItem);
      }
    }
    snapGrid = newSlidesGrid;
    if (
      Math.floor(swiper.virtualSize - swiperSize) -
        Math.floor(snapGrid[snapGrid.length - 1]) >
      1
    ) {
      snapGrid.push(swiper.virtualSize - swiperSize);
    }
  }
  if (isVirtual && params.loop) {
    const size = slidesSizesGrid[0] + spaceBetween;
    if (params.slidesPerGroup > 1) {
      const groups = Math.ceil(
        (swiper.virtual.slidesBefore + swiper.virtual.slidesAfter) /
          params.slidesPerGroup
      );
      const groupSize = size * params.slidesPerGroup;
      for (let i = 0; i < groups; i += 1) {
        snapGrid.push(snapGrid[snapGrid.length - 1] + groupSize);
      }
    }
    for (
      let i = 0;
      i < swiper.virtual.slidesBefore + swiper.virtual.slidesAfter;
      i += 1
    ) {
      if (params.slidesPerGroup === 1) {
        snapGrid.push(snapGrid[snapGrid.length - 1] + size);
      }
      slidesGrid.push(slidesGrid[slidesGrid.length - 1] + size);
      swiper.virtualSize += size;
    }
  }
  if (snapGrid.length === 0) snapGrid = [0];
  if (spaceBetween !== 0) {
    const key =
      swiper.isHorizontal() && rtl
        ? "marginLeft"
        : getDirectionLabel("marginRight");
    slides
      .filter((_, slideIndex) => {
        if (!params.cssMode || params.loop) return true;
        if (slideIndex === slides.length - 1) {
          return false;
        }
        return true;
      })
      .forEach((slideEl) => {
        slideEl.style[key] = `${spaceBetween}px`;
      });
  }
  if (params.centeredSlides && params.centeredSlidesBounds) {
    let allSlidesSize = 0;
    slidesSizesGrid.forEach((slideSizeValue) => {
      allSlidesSize += slideSizeValue + (spaceBetween || 0);
    });
    allSlidesSize -= spaceBetween;
    const maxSnap = allSlidesSize - swiperSize;
    snapGrid = snapGrid.map((snap) => {
      if (snap <= 0) return -offsetBefore;
      if (snap > maxSnap) return maxSnap + offsetAfter;
      return snap;
    });
  }
  if (params.centerInsufficientSlides) {
    let allSlidesSize = 0;
    slidesSizesGrid.forEach((slideSizeValue) => {
      allSlidesSize += slideSizeValue + (spaceBetween || 0);
    });
    allSlidesSize -= spaceBetween;
    if (allSlidesSize < swiperSize) {
      const allSlidesOffset = (swiperSize - allSlidesSize) / 2;
      snapGrid.forEach((snap, snapIndex) => {
        snapGrid[snapIndex] = snap - allSlidesOffset;
      });
      slidesGrid.forEach((snap, snapIndex) => {
        slidesGrid[snapIndex] = snap + allSlidesOffset;
      });
    }
  }
  Object.assign(swiper, {
    slides,
    snapGrid,
    slidesGrid,
    slidesSizesGrid,
  });
  if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {
    setCSSProperty(
      wrapperEl,
      "--swiper-centered-offset-before",
      `${-snapGrid[0]}px`
    );
    setCSSProperty(
      wrapperEl,
      "--swiper-centered-offset-after",
      `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`
    );
    const addToSnapGrid = -swiper.snapGrid[0];
    const addToSlidesGrid = -swiper.slidesGrid[0];
    swiper.snapGrid = swiper.snapGrid.map((v) => v + addToSnapGrid);
    swiper.slidesGrid = swiper.slidesGrid.map((v) => v + addToSlidesGrid);
  }
  if (slidesLength !== previousSlidesLength) {
    swiper.emit("slidesLengthChange");
  }
  if (snapGrid.length !== previousSnapGridLength) {
    if (swiper.params.watchOverflow) swiper.checkOverflow();
    swiper.emit("snapGridLengthChange");
  }
  if (slidesGrid.length !== previousSlidesGridLength) {
    swiper.emit("slidesGridLengthChange");
  }
  if (params.watchSlidesProgress) {
    swiper.updateSlidesOffset();
  }
  if (
    !isVirtual &&
    !params.cssMode &&
    (params.effect === "slide" || params.effect === "fade")
  ) {
    const backFaceHiddenClass = `${params.containerModifierClass}backface-hidden`;
    const hasClassBackfaceClassAdded =
      swiper.el.classList.contains(backFaceHiddenClass);
    if (slidesLength <= params.maxBackfaceHiddenSlides) {
      if (!hasClassBackfaceClassAdded)
        swiper.el.classList.add(backFaceHiddenClass);
    } else if (hasClassBackfaceClassAdded) {
      swiper.el.classList.remove(backFaceHiddenClass);
    }
  }
}

function updateAutoHeight(speed) {
  const swiper = this;
  const activeSlides = [];
  const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
  let newHeight = 0;
  let i;
  if (typeof speed === "number") {
    swiper.setTransition(speed);
  } else if (speed === true) {
    swiper.setTransition(swiper.params.speed);
  }
  const getSlideByIndex = (index) => {
    if (isVirtual) {
      return swiper.slides[swiper.getSlideIndexByData(index)];
    }
    return swiper.slides[index];
  };
  // Find slides currently in view
  if (
    swiper.params.slidesPerView !== "auto" &&
    swiper.params.slidesPerView > 1
  ) {
    if (swiper.params.centeredSlides) {
      (swiper.visibleSlides || []).forEach((slide) => {
        activeSlides.push(slide);
      });
    } else {
      for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {
        const index = swiper.activeIndex + i;
        if (index > swiper.slides.length && !isVirtual) break;
        activeSlides.push(getSlideByIndex(index));
      }
    }
  } else {
    activeSlides.push(getSlideByIndex(swiper.activeIndex));
  }

  // Find new height from highest slide in view
  for (i = 0; i < activeSlides.length; i += 1) {
    if (typeof activeSlides[i] !== "undefined") {
      const height = activeSlides[i].offsetHeight;
      newHeight = height > newHeight ? height : newHeight;
    }
  }

  // Update Height
  if (newHeight || newHeight === 0)
    swiper.wrapperEl.style.height = `${newHeight}px`;
}

function updateSlidesOffset() {
  const swiper = this;
  const slides = swiper.slides;
  // eslint-disable-next-line
  const minusOffset = swiper.isElement
    ? swiper.isHorizontal()
      ? swiper.wrapperEl.offsetLeft
      : swiper.wrapperEl.offsetTop
    : 0;
  for (let i = 0; i < slides.length; i += 1) {
    slides[i].swiperSlideOffset =
      (swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop) -
      minusOffset -
      swiper.cssOverflowAdjustment();
  }
}

function updateSlidesProgress(translate) {
  if (translate === void 0) {
    translate = (this && this.translate) || 0;
  }
  const swiper = this;
  const params = swiper.params;
  const { slides, rtlTranslate: rtl, snapGrid } = swiper;
  if (slides.length === 0) return;
  if (typeof slides[0].swiperSlideOffset === "undefined")
    swiper.updateSlidesOffset();
  let offsetCenter = -translate;
  if (rtl) offsetCenter = translate;

  // Visible Slides
  slides.forEach((slideEl) => {
    slideEl.classList.remove(params.slideVisibleClass);
  });
  swiper.visibleSlidesIndexes = [];
  swiper.visibleSlides = [];
  let spaceBetween = params.spaceBetween;
  if (typeof spaceBetween === "string" && spaceBetween.indexOf("%") >= 0) {
    spaceBetween =
      (parseFloat(spaceBetween.replace("%", "")) / 100) * swiper.size;
  } else if (typeof spaceBetween === "string") {
    spaceBetween = parseFloat(spaceBetween);
  }
  for (let i = 0; i < slides.length; i += 1) {
    const slide = slides[i];
    let slideOffset = slide.swiperSlideOffset;
    if (params.cssMode && params.centeredSlides) {
      slideOffset -= slides[0].swiperSlideOffset;
    }
    const slideProgress =
      (offsetCenter +
        (params.centeredSlides ? swiper.minTranslate() : 0) -
        slideOffset) /
      (slide.swiperSlideSize + spaceBetween);
    const originalSlideProgress =
      (offsetCenter -
        snapGrid[0] +
        (params.centeredSlides ? swiper.minTranslate() : 0) -
        slideOffset) /
      (slide.swiperSlideSize + spaceBetween);
    const slideBefore = -(offsetCenter - slideOffset);
    const slideAfter = slideBefore + swiper.slidesSizesGrid[i];
    const isVisible =
      (slideBefore >= 0 && slideBefore < swiper.size - 1) ||
      (slideAfter > 1 && slideAfter <= swiper.size) ||
      (slideBefore <= 0 && slideAfter >= swiper.size);
    if (isVisible) {
      swiper.visibleSlides.push(slide);
      swiper.visibleSlidesIndexes.push(i);
      slides[i].classList.add(params.slideVisibleClass);
    }
    slide.progress = rtl ? -slideProgress : slideProgress;
    slide.originalProgress = rtl
      ? -originalSlideProgress
      : originalSlideProgress;
  }
}

function updateProgress(translate) {
  const swiper = this;
  if (typeof translate === "undefined") {
    const multiplier = swiper.rtlTranslate ? -1 : 1;
    // eslint-disable-next-line
    translate =
      (swiper && swiper.translate && swiper.translate * multiplier) || 0;
  }
  const params = swiper.params;
  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
  let { progress, isBeginning, isEnd, progressLoop } = swiper;
  const wasBeginning = isBeginning;
  const wasEnd = isEnd;
  if (translatesDiff === 0) {
    progress = 0;
    isBeginning = true;
    isEnd = true;
  } else {
    progress = (translate - swiper.minTranslate()) / translatesDiff;
    const isBeginningRounded = Math.abs(translate - swiper.minTranslate()) < 1;
    const isEndRounded = Math.abs(translate - swiper.maxTranslate()) < 1;
    isBeginning = isBeginningRounded || progress <= 0;
    isEnd = isEndRounded || progress >= 1;
    if (isBeginningRounded) progress = 0;
    if (isEndRounded) progress = 1;
  }
  if (params.loop) {
    const firstSlideIndex = swiper.getSlideIndexByData(0);
    const lastSlideIndex = swiper.getSlideIndexByData(swiper.slides.length - 1);
    const firstSlideTranslate = swiper.slidesGrid[firstSlideIndex];
    const lastSlideTranslate = swiper.slidesGrid[lastSlideIndex];
    const translateMax = swiper.slidesGrid[swiper.slidesGrid.length - 1];
    const translateAbs = Math.abs(translate);
    if (translateAbs >= firstSlideTranslate) {
      progressLoop = (translateAbs - firstSlideTranslate) / translateMax;
    } else {
      progressLoop =
        (translateAbs + translateMax - lastSlideTranslate) / translateMax;
    }
    if (progressLoop > 1) progressLoop -= 1;
  }
  Object.assign(swiper, {
    progress,
    progressLoop,
    isBeginning,
    isEnd,
  });
  if (
    params.watchSlidesProgress ||
    (params.centeredSlides && params.autoHeight)
  )
    swiper.updateSlidesProgress(translate);
  if (isBeginning && !wasBeginning) {
    swiper.emit("reachBeginning toEdge");
  }
  if (isEnd && !wasEnd) {
    swiper.emit("reachEnd toEdge");
  }
  if ((wasBeginning && !isBeginning) || (wasEnd && !isEnd)) {
    swiper.emit("fromEdge");
  }
  swiper.emit("progress", progress);
}

function updateSlidesClasses() {
  const swiper = this;
  const { slides, params, slidesEl, activeIndex } = swiper;
  const isVirtual = swiper.virtual && params.virtual.enabled;
  const getFilteredSlide = (selector) => {
    return elementChildren(
      slidesEl,
      `.${params.slideClass}${selector}, swiper-slide${selector}`
    )[0];
  };
  slides.forEach((slideEl) => {
    slideEl.classList.remove(
      params.slideActiveClass,
      params.slideNextClass,
      params.slidePrevClass
    );
  });
  let activeSlide;
  if (isVirtual) {
    if (params.loop) {
      let slideIndex = activeIndex - swiper.virtual.slidesBefore;
      if (slideIndex < 0)
        slideIndex = swiper.virtual.slides.length + slideIndex;
      if (slideIndex >= swiper.virtual.slides.length)
        slideIndex -= swiper.virtual.slides.length;
      activeSlide = getFilteredSlide(
        `[data-swiper-slide-index="${slideIndex}"]`
      );
    } else {
      activeSlide = getFilteredSlide(
        `[data-swiper-slide-index="${activeIndex}"]`
      );
    }
  } else {
    activeSlide = slides[activeIndex];
  }
  if (activeSlide) {
    // Active classes
    activeSlide.classList.add(params.slideActiveClass);

    // Next Slide
    let nextSlide = elementNextAll(
      activeSlide,
      `.${params.slideClass}, swiper-slide`
    )[0];
    if (params.loop && !nextSlide) {
      nextSlide = slides[0];
    }
    if (nextSlide) {
      nextSlide.classList.add(params.slideNextClass);
    }
    // Prev Slide
    let prevSlide = elementPrevAll(
      activeSlide,
      `.${params.slideClass}, swiper-slide`
    )[0];
    if (params.loop && !prevSlide === 0) {
      prevSlide = slides[slides.length - 1];
    }
    if (prevSlide) {
      prevSlide.classList.add(params.slidePrevClass);
    }
  }
  swiper.emitSlidesClasses();
}

const processLazyPreloader = (swiper, imageEl) => {
  if (!swiper || swiper.destroyed || !swiper.params) return;
  const slideSelector = () =>
    swiper.isElement ? `swiper-slide` : `.${swiper.params.slideClass}`;
  const slideEl = imageEl.closest(slideSelector());
  if (slideEl) {
    let lazyEl = slideEl.querySelector(`.${swiper.params.lazyPreloaderClass}`);
    if (!lazyEl && swiper.isElement) {
      if (slideEl.shadowRoot) {
        lazyEl = slideEl.shadowRoot.querySelector(
          `.${swiper.params.lazyPreloaderClass}`
        );
      } else {
        // init later
        requestAnimationFrame(() => {
          if (slideEl.shadowRoot) {
            lazyEl = slideEl.shadowRoot.querySelector(
              `.${swiper.params.lazyPreloaderClass}`
            );
            if (lazyEl) lazyEl.remove();
          }
        });
      }
    }
    if (lazyEl) lazyEl.remove();
  }
};
const unlazy = (swiper, index) => {
  if (!swiper.slides[index]) return;
  const imageEl = swiper.slides[index].querySelector('[loading="lazy"]');
  if (imageEl) imageEl.removeAttribute("loading");
};
const preload = (swiper) => {
  if (!swiper || swiper.destroyed || !swiper.params) return;
  let amount = swiper.params.lazyPreloadPrevNext;
  const len = swiper.slides.length;
  if (!len || !amount || amount < 0) return;
  amount = Math.min(amount, len);
  const slidesPerView =
    swiper.params.slidesPerView === "auto"
      ? swiper.slidesPerViewDynamic()
      : Math.ceil(swiper.params.slidesPerView);
  const activeIndex = swiper.activeIndex;
  if (swiper.params.grid && swiper.params.grid.rows > 1) {
    const activeColumn = activeIndex;
    const preloadColumns = [activeColumn - amount];
    preloadColumns.push(
      ...Array.from({
        length: amount,
      }).map((_, i) => {
        return activeColumn + slidesPerView + i;
      })
    );
    swiper.slides.forEach((slideEl, i) => {
      if (preloadColumns.includes(slideEl.column)) unlazy(swiper, i);
    });
    return;
  }
  const slideIndexLastInView = activeIndex + slidesPerView - 1;
  if (swiper.params.rewind || swiper.params.loop) {
    for (
      let i = activeIndex - amount;
      i <= slideIndexLastInView + amount;
      i += 1
    ) {
      const realIndex = ((i % len) + len) % len;
      if (realIndex < activeIndex || realIndex > slideIndexLastInView)
        unlazy(swiper, realIndex);
    }
  } else {
    for (
      let i = Math.max(activeIndex - amount, 0);
      i <= Math.min(slideIndexLastInView + amount, len - 1);
      i += 1
    ) {
      if (i !== activeIndex && (i > slideIndexLastInView || i < activeIndex)) {
        unlazy(swiper, i);
      }
    }
  }
};

function getActiveIndexByTranslate(swiper) {
  const { slidesGrid, params } = swiper;
  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
  let activeIndex;
  for (let i = 0; i < slidesGrid.length; i += 1) {
    if (typeof slidesGrid[i + 1] !== "undefined") {
      if (
        translate >= slidesGrid[i] &&
        translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2
      ) {
        activeIndex = i;
      } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {
        activeIndex = i + 1;
      }
    } else if (translate >= slidesGrid[i]) {
      activeIndex = i;
    }
  }
  // Normalize slideIndex
  if (params.normalizeSlideIndex) {
    if (activeIndex < 0 || typeof activeIndex === "undefined") activeIndex = 0;
  }
  return activeIndex;
}
function updateActiveIndex(newActiveIndex) {
  const swiper = this;
  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
  const {
    snapGrid,
    params,
    activeIndex: previousIndex,
    realIndex: previousRealIndex,
    snapIndex: previousSnapIndex,
  } = swiper;
  let activeIndex = newActiveIndex;
  let snapIndex;
  const getVirtualRealIndex = (aIndex) => {
    let realIndex = aIndex - swiper.virtual.slidesBefore;
    if (realIndex < 0) {
      realIndex = swiper.virtual.slides.length + realIndex;
    }
    if (realIndex >= swiper.virtual.slides.length) {
      realIndex -= swiper.virtual.slides.length;
    }
    return realIndex;
  };
  if (typeof activeIndex === "undefined") {
    activeIndex = getActiveIndexByTranslate(swiper);
  }
  if (snapGrid.indexOf(translate) >= 0) {
    snapIndex = snapGrid.indexOf(translate);
  } else {
    const skip = Math.min(params.slidesPerGroupSkip, activeIndex);
    snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);
  }
  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;
  if (activeIndex === previousIndex) {
    if (snapIndex !== previousSnapIndex) {
      swiper.snapIndex = snapIndex;
      swiper.emit("snapIndexChange");
    }
    if (swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled) {
      swiper.realIndex = getVirtualRealIndex(activeIndex);
    }
    return;
  }
  // Get real index
  let realIndex;
  if (swiper.virtual && params.virtual.enabled && params.loop) {
    realIndex = getVirtualRealIndex(activeIndex);
  } else if (swiper.slides[activeIndex]) {
    realIndex = parseInt(
      swiper.slides[activeIndex].getAttribute("data-swiper-slide-index") ||
        activeIndex,
      10
    );
  } else {
    realIndex = activeIndex;
  }
  Object.assign(swiper, {
    previousSnapIndex,
    snapIndex,
    previousRealIndex,
    realIndex,
    previousIndex,
    activeIndex,
  });
  if (swiper.initialized) {
    preload(swiper);
  }
  swiper.emit("activeIndexChange");
  swiper.emit("snapIndexChange");
  if (swiper.initialized || swiper.params.runCallbacksOnInit) {
    if (previousRealIndex !== realIndex) {
      swiper.emit("realIndexChange");
    }
    swiper.emit("slideChange");
  }
}

function updateClickedSlide(el, path) {
  const swiper = this;
  const params = swiper.params;
  let slide = el.closest(`.${params.slideClass}, swiper-slide`);
  if (
    !slide &&
    swiper.isElement &&
    path &&
    path.length > 1 &&
    path.includes(el)
  ) {
    [...path.slice(path.indexOf(el) + 1, path.length)].forEach((pathEl) => {
      if (
        !slide &&
        pathEl.matches &&
        pathEl.matches(`.${params.slideClass}, swiper-slide`)
      ) {
        slide = pathEl;
      }
    });
  }
  let slideFound = false;
  let slideIndex;
  if (slide) {
    for (let i = 0; i < swiper.slides.length; i += 1) {
      if (swiper.slides[i] === slide) {
        slideFound = true;
        slideIndex = i;
        break;
      }
    }
  }
  if (slide && slideFound) {
    swiper.clickedSlide = slide;
    if (swiper.virtual && swiper.params.virtual.enabled) {
      swiper.clickedIndex = parseInt(
        slide.getAttribute("data-swiper-slide-index"),
        10
      );
    } else {
      swiper.clickedIndex = slideIndex;
    }
  } else {
    swiper.clickedSlide = undefined;
    swiper.clickedIndex = undefined;
    return;
  }
  if (
    params.slideToClickedSlide &&
    swiper.clickedIndex !== undefined &&
    swiper.clickedIndex !== swiper.activeIndex
  ) {
    swiper.slideToClickedSlide();
  }
}

var update = {
  updateSize,
  updateSlides,
  updateAutoHeight,
  updateSlidesOffset,
  updateSlidesProgress,
  updateProgress,
  updateSlidesClasses,
  updateActiveIndex,
  updateClickedSlide,
};

function getSwiperTranslate(axis) {
  if (axis === void 0) {
    axis = this.isHorizontal() ? "x" : "y";
  }
  const swiper = this;
  const { params, rtlTranslate: rtl, translate, wrapperEl } = swiper;
  if (params.virtualTranslate) {
    return rtl ? -translate : translate;
  }
  if (params.cssMode) {
    return translate;
  }
  let currentTranslate = getTranslate$1(wrapperEl, axis);
  currentTranslate += swiper.cssOverflowAdjustment();
  if (rtl) currentTranslate = -currentTranslate;
  return currentTranslate || 0;
}

function setTranslate(translate, byController) {
  const swiper = this;
  const { rtlTranslate: rtl, params, wrapperEl, progress } = swiper;
  let x = 0;
  let y = 0;
  const z = 0;
  if (swiper.isHorizontal()) {
    x = rtl ? -translate : translate;
  } else {
    y = translate;
  }
  if (params.roundLengths) {
    x = Math.floor(x);
    y = Math.floor(y);
  }
  swiper.previousTranslate = swiper.translate;
  swiper.translate = swiper.isHorizontal() ? x : y;
  if (params.cssMode) {
    wrapperEl[swiper.isHorizontal() ? "scrollLeft" : "scrollTop"] =
      swiper.isHorizontal() ? -x : -y;
  } else if (!params.virtualTranslate) {
    if (swiper.isHorizontal()) {
      x -= swiper.cssOverflowAdjustment();
    } else {
      y -= swiper.cssOverflowAdjustment();
    }
    wrapperEl.style.transform = `translate3d(${x}px, ${y}px, ${z}px)`;
  }

  // Check if we need to update progress
  let newProgress;
  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
  if (translatesDiff === 0) {
    newProgress = 0;
  } else {
    newProgress = (translate - swiper.minTranslate()) / translatesDiff;
  }
  if (newProgress !== progress) {
    swiper.updateProgress(translate);
  }
  swiper.emit("setTranslate", swiper.translate, byController);
}

function minTranslate() {
  return -this.snapGrid[0];
}

function maxTranslate() {
  return -this.snapGrid[this.snapGrid.length - 1];
}

function translateTo(
  translate,
  speed,
  runCallbacks,
  translateBounds,
  internal
) {
  if (translate === void 0) {
    translate = 0;
  }
  if (speed === void 0) {
    speed = this.params.speed;
  }
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }
  if (translateBounds === void 0) {
    translateBounds = true;
  }
  const swiper = this;
  const { params, wrapperEl } = swiper;
  if (swiper.animating && params.preventInteractionOnTransition) {
    return false;
  }
  const minTranslate = swiper.minTranslate();
  const maxTranslate = swiper.maxTranslate();
  let newTranslate;
  if (translateBounds && translate > minTranslate) newTranslate = minTranslate;
  else if (translateBounds && translate < maxTranslate)
    newTranslate = maxTranslate;
  else newTranslate = translate;

  // Update progress
  swiper.updateProgress(newTranslate);
  if (params.cssMode) {
    const isH = swiper.isHorizontal();
    if (speed === 0) {
      wrapperEl[isH ? "scrollLeft" : "scrollTop"] = -newTranslate;
    } else {
      if (!swiper.support.smoothScroll) {
        animateCSSModeScroll({
          swiper,
          targetPosition: -newTranslate,
          side: isH ? "left" : "top",
        });
        return true;
      }
      wrapperEl.scrollTo({
        [isH ? "left" : "top"]: -newTranslate,
        behavior: "smooth",
      });
    }
    return true;
  }
  if (speed === 0) {
    swiper.setTransition(0);
    swiper.setTranslate(newTranslate);
    if (runCallbacks) {
      swiper.emit("beforeTransitionStart", speed, internal);
      swiper.emit("transitionEnd");
    }
  } else {
    swiper.setTransition(speed);
    swiper.setTranslate(newTranslate);
    if (runCallbacks) {
      swiper.emit("beforeTransitionStart", speed, internal);
      swiper.emit("transitionStart");
    }
    if (!swiper.animating) {
      swiper.animating = true;
      if (!swiper.onTranslateToWrapperTransitionEnd) {
        swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {
          if (!swiper || swiper.destroyed) return;
          if (e.target !== this) return;
          swiper.wrapperEl.removeEventListener(
            "transitionend",
            swiper.onTranslateToWrapperTransitionEnd
          );
          swiper.onTranslateToWrapperTransitionEnd = null;
          delete swiper.onTranslateToWrapperTransitionEnd;
          if (runCallbacks) {
            swiper.emit("transitionEnd");
          }
        };
      }
      swiper.wrapperEl.addEventListener(
        "transitionend",
        swiper.onTranslateToWrapperTransitionEnd
      );
    }
  }
  return true;
}

var translate = {
  getTranslate: getSwiperTranslate,
  setTranslate,
  minTranslate,
  maxTranslate,
  translateTo,
};

function setTransition(duration, byController) {
  const swiper = this;
  if (!swiper.params.cssMode) {
    swiper.wrapperEl.style.transitionDuration = `${duration}ms`;
    swiper.wrapperEl.style.transitionDelay = duration === 0 ? `0ms` : "";
  }
  swiper.emit("setTransition", duration, byController);
}

function transitionEmit(_ref) {
  let { swiper, runCallbacks, direction, step } = _ref;
  const { activeIndex, previousIndex } = swiper;
  let dir = direction;
  if (!dir) {
    if (activeIndex > previousIndex) dir = "next";
    else if (activeIndex < previousIndex) dir = "prev";
    else dir = "reset";
  }
  swiper.emit(`transition${step}`);
  if (runCallbacks && activeIndex !== previousIndex) {
    if (dir === "reset") {
      swiper.emit(`slideResetTransition${step}`);
      return;
    }
    swiper.emit(`slideChangeTransition${step}`);
    if (dir === "next") {
      swiper.emit(`slideNextTransition${step}`);
    } else {
      swiper.emit(`slidePrevTransition${step}`);
    }
  }
}

function transitionStart(runCallbacks, direction) {
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }
  const swiper = this;
  const { params } = swiper;
  if (params.cssMode) return;
  if (params.autoHeight) {
    swiper.updateAutoHeight();
  }
  transitionEmit({
    swiper,
    runCallbacks,
    direction,
    step: "Start",
  });
}

function transitionEnd(runCallbacks, direction) {
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }
  const swiper = this;
  const { params } = swiper;
  swiper.animating = false;
  if (params.cssMode) return;
  swiper.setTransition(0);
  transitionEmit({
    swiper,
    runCallbacks,
    direction,
    step: "End",
  });
}

var transition = {
  setTransition,
  transitionStart,
  transitionEnd,
};

function slideTo(index, speed, runCallbacks, internal, initial) {
  if (index === void 0) {
    index = 0;
  }
  if (speed === void 0) {
    speed = this.params.speed;
  }
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }
  if (typeof index === "string") {
    index = parseInt(index, 10);
  }
  const swiper = this;
  let slideIndex = index;
  if (slideIndex < 0) slideIndex = 0;
  const {
    params,
    snapGrid,
    slidesGrid,
    previousIndex,
    activeIndex,
    rtlTranslate: rtl,
    wrapperEl,
    enabled,
  } = swiper;
  if (
    (swiper.animating && params.preventInteractionOnTransition) ||
    (!enabled && !internal && !initial)
  ) {
    return false;
  }
  const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);
  let snapIndex =
    skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);
  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;
  const translate = -snapGrid[snapIndex];
  // Normalize slideIndex
  if (params.normalizeSlideIndex) {
    for (let i = 0; i < slidesGrid.length; i += 1) {
      const normalizedTranslate = -Math.floor(translate * 100);
      const normalizedGrid = Math.floor(slidesGrid[i] * 100);
      const normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);
      if (typeof slidesGrid[i + 1] !== "undefined") {
        if (
          normalizedTranslate >= normalizedGrid &&
          normalizedTranslate <
            normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2
        ) {
          slideIndex = i;
        } else if (
          normalizedTranslate >= normalizedGrid &&
          normalizedTranslate < normalizedGridNext
        ) {
          slideIndex = i + 1;
        }
      } else if (normalizedTranslate >= normalizedGrid) {
        slideIndex = i;
      }
    }
  }
  // Directions locks
  if (swiper.initialized && slideIndex !== activeIndex) {
    if (
      !swiper.allowSlideNext &&
      (rtl
        ? translate > swiper.translate && translate > swiper.minTranslate()
        : translate < swiper.translate && translate < swiper.minTranslate())
    ) {
      return false;
    }
    if (
      !swiper.allowSlidePrev &&
      translate > swiper.translate &&
      translate > swiper.maxTranslate()
    ) {
      if ((activeIndex || 0) !== slideIndex) {
        return false;
      }
    }
  }
  if (slideIndex !== (previousIndex || 0) && runCallbacks) {
    swiper.emit("beforeSlideChangeStart");
  }

  // Update progress
  swiper.updateProgress(translate);
  let direction;
  if (slideIndex > activeIndex) direction = "next";
  else if (slideIndex < activeIndex) direction = "prev";
  else direction = "reset";

  // Update Index
  if (
    (rtl && -translate === swiper.translate) ||
    (!rtl && translate === swiper.translate)
  ) {
    swiper.updateActiveIndex(slideIndex);
    // Update Height
    if (params.autoHeight) {
      swiper.updateAutoHeight();
    }
    swiper.updateSlidesClasses();
    if (params.effect !== "slide") {
      swiper.setTranslate(translate);
    }
    if (direction !== "reset") {
      swiper.transitionStart(runCallbacks, direction);
      swiper.transitionEnd(runCallbacks, direction);
    }
    return false;
  }
  if (params.cssMode) {
    const isH = swiper.isHorizontal();
    const t = rtl ? translate : -translate;
    if (speed === 0) {
      const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
      if (isVirtual) {
        swiper.wrapperEl.style.scrollSnapType = "none";
        swiper._immediateVirtual = true;
      }
      if (
        isVirtual &&
        !swiper._cssModeVirtualInitialSet &&
        swiper.params.initialSlide > 0
      ) {
        swiper._cssModeVirtualInitialSet = true;
        requestAnimationFrame(() => {
          wrapperEl[isH ? "scrollLeft" : "scrollTop"] = t;
        });
      } else {
        wrapperEl[isH ? "scrollLeft" : "scrollTop"] = t;
      }
      if (isVirtual) {
        requestAnimationFrame(() => {
          swiper.wrapperEl.style.scrollSnapType = "";
          swiper._immediateVirtual = false;
        });
      }
    } else {
      if (!swiper.support.smoothScroll) {
        animateCSSModeScroll({
          swiper,
          targetPosition: t,
          side: isH ? "left" : "top",
        });
        return true;
      }
      wrapperEl.scrollTo({
        [isH ? "left" : "top"]: t,
        behavior: "smooth",
      });
    }
    return true;
  }
  swiper.setTransition(speed);
  swiper.setTranslate(translate);
  swiper.updateActiveIndex(slideIndex);
  swiper.updateSlidesClasses();
  swiper.emit("beforeTransitionStart", speed, internal);
  swiper.transitionStart(runCallbacks, direction);
  if (speed === 0) {
    swiper.transitionEnd(runCallbacks, direction);
  } else if (!swiper.animating) {
    swiper.animating = true;
    if (!swiper.onSlideToWrapperTransitionEnd) {
      swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {
        if (!swiper || swiper.destroyed) return;
        if (e.target !== this) return;
        swiper.wrapperEl.removeEventListener(
          "transitionend",
          swiper.onSlideToWrapperTransitionEnd
        );
        swiper.onSlideToWrapperTransitionEnd = null;
        delete swiper.onSlideToWrapperTransitionEnd;
        swiper.transitionEnd(runCallbacks, direction);
      };
    }
    swiper.wrapperEl.addEventListener(
      "transitionend",
      swiper.onSlideToWrapperTransitionEnd
    );
  }
  return true;
}

function slideToLoop(index, speed, runCallbacks, internal) {
  if (index === void 0) {
    index = 0;
  }
  if (speed === void 0) {
    speed = this.params.speed;
  }
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }
  if (typeof index === "string") {
    const indexAsNumber = parseInt(index, 10);
    index = indexAsNumber;
  }
  const swiper = this;
  let newIndex = index;
  if (swiper.params.loop) {
    if (swiper.virtual && swiper.params.virtual.enabled) {
      // eslint-disable-next-line
      newIndex = newIndex + swiper.virtual.slidesBefore;
    } else {
      newIndex = swiper.getSlideIndexByData(newIndex);
    }
  }
  return swiper.slideTo(newIndex, speed, runCallbacks, internal);
}

/* eslint no-unused-vars: "off" */
function slideNext(speed, runCallbacks, internal) {
  if (speed === void 0) {
    speed = this.params.speed;
  }
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }
  const swiper = this;
  const { enabled, params, animating } = swiper;
  if (!enabled) return swiper;
  let perGroup = params.slidesPerGroup;
  if (
    params.slidesPerView === "auto" &&
    params.slidesPerGroup === 1 &&
    params.slidesPerGroupAuto
  ) {
    perGroup = Math.max(swiper.slidesPerViewDynamic("current", true), 1);
  }
  const increment =
    swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup;
  const isVirtual = swiper.virtual && params.virtual.enabled;
  if (params.loop) {
    if (animating && !isVirtual && params.loopPreventsSliding) return false;
    swiper.loopFix({
      direction: "next",
    });
    // eslint-disable-next-line
    swiper._clientLeft = swiper.wrapperEl.clientLeft;
    if (swiper.activeIndex === swiper.slides.length - 1 && params.cssMode) {
      requestAnimationFrame(() => {
        swiper.slideTo(
          swiper.activeIndex + increment,
          speed,
          runCallbacks,
          internal
        );
      });
      return true;
    }
  }
  if (params.rewind && swiper.isEnd) {
    return swiper.slideTo(0, speed, runCallbacks, internal);
  }
  return swiper.slideTo(
    swiper.activeIndex + increment,
    speed,
    runCallbacks,
    internal
  );
}

/* eslint no-unused-vars: "off" */
function slidePrev(speed, runCallbacks, internal) {
  if (speed === void 0) {
    speed = this.params.speed;
  }
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }
  const swiper = this;
  const { params, snapGrid, slidesGrid, rtlTranslate, enabled, animating } =
    swiper;
  if (!enabled) return swiper;
  const isVirtual = swiper.virtual && params.virtual.enabled;
  if (params.loop) {
    if (animating && !isVirtual && params.loopPreventsSliding) return false;
    swiper.loopFix({
      direction: "prev",
    });
    // eslint-disable-next-line
    swiper._clientLeft = swiper.wrapperEl.clientLeft;
  }
  const translate = rtlTranslate ? swiper.translate : -swiper.translate;
  function normalize(val) {
    if (val < 0) return -Math.floor(Math.abs(val));
    return Math.floor(val);
  }
  const normalizedTranslate = normalize(translate);
  const normalizedSnapGrid = snapGrid.map((val) => normalize(val));
  let prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];
  if (typeof prevSnap === "undefined" && params.cssMode) {
    let prevSnapIndex;
    snapGrid.forEach((snap, snapIndex) => {
      if (normalizedTranslate >= snap) {
        // prevSnap = snap;
        prevSnapIndex = snapIndex;
      }
    });
    if (typeof prevSnapIndex !== "undefined") {
      prevSnap =
        snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex];
    }
  }
  let prevIndex = 0;
  if (typeof prevSnap !== "undefined") {
    prevIndex = slidesGrid.indexOf(prevSnap);
    if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;
    if (
      params.slidesPerView === "auto" &&
      params.slidesPerGroup === 1 &&
      params.slidesPerGroupAuto
    ) {
      prevIndex = prevIndex - swiper.slidesPerViewDynamic("previous", true) + 1;
      prevIndex = Math.max(prevIndex, 0);
    }
  }
  if (params.rewind && swiper.isBeginning) {
    const lastIndex =
      swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual
        ? swiper.virtual.slides.length - 1
        : swiper.slides.length - 1;
    return swiper.slideTo(lastIndex, speed, runCallbacks, internal);
  } else if (params.loop && swiper.activeIndex === 0 && params.cssMode) {
    requestAnimationFrame(() => {
      swiper.slideTo(prevIndex, speed, runCallbacks, internal);
    });
    return true;
  }
  return swiper.slideTo(prevIndex, speed, runCallbacks, internal);
}

/* eslint no-unused-vars: "off" */
function slideReset(speed, runCallbacks, internal) {
  if (speed === void 0) {
    speed = this.params.speed;
  }
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }
  const swiper = this;
  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);
}

/* eslint no-unused-vars: "off" */
function slideToClosest(speed, runCallbacks, internal, threshold) {
  if (speed === void 0) {
    speed = this.params.speed;
  }
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }
  if (threshold === void 0) {
    threshold = 0.5;
  }
  const swiper = this;
  let index = swiper.activeIndex;
  const skip = Math.min(swiper.params.slidesPerGroupSkip, index);
  const snapIndex =
    skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);
  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
  if (translate >= swiper.snapGrid[snapIndex]) {
    // The current translate is on or after the current snap index, so the choice
    // is between the current index and the one after it.
    const currentSnap = swiper.snapGrid[snapIndex];
    const nextSnap = swiper.snapGrid[snapIndex + 1];
    if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {
      index += swiper.params.slidesPerGroup;
    }
  } else {
    // The current translate is before the current snap index, so the choice
    // is between the current index and the one before it.
    const prevSnap = swiper.snapGrid[snapIndex - 1];
    const currentSnap = swiper.snapGrid[snapIndex];
    if (translate - prevSnap <= (currentSnap - prevSnap) * threshold) {
      index -= swiper.params.slidesPerGroup;
    }
  }
  index = Math.max(index, 0);
  index = Math.min(index, swiper.slidesGrid.length - 1);
  return swiper.slideTo(index, speed, runCallbacks, internal);
}

function slideToClickedSlide() {
  const swiper = this;
  const { params, slidesEl } = swiper;
  const slidesPerView =
    params.slidesPerView === "auto"
      ? swiper.slidesPerViewDynamic()
      : params.slidesPerView;
  let slideToIndex = swiper.clickedIndex;
  let realIndex;
  const slideSelector = swiper.isElement
    ? `swiper-slide`
    : `.${params.slideClass}`;
  if (params.loop) {
    if (swiper.animating) return;
    realIndex = parseInt(
      swiper.clickedSlide.getAttribute("data-swiper-slide-index"),
      10
    );
    if (params.centeredSlides) {
      if (
        slideToIndex < swiper.loopedSlides - slidesPerView / 2 ||
        slideToIndex >
          swiper.slides.length - swiper.loopedSlides + slidesPerView / 2
      ) {
        swiper.loopFix();
        slideToIndex = swiper.getSlideIndex(
          elementChildren(
            slidesEl,
            `${slideSelector}[data-swiper-slide-index="${realIndex}"]`
          )[0]
        );
        nextTick(() => {
          swiper.slideTo(slideToIndex);
        });
      } else {
        swiper.slideTo(slideToIndex);
      }
    } else if (slideToIndex > swiper.slides.length - slidesPerView) {
      swiper.loopFix();
      slideToIndex = swiper.getSlideIndex(
        elementChildren(
          slidesEl,
          `${slideSelector}[data-swiper-slide-index="${realIndex}"]`
        )[0]
      );
      nextTick(() => {
        swiper.slideTo(slideToIndex);
      });
    } else {
      swiper.slideTo(slideToIndex);
    }
  } else {
    swiper.slideTo(slideToIndex);
  }
}

var slide = {
  slideTo,
  slideToLoop,
  slideNext,
  slidePrev,
  slideReset,
  slideToClosest,
  slideToClickedSlide,
};

function loopCreate(slideRealIndex) {
  const swiper = this;
  const { params, slidesEl } = swiper;
  if (!params.loop || (swiper.virtual && swiper.params.virtual.enabled)) return;
  const slides = elementChildren(
    slidesEl,
    `.${params.slideClass}, swiper-slide`
  );
  slides.forEach((el, index) => {
    el.setAttribute("data-swiper-slide-index", index);
  });
  swiper.loopFix({
    slideRealIndex,
    direction: params.centeredSlides ? undefined : "next",
  });
}

function loopFix(_temp) {
  let {
    slideRealIndex,
    slideTo = true,
    direction,
    setTranslate,
    activeSlideIndex,
    byController,
    byMousewheel,
  } = _temp === void 0 ? {} : _temp;
  const swiper = this;
  if (!swiper.params.loop) return;
  swiper.emit("beforeLoopFix");
  const { slides, allowSlidePrev, allowSlideNext, slidesEl, params } = swiper;
  swiper.allowSlidePrev = true;
  swiper.allowSlideNext = true;
  if (swiper.virtual && params.virtual.enabled) {
    if (slideTo) {
      if (!params.centeredSlides && swiper.snapIndex === 0) {
        swiper.slideTo(swiper.virtual.slides.length, 0, false, true);
      } else if (
        params.centeredSlides &&
        swiper.snapIndex < params.slidesPerView
      ) {
        swiper.slideTo(
          swiper.virtual.slides.length + swiper.snapIndex,
          0,
          false,
          true
        );
      } else if (swiper.snapIndex === swiper.snapGrid.length - 1) {
        swiper.slideTo(swiper.virtual.slidesBefore, 0, false, true);
      }
    }
    swiper.allowSlidePrev = allowSlidePrev;
    swiper.allowSlideNext = allowSlideNext;
    swiper.emit("loopFix");
    return;
  }
  const slidesPerView =
    params.slidesPerView === "auto"
      ? swiper.slidesPerViewDynamic()
      : Math.ceil(parseFloat(params.slidesPerView, 10));
  let loopedSlides = params.loopedSlides || slidesPerView;
  if (loopedSlides % params.slidesPerGroup !== 0) {
    loopedSlides +=
      params.slidesPerGroup - (loopedSlides % params.slidesPerGroup);
  }
  swiper.loopedSlides = loopedSlides;
  const prependSlidesIndexes = [];
  const appendSlidesIndexes = [];
  let activeIndex = swiper.activeIndex;
  if (typeof activeSlideIndex === "undefined") {
    activeSlideIndex = swiper.getSlideIndex(
      swiper.slides.filter((el) =>
        el.classList.contains(params.slideActiveClass)
      )[0]
    );
  } else {
    activeIndex = activeSlideIndex;
  }
  const isNext = direction === "next" || !direction;
  const isPrev = direction === "prev" || !direction;
  let slidesPrepended = 0;
  let slidesAppended = 0;
  // prepend last slides before start
  if (activeSlideIndex < loopedSlides) {
    slidesPrepended = Math.max(
      loopedSlides - activeSlideIndex,
      params.slidesPerGroup
    );
    for (let i = 0; i < loopedSlides - activeSlideIndex; i += 1) {
      const index = i - Math.floor(i / slides.length) * slides.length;
      prependSlidesIndexes.push(slides.length - index - 1);
    }
  } else if (
    activeSlideIndex /* + slidesPerView */ >
    swiper.slides.length - loopedSlides * 2
  ) {
    slidesAppended = Math.max(
      activeSlideIndex - (swiper.slides.length - loopedSlides * 2),
      params.slidesPerGroup
    );
    for (let i = 0; i < slidesAppended; i += 1) {
      const index = i - Math.floor(i / slides.length) * slides.length;
      appendSlidesIndexes.push(index);
    }
  }
  if (isPrev) {
    prependSlidesIndexes.forEach((index) => {
      swiper.slides[index].swiperLoopMoveDOM = true;
      slidesEl.prepend(swiper.slides[index]);
      swiper.slides[index].swiperLoopMoveDOM = false;
    });
  }
  if (isNext) {
    appendSlidesIndexes.forEach((index) => {
      swiper.slides[index].swiperLoopMoveDOM = true;
      slidesEl.append(swiper.slides[index]);
      swiper.slides[index].swiperLoopMoveDOM = false;
    });
  }
  swiper.recalcSlides();
  if (params.slidesPerView === "auto") {
    swiper.updateSlides();
  }
  if (params.watchSlidesProgress) {
    swiper.updateSlidesOffset();
  }
  if (slideTo) {
    if (prependSlidesIndexes.length > 0 && isPrev) {
      if (typeof slideRealIndex === "undefined") {
        const currentSlideTranslate = swiper.slidesGrid[activeIndex];
        const newSlideTranslate =
          swiper.slidesGrid[activeIndex + slidesPrepended];
        const diff = newSlideTranslate - currentSlideTranslate;
        if (byMousewheel) {
          swiper.setTranslate(swiper.translate - diff);
        } else {
          swiper.slideTo(activeIndex + slidesPrepended, 0, false, true);
          if (setTranslate) {
            swiper.touches[swiper.isHorizontal() ? "startX" : "startY"] += diff;
            swiper.touchEventsData.currentTranslate = swiper.translate;
          }
        }
      } else {
        if (setTranslate) {
          swiper.slideToLoop(slideRealIndex, 0, false, true);
          swiper.touchEventsData.currentTranslate = swiper.translate;
        }
      }
    } else if (appendSlidesIndexes.length > 0 && isNext) {
      if (typeof slideRealIndex === "undefined") {
        const currentSlideTranslate = swiper.slidesGrid[activeIndex];
        const newSlideTranslate =
          swiper.slidesGrid[activeIndex - slidesAppended];
        const diff = newSlideTranslate - currentSlideTranslate;
        if (byMousewheel) {
          swiper.setTranslate(swiper.translate - diff);
        } else {
          swiper.slideTo(activeIndex - slidesAppended, 0, false, true);
          if (setTranslate) {
            swiper.touches[swiper.isHorizontal() ? "startX" : "startY"] += diff;
            swiper.touchEventsData.currentTranslate = swiper.translate;
          }
        }
      } else {
        swiper.slideToLoop(slideRealIndex, 0, false, true);
      }
    }
  }
  swiper.allowSlidePrev = allowSlidePrev;
  swiper.allowSlideNext = allowSlideNext;
  if (swiper.controller && swiper.controller.control && !byController) {
    const loopParams = {
      slideRealIndex,
      direction,
      setTranslate,
      activeSlideIndex,
      byController: true,
    };
    if (Array.isArray(swiper.controller.control)) {
      swiper.controller.control.forEach((c) => {
        if (!c.destroyed && c.params.loop)
          c.loopFix({
            ...loopParams,
            slideTo:
              c.params.slidesPerView === params.slidesPerView ? slideTo : false,
          });
      });
    } else if (
      swiper.controller.control instanceof swiper.constructor &&
      swiper.controller.control.params.loop
    ) {
      swiper.controller.control.loopFix({
        ...loopParams,
        slideTo:
          swiper.controller.control.params.slidesPerView ===
          params.slidesPerView
            ? slideTo
            : false,
      });
    }
  }
  swiper.emit("loopFix");
}

function loopDestroy() {
  const swiper = this;
  const { params, slidesEl } = swiper;
  if (!params.loop || (swiper.virtual && swiper.params.virtual.enabled)) return;
  swiper.recalcSlides();
  const newSlidesOrder = [];
  swiper.slides.forEach((slideEl) => {
    const index =
      typeof slideEl.swiperSlideIndex === "undefined"
        ? slideEl.getAttribute("data-swiper-slide-index") * 1
        : slideEl.swiperSlideIndex;
    newSlidesOrder[index] = slideEl;
  });
  swiper.slides.forEach((slideEl) => {
    slideEl.removeAttribute("data-swiper-slide-index");
  });
  newSlidesOrder.forEach((slideEl) => {
    slidesEl.append(slideEl);
  });
  swiper.recalcSlides();
  swiper.slideTo(swiper.realIndex, 0);
}

var loop = {
  loopCreate,
  loopFix,
  loopDestroy,
};

function setGrabCursor(moving) {
  const swiper = this;
  if (
    !swiper.params.simulateTouch ||
    (swiper.params.watchOverflow && swiper.isLocked) ||
    swiper.params.cssMode
  )
    return;
  const el =
    swiper.params.touchEventsTarget === "container"
      ? swiper.el
      : swiper.wrapperEl;
  if (swiper.isElement) {
    swiper.__preventObserver__ = true;
  }
  el.style.cursor = "move";
  el.style.cursor = moving ? "grabbing" : "grab";
  if (swiper.isElement) {
    requestAnimationFrame(() => {
      swiper.__preventObserver__ = false;
    });
  }
}

function unsetGrabCursor() {
  const swiper = this;
  if (
    (swiper.params.watchOverflow && swiper.isLocked) ||
    swiper.params.cssMode
  ) {
    return;
  }
  if (swiper.isElement) {
    swiper.__preventObserver__ = true;
  }
  swiper[
    swiper.params.touchEventsTarget === "container" ? "el" : "wrapperEl"
  ].style.cursor = "";
  if (swiper.isElement) {
    requestAnimationFrame(() => {
      swiper.__preventObserver__ = false;
    });
  }
}

var grabCursor = {
  setGrabCursor,
  unsetGrabCursor,
};

// Modified from https://stackoverflow.com/questions/54520554/custom-element-getrootnode-closest-function-crossing-multiple-parent-shadowd
function closestElement(selector, base) {
  if (base === void 0) {
    base = this;
  }
  function __closestFrom(el) {
    if (!el || el === getDocument() || el === getWindow()) return null;
    if (el.assignedSlot) el = el.assignedSlot;
    const found = el.closest(selector);
    if (!found && !el.getRootNode) {
      return null;
    }
    return found || __closestFrom(el.getRootNode().host);
  }
  return __closestFrom(base);
}
function onTouchStart(event) {
  const swiper = this;
  const document = getDocument();
  const window = getWindow();
  const data = swiper.touchEventsData;
  data.evCache.push(event);
  const { params, touches, enabled } = swiper;
  if (!enabled) return;
  if (!params.simulateTouch && event.pointerType === "mouse") return;
  if (swiper.animating && params.preventInteractionOnTransition) {
    return;
  }
  if (!swiper.animating && params.cssMode && params.loop) {
    swiper.loopFix();
  }
  let e = event;
  if (e.originalEvent) e = e.originalEvent;
  let targetEl = e.target;
  if (params.touchEventsTarget === "wrapper") {
    if (!swiper.wrapperEl.contains(targetEl)) return;
  }
  if ("which" in e && e.which === 3) return;
  if ("button" in e && e.button > 0) return;
  if (data.isTouched && data.isMoved) return;

  // change target el for shadow root component
  const swipingClassHasValue =
    !!params.noSwipingClass && params.noSwipingClass !== "";
  // eslint-disable-next-line
  const eventPath = event.composedPath ? event.composedPath() : event.path;
  if (swipingClassHasValue && e.target && e.target.shadowRoot && eventPath) {
    targetEl = eventPath[0];
  }
  const noSwipingSelector = params.noSwipingSelector
    ? params.noSwipingSelector
    : `.${params.noSwipingClass}`;
  const isTargetShadow = !!(e.target && e.target.shadowRoot);

  // use closestElement for shadow root element to get the actual closest for nested shadow root element
  if (
    params.noSwiping &&
    (isTargetShadow
      ? closestElement(noSwipingSelector, targetEl)
      : targetEl.closest(noSwipingSelector))
  ) {
    swiper.allowClick = true;
    return;
  }
  if (params.swipeHandler) {
    if (!targetEl.closest(params.swipeHandler)) return;
  }
  touches.currentX = e.pageX;
  touches.currentY = e.pageY;
  const startX = touches.currentX;
  const startY = touches.currentY;

  // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore

  const edgeSwipeDetection =
    params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;
  const edgeSwipeThreshold =
    params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;
  if (
    edgeSwipeDetection &&
    (startX <= edgeSwipeThreshold ||
      startX >= window.innerWidth - edgeSwipeThreshold)
  ) {
    if (edgeSwipeDetection === "prevent") {
      event.preventDefault();
    } else {
      return;
    }
  }
  Object.assign(data, {
    isTouched: true,
    isMoved: false,
    allowTouchCallbacks: true,
    isScrolling: undefined,
    startMoving: undefined,
  });
  touches.startX = startX;
  touches.startY = startY;
  data.touchStartTime = now$2();
  swiper.allowClick = true;
  swiper.updateSize();
  swiper.swipeDirection = undefined;
  if (params.threshold > 0) data.allowThresholdMove = false;
  let preventDefault = true;
  if (targetEl.matches(data.focusableElements)) {
    preventDefault = false;
    if (targetEl.nodeName === "SELECT") {
      data.isTouched = false;
    }
  }
  if (
    document.activeElement &&
    document.activeElement.matches(data.focusableElements) &&
    document.activeElement !== targetEl
  ) {
    document.activeElement.blur();
  }
  const shouldPreventDefault =
    preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;
  if (
    (params.touchStartForcePreventDefault || shouldPreventDefault) &&
    !targetEl.isContentEditable
  ) {
    e.preventDefault();
  }
  if (
    params.freeMode &&
    params.freeMode.enabled &&
    swiper.freeMode &&
    swiper.animating &&
    !params.cssMode
  ) {
    swiper.freeMode.onTouchStart();
  }
  swiper.emit("touchStart", e);
}

function onTouchMove(event) {
  const document = getDocument();
  const swiper = this;
  const data = swiper.touchEventsData;
  const { params, touches, rtlTranslate: rtl, enabled } = swiper;
  if (!enabled) return;
  if (!params.simulateTouch && event.pointerType === "mouse") return;
  let e = event;
  if (e.originalEvent) e = e.originalEvent;
  if (!data.isTouched) {
    if (data.startMoving && data.isScrolling) {
      swiper.emit("touchMoveOpposite", e);
    }
    return;
  }
  const pointerIndex = data.evCache.findIndex(
    (cachedEv) => cachedEv.pointerId === e.pointerId
  );
  if (pointerIndex >= 0) data.evCache[pointerIndex] = e;
  const targetTouch = data.evCache.length > 1 ? data.evCache[0] : e;
  const pageX = targetTouch.pageX;
  const pageY = targetTouch.pageY;
  if (e.preventedByNestedSwiper) {
    touches.startX = pageX;
    touches.startY = pageY;
    return;
  }
  if (!swiper.allowTouchMove) {
    if (!e.target.matches(data.focusableElements)) {
      swiper.allowClick = false;
    }
    if (data.isTouched) {
      Object.assign(touches, {
        startX: pageX,
        startY: pageY,
        prevX: swiper.touches.currentX,
        prevY: swiper.touches.currentY,
        currentX: pageX,
        currentY: pageY,
      });
      data.touchStartTime = now$2();
    }
    return;
  }
  if (params.touchReleaseOnEdges && !params.loop) {
    if (swiper.isVertical()) {
      // Vertical
      if (
        (pageY < touches.startY && swiper.translate <= swiper.maxTranslate()) ||
        (pageY > touches.startY && swiper.translate >= swiper.minTranslate())
      ) {
        data.isTouched = false;
        data.isMoved = false;
        return;
      }
    } else if (
      (pageX < touches.startX && swiper.translate <= swiper.maxTranslate()) ||
      (pageX > touches.startX && swiper.translate >= swiper.minTranslate())
    ) {
      return;
    }
  }
  if (document.activeElement) {
    if (
      e.target === document.activeElement &&
      e.target.matches(data.focusableElements)
    ) {
      data.isMoved = true;
      swiper.allowClick = false;
      return;
    }
  }
  if (data.allowTouchCallbacks) {
    swiper.emit("touchMove", e);
  }
  if (e.targetTouches && e.targetTouches.length > 1) return;
  touches.currentX = pageX;
  touches.currentY = pageY;
  const diffX = touches.currentX - touches.startX;
  const diffY = touches.currentY - touches.startY;
  if (
    swiper.params.threshold &&
    Math.sqrt(diffX ** 2 + diffY ** 2) < swiper.params.threshold
  )
    return;
  if (typeof data.isScrolling === "undefined") {
    let touchAngle;
    if (
      (swiper.isHorizontal() && touches.currentY === touches.startY) ||
      (swiper.isVertical() && touches.currentX === touches.startX)
    ) {
      data.isScrolling = false;
    } else {
      // eslint-disable-next-line
      if (diffX * diffX + diffY * diffY >= 25) {
        touchAngle =
          (Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180) / Math.PI;
        data.isScrolling = swiper.isHorizontal()
          ? touchAngle > params.touchAngle
          : 90 - touchAngle > params.touchAngle;
      }
    }
  }
  if (data.isScrolling) {
    swiper.emit("touchMoveOpposite", e);
  }
  if (typeof data.startMoving === "undefined") {
    if (
      touches.currentX !== touches.startX ||
      touches.currentY !== touches.startY
    ) {
      data.startMoving = true;
    }
  }
  if (
    data.isScrolling ||
    (swiper.zoom &&
      swiper.params.zoom &&
      swiper.params.zoom.enabled &&
      data.evCache.length > 1)
  ) {
    data.isTouched = false;
    return;
  }
  if (!data.startMoving) {
    return;
  }
  swiper.allowClick = false;
  if (!params.cssMode && e.cancelable) {
    e.preventDefault();
  }
  if (params.touchMoveStopPropagation && !params.nested) {
    e.stopPropagation();
  }
  let diff = swiper.isHorizontal() ? diffX : diffY;
  let touchesDiff = swiper.isHorizontal()
    ? touches.currentX - touches.previousX
    : touches.currentY - touches.previousY;
  if (params.oneWayMovement) {
    diff = Math.abs(diff) * (rtl ? 1 : -1);
    touchesDiff = Math.abs(touchesDiff) * (rtl ? 1 : -1);
  }
  touches.diff = diff;
  diff *= params.touchRatio;
  if (rtl) {
    diff = -diff;
    touchesDiff = -touchesDiff;
  }
  const prevTouchesDirection = swiper.touchesDirection;
  swiper.swipeDirection = diff > 0 ? "prev" : "next";
  swiper.touchesDirection = touchesDiff > 0 ? "prev" : "next";
  const isLoop = swiper.params.loop && !params.cssMode;
  const allowLoopFix =
    (swiper.swipeDirection === "next" && swiper.allowSlideNext) ||
    (swiper.swipeDirection === "prev" && swiper.allowSlidePrev);
  if (!data.isMoved) {
    if (isLoop && allowLoopFix) {
      swiper.loopFix({
        direction: swiper.swipeDirection,
      });
    }
    data.startTranslate = swiper.getTranslate();
    swiper.setTransition(0);
    if (swiper.animating) {
      const evt = new window.CustomEvent("transitionend", {
        bubbles: true,
        cancelable: true,
      });
      swiper.wrapperEl.dispatchEvent(evt);
    }
    data.allowMomentumBounce = false;
    // Grab Cursor
    if (
      params.grabCursor &&
      (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)
    ) {
      swiper.setGrabCursor(true);
    }
    swiper.emit("sliderFirstMove", e);
  }
  let loopFixed;
  if (
    data.isMoved &&
    prevTouchesDirection !== swiper.touchesDirection &&
    isLoop &&
    allowLoopFix &&
    Math.abs(diff) >= 1
  ) {
    // need another loop fix
    swiper.loopFix({
      direction: swiper.swipeDirection,
      setTranslate: true,
    });
    loopFixed = true;
  }
  swiper.emit("sliderMove", e);
  data.isMoved = true;
  data.currentTranslate = diff + data.startTranslate;
  let disableParentSwiper = true;
  let resistanceRatio = params.resistanceRatio;
  if (params.touchReleaseOnEdges) {
    resistanceRatio = 0;
  }
  if (diff > 0) {
    if (
      isLoop &&
      allowLoopFix &&
      !loopFixed &&
      data.currentTranslate >
        (params.centeredSlides
          ? swiper.minTranslate() - swiper.size / 2
          : swiper.minTranslate())
    ) {
      swiper.loopFix({
        direction: "prev",
        setTranslate: true,
        activeSlideIndex: 0,
      });
    }
    if (data.currentTranslate > swiper.minTranslate()) {
      disableParentSwiper = false;
      if (params.resistance) {
        data.currentTranslate =
          swiper.minTranslate() -
          1 +
          (-swiper.minTranslate() + data.startTranslate + diff) **
            resistanceRatio;
      }
    }
  } else if (diff < 0) {
    if (
      isLoop &&
      allowLoopFix &&
      !loopFixed &&
      data.currentTranslate <
        (params.centeredSlides
          ? swiper.maxTranslate() + swiper.size / 2
          : swiper.maxTranslate())
    ) {
      swiper.loopFix({
        direction: "next",
        setTranslate: true,
        activeSlideIndex:
          swiper.slides.length -
          (params.slidesPerView === "auto"
            ? swiper.slidesPerViewDynamic()
            : Math.ceil(parseFloat(params.slidesPerView, 10))),
      });
    }
    if (data.currentTranslate < swiper.maxTranslate()) {
      disableParentSwiper = false;
      if (params.resistance) {
        data.currentTranslate =
          swiper.maxTranslate() +
          1 -
          (swiper.maxTranslate() - data.startTranslate - diff) **
            resistanceRatio;
      }
    }
  }
  if (disableParentSwiper) {
    e.preventedByNestedSwiper = true;
  }

  // Directions locks
  if (
    !swiper.allowSlideNext &&
    swiper.swipeDirection === "next" &&
    data.currentTranslate < data.startTranslate
  ) {
    data.currentTranslate = data.startTranslate;
  }
  if (
    !swiper.allowSlidePrev &&
    swiper.swipeDirection === "prev" &&
    data.currentTranslate > data.startTranslate
  ) {
    data.currentTranslate = data.startTranslate;
  }
  if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {
    data.currentTranslate = data.startTranslate;
  }

  // Threshold
  if (params.threshold > 0) {
    if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {
      if (!data.allowThresholdMove) {
        data.allowThresholdMove = true;
        touches.startX = touches.currentX;
        touches.startY = touches.currentY;
        data.currentTranslate = data.startTranslate;
        touches.diff = swiper.isHorizontal()
          ? touches.currentX - touches.startX
          : touches.currentY - touches.startY;
        return;
      }
    } else {
      data.currentTranslate = data.startTranslate;
      return;
    }
  }
  if (!params.followFinger || params.cssMode) return;

  // Update active index in free mode
  if (
    (params.freeMode && params.freeMode.enabled && swiper.freeMode) ||
    params.watchSlidesProgress
  ) {
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();
  }
  if (params.freeMode && params.freeMode.enabled && swiper.freeMode) {
    swiper.freeMode.onTouchMove();
  }
  // Update progress
  swiper.updateProgress(data.currentTranslate);
  // Update translate
  swiper.setTranslate(data.currentTranslate);
}

function onTouchEnd(event) {
  const swiper = this;
  const data = swiper.touchEventsData;
  const pointerIndex = data.evCache.findIndex(
    (cachedEv) => cachedEv.pointerId === event.pointerId
  );
  if (pointerIndex >= 0) {
    data.evCache.splice(pointerIndex, 1);
  }
  if (
    ["pointercancel", "pointerout", "pointerleave", "contextmenu"].includes(
      event.type
    )
  ) {
    const proceed =
      ["pointercancel", "contextmenu"].includes(event.type) &&
      (swiper.browser.isSafari || swiper.browser.isWebView);
    if (!proceed) {
      return;
    }
  }
  const { params, touches, rtlTranslate: rtl, slidesGrid, enabled } = swiper;
  if (!enabled) return;
  if (!params.simulateTouch && event.pointerType === "mouse") return;
  let e = event;
  if (e.originalEvent) e = e.originalEvent;
  if (data.allowTouchCallbacks) {
    swiper.emit("touchEnd", e);
  }
  data.allowTouchCallbacks = false;
  if (!data.isTouched) {
    if (data.isMoved && params.grabCursor) {
      swiper.setGrabCursor(false);
    }
    data.isMoved = false;
    data.startMoving = false;
    return;
  }
  // Return Grab Cursor
  if (
    params.grabCursor &&
    data.isMoved &&
    data.isTouched &&
    (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)
  ) {
    swiper.setGrabCursor(false);
  }

  // Time diff
  const touchEndTime = now$2();
  const timeDiff = touchEndTime - data.touchStartTime;

  // Tap, doubleTap, Click
  if (swiper.allowClick) {
    const pathTree = e.path || (e.composedPath && e.composedPath());
    swiper.updateClickedSlide((pathTree && pathTree[0]) || e.target, pathTree);
    swiper.emit("tap click", e);
    if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {
      swiper.emit("doubleTap doubleClick", e);
    }
  }
  data.lastClickTime = now$2();
  nextTick(() => {
    if (!swiper.destroyed) swiper.allowClick = true;
  });
  if (
    !data.isTouched ||
    !data.isMoved ||
    !swiper.swipeDirection ||
    touches.diff === 0 ||
    data.currentTranslate === data.startTranslate
  ) {
    data.isTouched = false;
    data.isMoved = false;
    data.startMoving = false;
    return;
  }
  data.isTouched = false;
  data.isMoved = false;
  data.startMoving = false;
  let currentPos;
  if (params.followFinger) {
    currentPos = rtl ? swiper.translate : -swiper.translate;
  } else {
    currentPos = -data.currentTranslate;
  }
  if (params.cssMode) {
    return;
  }
  if (params.freeMode && params.freeMode.enabled) {
    swiper.freeMode.onTouchEnd({
      currentPos,
    });
    return;
  }

  // Find current slide
  let stopIndex = 0;
  let groupSize = swiper.slidesSizesGrid[0];
  for (
    let i = 0;
    i < slidesGrid.length;
    i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup
  ) {
    const increment =
      i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;
    if (typeof slidesGrid[i + increment] !== "undefined") {
      if (
        currentPos >= slidesGrid[i] &&
        currentPos < slidesGrid[i + increment]
      ) {
        stopIndex = i;
        groupSize = slidesGrid[i + increment] - slidesGrid[i];
      }
    } else if (currentPos >= slidesGrid[i]) {
      stopIndex = i;
      groupSize =
        slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];
    }
  }
  let rewindFirstIndex = null;
  let rewindLastIndex = null;
  if (params.rewind) {
    if (swiper.isBeginning) {
      rewindLastIndex =
        params.virtual && params.virtual.enabled && swiper.virtual
          ? swiper.virtual.slides.length - 1
          : swiper.slides.length - 1;
    } else if (swiper.isEnd) {
      rewindFirstIndex = 0;
    }
  }
  // Find current slide size
  const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;
  const increment =
    stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;
  if (timeDiff > params.longSwipesMs) {
    // Long touches
    if (!params.longSwipes) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }
    if (swiper.swipeDirection === "next") {
      if (ratio >= params.longSwipesRatio)
        swiper.slideTo(
          params.rewind && swiper.isEnd
            ? rewindFirstIndex
            : stopIndex + increment
        );
      else swiper.slideTo(stopIndex);
    }
    if (swiper.swipeDirection === "prev") {
      if (ratio > 1 - params.longSwipesRatio) {
        swiper.slideTo(stopIndex + increment);
      } else if (
        rewindLastIndex !== null &&
        ratio < 0 &&
        Math.abs(ratio) > params.longSwipesRatio
      ) {
        swiper.slideTo(rewindLastIndex);
      } else {
        swiper.slideTo(stopIndex);
      }
    }
  } else {
    // Short swipes
    if (!params.shortSwipes) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }
    const isNavButtonTarget =
      swiper.navigation &&
      (e.target === swiper.navigation.nextEl ||
        e.target === swiper.navigation.prevEl);
    if (!isNavButtonTarget) {
      if (swiper.swipeDirection === "next") {
        swiper.slideTo(
          rewindFirstIndex !== null ? rewindFirstIndex : stopIndex + increment
        );
      }
      if (swiper.swipeDirection === "prev") {
        swiper.slideTo(rewindLastIndex !== null ? rewindLastIndex : stopIndex);
      }
    } else if (e.target === swiper.navigation.nextEl) {
      swiper.slideTo(stopIndex + increment);
    } else {
      swiper.slideTo(stopIndex);
    }
  }
}

function onResize() {
  const swiper = this;
  const { params, el } = swiper;
  if (el && el.offsetWidth === 0) return;

  // Breakpoints
  if (params.breakpoints) {
    swiper.setBreakpoint();
  }

  // Save locks
  const { allowSlideNext, allowSlidePrev, snapGrid } = swiper;
  const isVirtual = swiper.virtual && swiper.params.virtual.enabled;

  // Disable locks on resize
  swiper.allowSlideNext = true;
  swiper.allowSlidePrev = true;
  swiper.updateSize();
  swiper.updateSlides();
  swiper.updateSlidesClasses();
  const isVirtualLoop = isVirtual && params.loop;
  if (
    (params.slidesPerView === "auto" || params.slidesPerView > 1) &&
    swiper.isEnd &&
    !swiper.isBeginning &&
    !swiper.params.centeredSlides &&
    !isVirtualLoop
  ) {
    swiper.slideTo(swiper.slides.length - 1, 0, false, true);
  } else {
    if (swiper.params.loop && !isVirtual) {
      swiper.slideToLoop(swiper.realIndex, 0, false, true);
    } else {
      swiper.slideTo(swiper.activeIndex, 0, false, true);
    }
  }
  if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {
    clearTimeout(swiper.autoplay.resizeTimeout);
    swiper.autoplay.resizeTimeout = setTimeout(() => {
      if (
        swiper.autoplay &&
        swiper.autoplay.running &&
        swiper.autoplay.paused
      ) {
        swiper.autoplay.resume();
      }
    }, 500);
  }
  // Return locks after resize
  swiper.allowSlidePrev = allowSlidePrev;
  swiper.allowSlideNext = allowSlideNext;
  if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {
    swiper.checkOverflow();
  }
}

function onClick(e) {
  const swiper = this;
  if (!swiper.enabled) return;
  if (!swiper.allowClick) {
    if (swiper.params.preventClicks) e.preventDefault();
    if (swiper.params.preventClicksPropagation && swiper.animating) {
      e.stopPropagation();
      e.stopImmediatePropagation();
    }
  }
}

function onScroll() {
  const swiper = this;
  const { wrapperEl, rtlTranslate, enabled } = swiper;
  if (!enabled) return;
  swiper.previousTranslate = swiper.translate;
  if (swiper.isHorizontal()) {
    swiper.translate = -wrapperEl.scrollLeft;
  } else {
    swiper.translate = -wrapperEl.scrollTop;
  }
  // eslint-disable-next-line
  if (swiper.translate === 0) swiper.translate = 0;
  swiper.updateActiveIndex();
  swiper.updateSlidesClasses();
  let newProgress;
  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
  if (translatesDiff === 0) {
    newProgress = 0;
  } else {
    newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;
  }
  if (newProgress !== swiper.progress) {
    swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);
  }
  swiper.emit("setTranslate", swiper.translate, false);
}

function onLoad(e) {
  const swiper = this;
  processLazyPreloader(swiper, e.target);
  if (
    swiper.params.cssMode ||
    (swiper.params.slidesPerView !== "auto" && !swiper.params.autoHeight)
  ) {
    return;
  }
  swiper.update();
}

let dummyEventAttached = false;
function dummyEventListener() {}
const events = (swiper, method) => {
  const document = getDocument();
  const { params, el, wrapperEl, device } = swiper;
  const capture = !!params.nested;
  const domMethod =
    method === "on" ? "addEventListener" : "removeEventListener";
  const swiperMethod = method;

  // Touch Events
  el[domMethod]("pointerdown", swiper.onTouchStart, {
    passive: false,
  });
  document[domMethod]("pointermove", swiper.onTouchMove, {
    passive: false,
    capture,
  });
  document[domMethod]("pointerup", swiper.onTouchEnd, {
    passive: true,
  });
  document[domMethod]("pointercancel", swiper.onTouchEnd, {
    passive: true,
  });
  document[domMethod]("pointerout", swiper.onTouchEnd, {
    passive: true,
  });
  document[domMethod]("pointerleave", swiper.onTouchEnd, {
    passive: true,
  });
  document[domMethod]("contextmenu", swiper.onTouchEnd, {
    passive: true,
  });

  // Prevent Links Clicks
  if (params.preventClicks || params.preventClicksPropagation) {
    el[domMethod]("click", swiper.onClick, true);
  }
  if (params.cssMode) {
    wrapperEl[domMethod]("scroll", swiper.onScroll);
  }

  // Resize handler
  if (params.updateOnWindowResize) {
    swiper[swiperMethod](
      device.ios || device.android
        ? "resize orientationchange observerUpdate"
        : "resize observerUpdate",
      onResize,
      true
    );
  } else {
    swiper[swiperMethod]("observerUpdate", onResize, true);
  }

  // Images loader
  el[domMethod]("load", swiper.onLoad, {
    capture: true,
  });
};
function attachEvents() {
  const swiper = this;
  const document = getDocument();
  const { params } = swiper;
  swiper.onTouchStart = onTouchStart.bind(swiper);
  swiper.onTouchMove = onTouchMove.bind(swiper);
  swiper.onTouchEnd = onTouchEnd.bind(swiper);
  if (params.cssMode) {
    swiper.onScroll = onScroll.bind(swiper);
  }
  swiper.onClick = onClick.bind(swiper);
  swiper.onLoad = onLoad.bind(swiper);
  if (!dummyEventAttached) {
    document.addEventListener("touchstart", dummyEventListener);
    dummyEventAttached = true;
  }
  events(swiper, "on");
}
function detachEvents() {
  const swiper = this;
  events(swiper, "off");
}
var events$1 = {
  attachEvents,
  detachEvents,
};

const isGridEnabled = (swiper, params) => {
  return swiper.grid && params.grid && params.grid.rows > 1;
};
function setBreakpoint() {
  const swiper = this;
  const { realIndex, initialized, params, el } = swiper;
  const breakpoints = params.breakpoints;
  if (!breakpoints || (breakpoints && Object.keys(breakpoints).length === 0))
    return;

  // Get breakpoint for window width and update parameters
  const breakpoint = swiper.getBreakpoint(
    breakpoints,
    swiper.params.breakpointsBase,
    swiper.el
  );
  if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;
  const breakpointOnlyParams =
    breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;
  const breakpointParams = breakpointOnlyParams || swiper.originalParams;
  const wasMultiRow = isGridEnabled(swiper, params);
  const isMultiRow = isGridEnabled(swiper, breakpointParams);
  const wasEnabled = params.enabled;
  if (wasMultiRow && !isMultiRow) {
    el.classList.remove(
      `${params.containerModifierClass}grid`,
      `${params.containerModifierClass}grid-column`
    );
    swiper.emitContainerClasses();
  } else if (!wasMultiRow && isMultiRow) {
    el.classList.add(`${params.containerModifierClass}grid`);
    if (
      (breakpointParams.grid.fill && breakpointParams.grid.fill === "column") ||
      (!breakpointParams.grid.fill && params.grid.fill === "column")
    ) {
      el.classList.add(`${params.containerModifierClass}grid-column`);
    }
    swiper.emitContainerClasses();
  }

  // Toggle navigation, pagination, scrollbar
  ["navigation", "pagination", "scrollbar"].forEach((prop) => {
    if (typeof breakpointParams[prop] === "undefined") return;
    const wasModuleEnabled = params[prop] && params[prop].enabled;
    const isModuleEnabled =
      breakpointParams[prop] && breakpointParams[prop].enabled;
    if (wasModuleEnabled && !isModuleEnabled) {
      swiper[prop].disable();
    }
    if (!wasModuleEnabled && isModuleEnabled) {
      swiper[prop].enable();
    }
  });
  const directionChanged =
    breakpointParams.direction &&
    breakpointParams.direction !== params.direction;
  const needsReLoop =
    params.loop &&
    (breakpointParams.slidesPerView !== params.slidesPerView ||
      directionChanged);
  const wasLoop = params.loop;
  if (directionChanged && initialized) {
    swiper.changeDirection();
  }
  extend(swiper.params, breakpointParams);
  const isEnabled = swiper.params.enabled;
  const hasLoop = swiper.params.loop;
  Object.assign(swiper, {
    allowTouchMove: swiper.params.allowTouchMove,
    allowSlideNext: swiper.params.allowSlideNext,
    allowSlidePrev: swiper.params.allowSlidePrev,
  });
  if (wasEnabled && !isEnabled) {
    swiper.disable();
  } else if (!wasEnabled && isEnabled) {
    swiper.enable();
  }
  swiper.currentBreakpoint = breakpoint;
  swiper.emit("_beforeBreakpoint", breakpointParams);
  if (initialized) {
    if (needsReLoop) {
      swiper.loopDestroy();
      swiper.loopCreate(realIndex);
      swiper.updateSlides();
    } else if (!wasLoop && hasLoop) {
      swiper.loopCreate(realIndex);
      swiper.updateSlides();
    } else if (wasLoop && !hasLoop) {
      swiper.loopDestroy();
    }
  }
  swiper.emit("breakpoint", breakpointParams);
}

function getBreakpoint(breakpoints, base, containerEl) {
  if (base === void 0) {
    base = "window";
  }
  if (!breakpoints || (base === "container" && !containerEl)) return undefined;
  let breakpoint = false;
  const window = getWindow();
  const currentHeight =
    base === "window" ? window.innerHeight : containerEl.clientHeight;
  const points = Object.keys(breakpoints).map((point) => {
    if (typeof point === "string" && point.indexOf("@") === 0) {
      const minRatio = parseFloat(point.substr(1));
      const value = currentHeight * minRatio;
      return {
        value,
        point,
      };
    }
    return {
      value: point,
      point,
    };
  });
  points.sort((a, b) => parseInt(a.value, 10) - parseInt(b.value, 10));
  for (let i = 0; i < points.length; i += 1) {
    const { point, value } = points[i];
    if (base === "window") {
      if (window.matchMedia(`(min-width: ${value}px)`).matches) {
        breakpoint = point;
      }
    } else if (value <= containerEl.clientWidth) {
      breakpoint = point;
    }
  }
  return breakpoint || "max";
}

var breakpoints = {
  setBreakpoint,
  getBreakpoint,
};

function prepareClasses(entries, prefix) {
  const resultClasses = [];
  entries.forEach((item) => {
    if (typeof item === "object") {
      Object.keys(item).forEach((classNames) => {
        if (item[classNames]) {
          resultClasses.push(prefix + classNames);
        }
      });
    } else if (typeof item === "string") {
      resultClasses.push(prefix + item);
    }
  });
  return resultClasses;
}
function addClasses$3() {
  const swiper = this;
  const { classNames, params, rtl, el, device } = swiper;
  // prettier-ignore
  const suffixes = prepareClasses(['initialized', params.direction, {
    'free-mode': swiper.params.freeMode && params.freeMode.enabled
  }, {
    'autoheight': params.autoHeight
  }, {
    'rtl': rtl
  }, {
    'grid': params.grid && params.grid.rows > 1
  }, {
    'grid-column': params.grid && params.grid.rows > 1 && params.grid.fill === 'column'
  }, {
    'android': device.android
  }, {
    'ios': device.ios
  }, {
    'css-mode': params.cssMode
  }, {
    'centered': params.cssMode && params.centeredSlides
  }, {
    'watch-progress': params.watchSlidesProgress
  }], params.containerModifierClass);
  classNames.push(...suffixes);
  el.classList.add(...classNames);
  swiper.emitContainerClasses();
}

function removeClasses$2() {
  const swiper = this;
  const { el, classNames } = swiper;
  el.classList.remove(...classNames);
  swiper.emitContainerClasses();
}

var classes = {
  addClasses: addClasses$3,
  removeClasses: removeClasses$2,
};

function checkOverflow() {
  const swiper = this;
  const { isLocked: wasLocked, params } = swiper;
  const { slidesOffsetBefore } = params;
  if (slidesOffsetBefore) {
    const lastSlideIndex = swiper.slides.length - 1;
    const lastSlideRightEdge =
      swiper.slidesGrid[lastSlideIndex] +
      swiper.slidesSizesGrid[lastSlideIndex] +
      slidesOffsetBefore * 2;
    swiper.isLocked = swiper.size > lastSlideRightEdge;
  } else {
    swiper.isLocked = swiper.snapGrid.length === 1;
  }
  if (params.allowSlideNext === true) {
    swiper.allowSlideNext = !swiper.isLocked;
  }
  if (params.allowSlidePrev === true) {
    swiper.allowSlidePrev = !swiper.isLocked;
  }
  if (wasLocked && wasLocked !== swiper.isLocked) {
    swiper.isEnd = false;
  }
  if (wasLocked !== swiper.isLocked) {
    swiper.emit(swiper.isLocked ? "lock" : "unlock");
  }
}
var checkOverflow$1 = {
  checkOverflow,
};

var defaults$1 = {
  init: true,
  direction: "horizontal",
  oneWayMovement: false,
  touchEventsTarget: "wrapper",
  initialSlide: 0,
  speed: 300,
  cssMode: false,
  updateOnWindowResize: true,
  resizeObserver: true,
  nested: false,
  createElements: false,
  enabled: true,
  focusableElements: "input, select, option, textarea, button, video, label",
  // Overrides
  width: null,
  height: null,
  //
  preventInteractionOnTransition: false,
  // ssr
  userAgent: null,
  url: null,
  // To support iOS's swipe-to-go-back gesture (when being used in-app).
  edgeSwipeDetection: false,
  edgeSwipeThreshold: 20,
  // Autoheight
  autoHeight: false,
  // Set wrapper width
  setWrapperSize: false,
  // Virtual Translate
  virtualTranslate: false,
  // Effects
  effect: "slide",
  // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'

  // Breakpoints
  breakpoints: undefined,
  breakpointsBase: "window",
  // Slides grid
  spaceBetween: 0,
  slidesPerView: 1,
  slidesPerGroup: 1,
  slidesPerGroupSkip: 0,
  slidesPerGroupAuto: false,
  centeredSlides: false,
  centeredSlidesBounds: false,
  slidesOffsetBefore: 0,
  // in px
  slidesOffsetAfter: 0,
  // in px
  normalizeSlideIndex: true,
  centerInsufficientSlides: false,
  // Disable swiper and hide navigation when container not overflow
  watchOverflow: true,
  // Round length
  roundLengths: false,
  // Touches
  touchRatio: 1,
  touchAngle: 45,
  simulateTouch: true,
  shortSwipes: true,
  longSwipes: true,
  longSwipesRatio: 0.5,
  longSwipesMs: 300,
  followFinger: true,
  allowTouchMove: true,
  threshold: 5,
  touchMoveStopPropagation: false,
  touchStartPreventDefault: true,
  touchStartForcePreventDefault: false,
  touchReleaseOnEdges: false,
  // Unique Navigation Elements
  uniqueNavElements: true,
  // Resistance
  resistance: true,
  resistanceRatio: 0.85,
  // Progress
  watchSlidesProgress: false,
  // Cursor
  grabCursor: false,
  // Clicks
  preventClicks: true,
  preventClicksPropagation: true,
  slideToClickedSlide: false,
  // loop
  loop: false,
  loopedSlides: null,
  loopPreventsSliding: true,
  // rewind
  rewind: false,
  // Swiping/no swiping
  allowSlidePrev: true,
  allowSlideNext: true,
  swipeHandler: null,
  // '.swipe-handler',
  noSwiping: true,
  noSwipingClass: "swiper-no-swiping",
  noSwipingSelector: null,
  // Passive Listeners
  passiveListeners: true,
  maxBackfaceHiddenSlides: 10,
  // NS
  containerModifierClass: "swiper-",
  // NEW
  slideClass: "swiper-slide",
  slideActiveClass: "swiper-slide-active",
  slideVisibleClass: "swiper-slide-visible",
  slideNextClass: "swiper-slide-next",
  slidePrevClass: "swiper-slide-prev",
  wrapperClass: "swiper-wrapper",
  lazyPreloaderClass: "swiper-lazy-preloader",
  lazyPreloadPrevNext: 0,
  // Callbacks
  runCallbacksOnInit: true,
  // Internals
  _emitClasses: false,
};

function moduleExtendParams(params, allModulesParams) {
  return function extendParams(obj) {
    if (obj === void 0) {
      obj = {};
    }
    const moduleParamName = Object.keys(obj)[0];
    const moduleParams = obj[moduleParamName];
    if (typeof moduleParams !== "object" || moduleParams === null) {
      extend(allModulesParams, obj);
      return;
    }
    if (params[moduleParamName] === true) {
      params[moduleParamName] = {
        enabled: true,
      };
    }
    if (
      moduleParamName === "navigation" &&
      params[moduleParamName] &&
      params[moduleParamName].enabled &&
      !params[moduleParamName].prevEl &&
      !params[moduleParamName].nextEl
    ) {
      params[moduleParamName].auto = true;
    }
    if (
      ["pagination", "scrollbar"].indexOf(moduleParamName) >= 0 &&
      params[moduleParamName] &&
      params[moduleParamName].enabled &&
      !params[moduleParamName].el
    ) {
      params[moduleParamName].auto = true;
    }
    if (!(moduleParamName in params && "enabled" in moduleParams)) {
      extend(allModulesParams, obj);
      return;
    }
    if (
      typeof params[moduleParamName] === "object" &&
      !("enabled" in params[moduleParamName])
    ) {
      params[moduleParamName].enabled = true;
    }
    if (!params[moduleParamName])
      params[moduleParamName] = {
        enabled: false,
      };
    extend(allModulesParams, obj);
  };
}

/* eslint no-param-reassign: "off" */
const prototypes = {
  eventsEmitter,
  update,
  translate,
  transition,
  slide,
  loop,
  grabCursor,
  events: events$1,
  breakpoints,
  checkOverflow: checkOverflow$1,
  classes,
};
const extendedDefaults = {};
class Swiper {
  constructor() {
    let el;
    let params;
    for (
      var _len = arguments.length, args = new Array(_len), _key = 0;
      _key < _len;
      _key++
    ) {
      args[_key] = arguments[_key];
    }
    if (
      args.length === 1 &&
      args[0].constructor &&
      Object.prototype.toString.call(args[0]).slice(8, -1) === "Object"
    ) {
      params = args[0];
    } else {
      [el, params] = args;
    }
    if (!params) params = {};
    params = extend({}, params);
    if (el && !params.el) params.el = el;
    const document = getDocument();
    if (
      params.el &&
      typeof params.el === "string" &&
      document.querySelectorAll(params.el).length > 1
    ) {
      const swipers = [];
      document.querySelectorAll(params.el).forEach((containerEl) => {
        const newParams = extend({}, params, {
          el: containerEl,
        });
        swipers.push(new Swiper(newParams));
      });
      // eslint-disable-next-line no-constructor-return
      return swipers;
    }

    // Swiper Instance
    const swiper = this;
    swiper.__swiper__ = true;
    swiper.support = getSupport();
    swiper.device = getDevice({
      userAgent: params.userAgent,
    });
    swiper.browser = getBrowser();
    swiper.eventsListeners = {};
    swiper.eventsAnyListeners = [];
    swiper.modules = [...swiper.__modules__];
    if (params.modules && Array.isArray(params.modules)) {
      swiper.modules.push(...params.modules);
    }
    const allModulesParams = {};
    swiper.modules.forEach((mod) => {
      mod({
        params,
        swiper,
        extendParams: moduleExtendParams(params, allModulesParams),
        on: swiper.on.bind(swiper),
        once: swiper.once.bind(swiper),
        off: swiper.off.bind(swiper),
        emit: swiper.emit.bind(swiper),
      });
    });

    // Extend defaults with modules params
    const swiperParams = extend({}, defaults$1, allModulesParams);

    // Extend defaults with passed params
    swiper.params = extend({}, swiperParams, extendedDefaults, params);
    swiper.originalParams = extend({}, swiper.params);
    swiper.passedParams = extend({}, params);

    // add event listeners
    if (swiper.params && swiper.params.on) {
      Object.keys(swiper.params.on).forEach((eventName) => {
        swiper.on(eventName, swiper.params.on[eventName]);
      });
    }
    if (swiper.params && swiper.params.onAny) {
      swiper.onAny(swiper.params.onAny);
    }

    // Extend Swiper
    Object.assign(swiper, {
      enabled: swiper.params.enabled,
      el,
      // Classes
      classNames: [],
      // Slides
      slides: [],
      slidesGrid: [],
      snapGrid: [],
      slidesSizesGrid: [],
      // isDirection
      isHorizontal() {
        return swiper.params.direction === "horizontal";
      },
      isVertical() {
        return swiper.params.direction === "vertical";
      },
      // Indexes
      activeIndex: 0,
      realIndex: 0,
      //
      isBeginning: true,
      isEnd: false,
      // Props
      translate: 0,
      previousTranslate: 0,
      progress: 0,
      velocity: 0,
      animating: false,
      cssOverflowAdjustment() {
        // Returns 0 unless `translate` is > 2**23
        // Should be subtracted from css values to prevent overflow
        return Math.trunc(this.translate / 2 ** 23) * 2 ** 23;
      },
      // Locks
      allowSlideNext: swiper.params.allowSlideNext,
      allowSlidePrev: swiper.params.allowSlidePrev,
      // Touch Events
      touchEventsData: {
        isTouched: undefined,
        isMoved: undefined,
        allowTouchCallbacks: undefined,
        touchStartTime: undefined,
        isScrolling: undefined,
        currentTranslate: undefined,
        startTranslate: undefined,
        allowThresholdMove: undefined,
        // Form elements to match
        focusableElements: swiper.params.focusableElements,
        // Last click time
        lastClickTime: 0,
        clickTimeout: undefined,
        // Velocities
        velocities: [],
        allowMomentumBounce: undefined,
        startMoving: undefined,
        evCache: [],
      },
      // Clicks
      allowClick: true,
      // Touches
      allowTouchMove: swiper.params.allowTouchMove,
      touches: {
        startX: 0,
        startY: 0,
        currentX: 0,
        currentY: 0,
        diff: 0,
      },
      // Images
      imagesToLoad: [],
      imagesLoaded: 0,
    });
    swiper.emit("_swiper");

    // Init
    if (swiper.params.init) {
      swiper.init();
    }

    // Return app instance
    // eslint-disable-next-line no-constructor-return
    return swiper;
  }
  getSlideIndex(slideEl) {
    const { slidesEl, params } = this;
    const slides = elementChildren(
      slidesEl,
      `.${params.slideClass}, swiper-slide`
    );
    const firstSlideIndex = elementIndex(slides[0]);
    return elementIndex(slideEl) - firstSlideIndex;
  }
  getSlideIndexByData(index) {
    return this.getSlideIndex(
      this.slides.filter(
        (slideEl) =>
          slideEl.getAttribute("data-swiper-slide-index") * 1 === index
      )[0]
    );
  }
  recalcSlides() {
    const swiper = this;
    const { slidesEl, params } = swiper;
    swiper.slides = elementChildren(
      slidesEl,
      `.${params.slideClass}, swiper-slide`
    );
  }
  enable() {
    const swiper = this;
    if (swiper.enabled) return;
    swiper.enabled = true;
    if (swiper.params.grabCursor) {
      swiper.setGrabCursor();
    }
    swiper.emit("enable");
  }
  disable() {
    const swiper = this;
    if (!swiper.enabled) return;
    swiper.enabled = false;
    if (swiper.params.grabCursor) {
      swiper.unsetGrabCursor();
    }
    swiper.emit("disable");
  }
  setProgress(progress, speed) {
    const swiper = this;
    progress = Math.min(Math.max(progress, 0), 1);
    const min = swiper.minTranslate();
    const max = swiper.maxTranslate();
    const current = (max - min) * progress + min;
    swiper.translateTo(current, typeof speed === "undefined" ? 0 : speed);
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();
  }
  emitContainerClasses() {
    const swiper = this;
    if (!swiper.params._emitClasses || !swiper.el) return;
    const cls = swiper.el.className.split(" ").filter((className) => {
      return (
        className.indexOf("swiper") === 0 ||
        className.indexOf(swiper.params.containerModifierClass) === 0
      );
    });
    swiper.emit("_containerClasses", cls.join(" "));
  }
  getSlideClasses(slideEl) {
    const swiper = this;
    if (swiper.destroyed) return "";
    return slideEl.className
      .split(" ")
      .filter((className) => {
        return (
          className.indexOf("swiper-slide") === 0 ||
          className.indexOf(swiper.params.slideClass) === 0
        );
      })
      .join(" ");
  }
  emitSlidesClasses() {
    const swiper = this;
    if (!swiper.params._emitClasses || !swiper.el) return;
    const updates = [];
    swiper.slides.forEach((slideEl) => {
      const classNames = swiper.getSlideClasses(slideEl);
      updates.push({
        slideEl,
        classNames,
      });
      swiper.emit("_slideClass", slideEl, classNames);
    });
    swiper.emit("_slideClasses", updates);
  }
  slidesPerViewDynamic(view, exact) {
    if (view === void 0) {
      view = "current";
    }
    if (exact === void 0) {
      exact = false;
    }
    const swiper = this;
    const {
      params,
      slides,
      slidesGrid,
      slidesSizesGrid,
      size: swiperSize,
      activeIndex,
    } = swiper;
    let spv = 1;
    if (typeof params.slidesPerView === "number") return params.slidesPerView;
    if (params.centeredSlides) {
      let slideSize = slides[activeIndex]
        ? slides[activeIndex].swiperSlideSize
        : 0;
      let breakLoop;
      for (let i = activeIndex + 1; i < slides.length; i += 1) {
        if (slides[i] && !breakLoop) {
          slideSize += slides[i].swiperSlideSize;
          spv += 1;
          if (slideSize > swiperSize) breakLoop = true;
        }
      }
      for (let i = activeIndex - 1; i >= 0; i -= 1) {
        if (slides[i] && !breakLoop) {
          slideSize += slides[i].swiperSlideSize;
          spv += 1;
          if (slideSize > swiperSize) breakLoop = true;
        }
      }
    } else {
      // eslint-disable-next-line
      if (view === "current") {
        for (let i = activeIndex + 1; i < slides.length; i += 1) {
          const slideInView = exact
            ? slidesGrid[i] + slidesSizesGrid[i] - slidesGrid[activeIndex] <
              swiperSize
            : slidesGrid[i] - slidesGrid[activeIndex] < swiperSize;
          if (slideInView) {
            spv += 1;
          }
        }
      } else {
        // previous
        for (let i = activeIndex - 1; i >= 0; i -= 1) {
          const slideInView =
            slidesGrid[activeIndex] - slidesGrid[i] < swiperSize;
          if (slideInView) {
            spv += 1;
          }
        }
      }
    }
    return spv;
  }
  update() {
    const swiper = this;
    if (!swiper || swiper.destroyed) return;
    const { snapGrid, params } = swiper;
    // Breakpoints
    if (params.breakpoints) {
      swiper.setBreakpoint();
    }
    [...swiper.el.querySelectorAll('[loading="lazy"]')].forEach((imageEl) => {
      if (imageEl.complete) {
        processLazyPreloader(swiper, imageEl);
      }
    });
    swiper.updateSize();
    swiper.updateSlides();
    swiper.updateProgress();
    swiper.updateSlidesClasses();
    function setTranslate() {
      const translateValue = swiper.rtlTranslate
        ? swiper.translate * -1
        : swiper.translate;
      const newTranslate = Math.min(
        Math.max(translateValue, swiper.maxTranslate()),
        swiper.minTranslate()
      );
      swiper.setTranslate(newTranslate);
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    }
    let translated;
    if (params.freeMode && params.freeMode.enabled && !params.cssMode) {
      setTranslate();
      if (params.autoHeight) {
        swiper.updateAutoHeight();
      }
    } else {
      if (
        (params.slidesPerView === "auto" || params.slidesPerView > 1) &&
        swiper.isEnd &&
        !params.centeredSlides
      ) {
        const slides =
          swiper.virtual && params.virtual.enabled
            ? swiper.virtual.slides
            : swiper.slides;
        translated = swiper.slideTo(slides.length - 1, 0, false, true);
      } else {
        translated = swiper.slideTo(swiper.activeIndex, 0, false, true);
      }
      if (!translated) {
        setTranslate();
      }
    }
    if (params.watchOverflow && snapGrid !== swiper.snapGrid) {
      swiper.checkOverflow();
    }
    swiper.emit("update");
  }
  changeDirection(newDirection, needUpdate) {
    if (needUpdate === void 0) {
      needUpdate = true;
    }
    const swiper = this;
    const currentDirection = swiper.params.direction;
    if (!newDirection) {
      // eslint-disable-next-line
      newDirection =
        currentDirection === "horizontal" ? "vertical" : "horizontal";
    }
    if (
      newDirection === currentDirection ||
      (newDirection !== "horizontal" && newDirection !== "vertical")
    ) {
      return swiper;
    }
    swiper.el.classList.remove(
      `${swiper.params.containerModifierClass}${currentDirection}`
    );
    swiper.el.classList.add(
      `${swiper.params.containerModifierClass}${newDirection}`
    );
    swiper.emitContainerClasses();
    swiper.params.direction = newDirection;
    swiper.slides.forEach((slideEl) => {
      if (newDirection === "vertical") {
        slideEl.style.width = "";
      } else {
        slideEl.style.height = "";
      }
    });
    swiper.emit("changeDirection");
    if (needUpdate) swiper.update();
    return swiper;
  }
  changeLanguageDirection(direction) {
    const swiper = this;
    if (
      (swiper.rtl && direction === "rtl") ||
      (!swiper.rtl && direction === "ltr")
    )
      return;
    swiper.rtl = direction === "rtl";
    swiper.rtlTranslate =
      swiper.params.direction === "horizontal" && swiper.rtl;
    if (swiper.rtl) {
      swiper.el.classList.add(`${swiper.params.containerModifierClass}rtl`);
      swiper.el.dir = "rtl";
    } else {
      swiper.el.classList.remove(`${swiper.params.containerModifierClass}rtl`);
      swiper.el.dir = "ltr";
    }
    swiper.update();
  }
  mount(element) {
    const swiper = this;
    if (swiper.mounted) return true;

    // Find el
    let el = element || swiper.params.el;
    if (typeof el === "string") {
      el = document.querySelector(el);
    }
    if (!el) {
      return false;
    }
    el.swiper = swiper;
    if (
      el.parentNode &&
      el.parentNode.host &&
      el.parentNode.host.nodeName === "SWIPER-CONTAINER"
    ) {
      swiper.isElement = true;
    }
    const getWrapperSelector = () => {
      return `.${(swiper.params.wrapperClass || "")
        .trim()
        .split(" ")
        .join(".")}`;
    };
    const getWrapper = () => {
      if (el && el.shadowRoot && el.shadowRoot.querySelector) {
        const res = el.shadowRoot.querySelector(getWrapperSelector());
        // Children needs to return slot items
        return res;
      }
      return elementChildren(el, getWrapperSelector())[0];
    };
    // Find Wrapper
    let wrapperEl = getWrapper();
    if (!wrapperEl && swiper.params.createElements) {
      wrapperEl = createElement("div", swiper.params.wrapperClass);
      el.append(wrapperEl);
      elementChildren(el, `.${swiper.params.slideClass}`).forEach((slideEl) => {
        wrapperEl.append(slideEl);
      });
    }
    Object.assign(swiper, {
      el,
      wrapperEl,
      slidesEl:
        swiper.isElement && !el.parentNode.host.slideSlots
          ? el.parentNode.host
          : wrapperEl,
      hostEl: swiper.isElement ? el.parentNode.host : el,
      mounted: true,
      // RTL
      rtl:
        el.dir.toLowerCase() === "rtl" ||
        elementStyle(el, "direction") === "rtl",
      rtlTranslate:
        swiper.params.direction === "horizontal" &&
        (el.dir.toLowerCase() === "rtl" ||
          elementStyle(el, "direction") === "rtl"),
      wrongRTL: elementStyle(wrapperEl, "display") === "-webkit-box",
    });
    return true;
  }
  init(el) {
    const swiper = this;
    if (swiper.initialized) return swiper;
    const mounted = swiper.mount(el);
    if (mounted === false) return swiper;
    swiper.emit("beforeInit");

    // Set breakpoint
    if (swiper.params.breakpoints) {
      swiper.setBreakpoint();
    }

    // Add Classes
    swiper.addClasses();

    // Update size
    swiper.updateSize();

    // Update slides
    swiper.updateSlides();
    if (swiper.params.watchOverflow) {
      swiper.checkOverflow();
    }

    // Set Grab Cursor
    if (swiper.params.grabCursor && swiper.enabled) {
      swiper.setGrabCursor();
    }

    // Slide To Initial Slide
    if (swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled) {
      swiper.slideTo(
        swiper.params.initialSlide + swiper.virtual.slidesBefore,
        0,
        swiper.params.runCallbacksOnInit,
        false,
        true
      );
    } else {
      swiper.slideTo(
        swiper.params.initialSlide,
        0,
        swiper.params.runCallbacksOnInit,
        false,
        true
      );
    }

    // Create loop
    if (swiper.params.loop) {
      swiper.loopCreate();
    }

    // Attach events
    swiper.attachEvents();
    const lazyElements = [...swiper.el.querySelectorAll('[loading="lazy"]')];
    if (swiper.isElement) {
      lazyElements.push(...swiper.hostEl.querySelectorAll('[loading="lazy"]'));
    }
    lazyElements.forEach((imageEl) => {
      if (imageEl.complete) {
        processLazyPreloader(swiper, imageEl);
      } else {
        imageEl.addEventListener("load", (e) => {
          processLazyPreloader(swiper, e.target);
        });
      }
    });
    preload(swiper);

    // Init Flag
    swiper.initialized = true;
    preload(swiper);

    // Emit
    swiper.emit("init");
    swiper.emit("afterInit");
    return swiper;
  }
  destroy(deleteInstance, cleanStyles) {
    if (deleteInstance === void 0) {
      deleteInstance = true;
    }
    if (cleanStyles === void 0) {
      cleanStyles = true;
    }
    const swiper = this;
    const { params, el, wrapperEl, slides } = swiper;
    if (typeof swiper.params === "undefined" || swiper.destroyed) {
      return null;
    }
    swiper.emit("beforeDestroy");

    // Init Flag
    swiper.initialized = false;

    // Detach events
    swiper.detachEvents();

    // Destroy loop
    if (params.loop) {
      swiper.loopDestroy();
    }

    // Cleanup styles
    if (cleanStyles) {
      swiper.removeClasses();
      el.removeAttribute("style");
      wrapperEl.removeAttribute("style");
      if (slides && slides.length) {
        slides.forEach((slideEl) => {
          slideEl.classList.remove(
            params.slideVisibleClass,
            params.slideActiveClass,
            params.slideNextClass,
            params.slidePrevClass
          );
          slideEl.removeAttribute("style");
          slideEl.removeAttribute("data-swiper-slide-index");
        });
      }
    }
    swiper.emit("destroy");

    // Detach emitter events
    Object.keys(swiper.eventsListeners).forEach((eventName) => {
      swiper.off(eventName);
    });
    if (deleteInstance !== false) {
      swiper.el.swiper = null;
      deleteProps(swiper);
    }
    swiper.destroyed = true;
    return null;
  }
  static extendDefaults(newDefaults) {
    extend(extendedDefaults, newDefaults);
  }
  static get extendedDefaults() {
    return extendedDefaults;
  }
  static get defaults() {
    return defaults$1;
  }
  static installModule(mod) {
    if (!Swiper.prototype.__modules__) Swiper.prototype.__modules__ = [];
    const modules = Swiper.prototype.__modules__;
    if (typeof mod === "function" && modules.indexOf(mod) < 0) {
      modules.push(mod);
    }
  }
  static use(module) {
    if (Array.isArray(module)) {
      module.forEach((m) => Swiper.installModule(m));
      return Swiper;
    }
    Swiper.installModule(module);
    return Swiper;
  }
}
Object.keys(prototypes).forEach((prototypeGroup) => {
  Object.keys(prototypes[prototypeGroup]).forEach((protoMethod) => {
    Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];
  });
});
Swiper.use([Resize, Observer$1]);

function createElementIfNotDefined(swiper, originalParams, params, checkProps) {
  if (swiper.params.createElements) {
    Object.keys(checkProps).forEach((key) => {
      if (!params[key] && params.auto === true) {
        let element = elementChildren(swiper.el, `.${checkProps[key]}`)[0];
        if (!element) {
          element = createElement("div", checkProps[key]);
          element.className = checkProps[key];
          swiper.el.append(element);
        }
        params[key] = element;
        originalParams[key] = element;
      }
    });
  }
  return params;
}

function Navigation(_ref) {
  let { swiper, extendParams, on, emit } = _ref;
  extendParams({
    navigation: {
      nextEl: null,
      prevEl: null,
      hideOnClick: false,
      disabledClass: "swiper-button-disabled",
      hiddenClass: "swiper-button-hidden",
      lockClass: "swiper-button-lock",
      navigationDisabledClass: "swiper-navigation-disabled",
    },
  });
  swiper.navigation = {
    nextEl: null,
    prevEl: null,
  };
  const makeElementsArray = (el) =>
    (Array.isArray(el) ? el : [el]).filter((e) => !!e);
  function getEl(el) {
    let res;
    if (el && typeof el === "string" && swiper.isElement) {
      res = swiper.el.querySelector(el);
      if (res) return res;
    }
    if (el) {
      if (typeof el === "string") res = [...document.querySelectorAll(el)];
      if (
        swiper.params.uniqueNavElements &&
        typeof el === "string" &&
        res.length > 1 &&
        swiper.el.querySelectorAll(el).length === 1
      ) {
        res = swiper.el.querySelector(el);
      }
    }
    if (el && !res) return el;
    // if (Array.isArray(res) && res.length === 1) res = res[0];
    return res;
  }
  function toggleEl(el, disabled) {
    const params = swiper.params.navigation;
    el = makeElementsArray(el);
    el.forEach((subEl) => {
      if (subEl) {
        subEl.classList[disabled ? "add" : "remove"](
          ...params.disabledClass.split(" ")
        );
        if (subEl.tagName === "BUTTON") subEl.disabled = disabled;
        if (swiper.params.watchOverflow && swiper.enabled) {
          subEl.classList[swiper.isLocked ? "add" : "remove"](params.lockClass);
        }
      }
    });
  }
  function update() {
    // Update Navigation Buttons
    const { nextEl, prevEl } = swiper.navigation;
    if (swiper.params.loop) {
      toggleEl(prevEl, false);
      toggleEl(nextEl, false);
      return;
    }
    toggleEl(prevEl, swiper.isBeginning && !swiper.params.rewind);
    toggleEl(nextEl, swiper.isEnd && !swiper.params.rewind);
  }
  function onPrevClick(e) {
    e.preventDefault();
    if (swiper.isBeginning && !swiper.params.loop && !swiper.params.rewind)
      return;
    swiper.slidePrev();
    emit("navigationPrev");
  }
  function onNextClick(e) {
    e.preventDefault();
    if (swiper.isEnd && !swiper.params.loop && !swiper.params.rewind) return;
    swiper.slideNext();
    emit("navigationNext");
  }
  function init() {
    const params = swiper.params.navigation;
    swiper.params.navigation = createElementIfNotDefined(
      swiper,
      swiper.originalParams.navigation,
      swiper.params.navigation,
      {
        nextEl: "swiper-button-next",
        prevEl: "swiper-button-prev",
      }
    );
    if (!(params.nextEl || params.prevEl)) return;
    let nextEl = getEl(params.nextEl);
    let prevEl = getEl(params.prevEl);
    Object.assign(swiper.navigation, {
      nextEl,
      prevEl,
    });
    nextEl = makeElementsArray(nextEl);
    prevEl = makeElementsArray(prevEl);
    const initButton = (el, dir) => {
      if (el) {
        el.addEventListener(
          "click",
          dir === "next" ? onNextClick : onPrevClick
        );
      }
      if (!swiper.enabled && el) {
        el.classList.add(...params.lockClass.split(" "));
      }
    };
    nextEl.forEach((el) => initButton(el, "next"));
    prevEl.forEach((el) => initButton(el, "prev"));
  }
  function destroy() {
    let { nextEl, prevEl } = swiper.navigation;
    nextEl = makeElementsArray(nextEl);
    prevEl = makeElementsArray(prevEl);
    const destroyButton = (el, dir) => {
      el.removeEventListener(
        "click",
        dir === "next" ? onNextClick : onPrevClick
      );
      el.classList.remove(...swiper.params.navigation.disabledClass.split(" "));
    };
    nextEl.forEach((el) => destroyButton(el, "next"));
    prevEl.forEach((el) => destroyButton(el, "prev"));
  }
  on("init", () => {
    if (swiper.params.navigation.enabled === false) {
      // eslint-disable-next-line
      disable();
    } else {
      init();
      update();
    }
  });
  on("toEdge fromEdge lock unlock", () => {
    update();
  });
  on("destroy", () => {
    destroy();
  });
  on("enable disable", () => {
    let { nextEl, prevEl } = swiper.navigation;
    nextEl = makeElementsArray(nextEl);
    prevEl = makeElementsArray(prevEl);
    if (swiper.enabled) {
      update();
      return;
    }
    [...nextEl, ...prevEl]
      .filter((el) => !!el)
      .forEach((el) => el.classList.add(swiper.params.navigation.lockClass));
  });
  on("click", (_s, e) => {
    let { nextEl, prevEl } = swiper.navigation;
    nextEl = makeElementsArray(nextEl);
    prevEl = makeElementsArray(prevEl);
    const targetEl = e.target;
    if (
      swiper.params.navigation.hideOnClick &&
      !prevEl.includes(targetEl) &&
      !nextEl.includes(targetEl)
    ) {
      if (
        swiper.pagination &&
        swiper.params.pagination &&
        swiper.params.pagination.clickable &&
        (swiper.pagination.el === targetEl ||
          swiper.pagination.el.contains(targetEl))
      )
        return;
      let isHidden;
      if (nextEl.length) {
        isHidden = nextEl[0].classList.contains(
          swiper.params.navigation.hiddenClass
        );
      } else if (prevEl.length) {
        isHidden = prevEl[0].classList.contains(
          swiper.params.navigation.hiddenClass
        );
      }
      if (isHidden === true) {
        emit("navigationShow");
      } else {
        emit("navigationHide");
      }
      [...nextEl, ...prevEl]
        .filter((el) => !!el)
        .forEach((el) =>
          el.classList.toggle(swiper.params.navigation.hiddenClass)
        );
    }
  });
  const enable = () => {
    swiper.el.classList.remove(
      ...swiper.params.navigation.navigationDisabledClass.split(" ")
    );
    init();
    update();
  };
  const disable = () => {
    swiper.el.classList.add(
      ...swiper.params.navigation.navigationDisabledClass.split(" ")
    );
    destroy();
  };
  Object.assign(swiper.navigation, {
    enable,
    disable,
    update,
    init,
    destroy,
  });
}

function classesToSelector(classes) {
  if (classes === void 0) {
    classes = "";
  }
  return `.${classes
    .trim()
    .replace(/([\.:!+\/])/g, "\\$1") // eslint-disable-line
    .replace(/ /g, ".")}`;
}

function Pagination(_ref) {
  let { swiper, extendParams, on, emit } = _ref;
  const pfx = "swiper-pagination";
  extendParams({
    pagination: {
      el: null,
      bulletElement: "span",
      clickable: false,
      hideOnClick: false,
      renderBullet: null,
      renderProgressbar: null,
      renderFraction: null,
      renderCustom: null,
      progressbarOpposite: false,
      type: "bullets",
      // 'bullets' or 'progressbar' or 'fraction' or 'custom'
      dynamicBullets: false,
      dynamicMainBullets: 1,
      formatFractionCurrent: (number) => number,
      formatFractionTotal: (number) => number,
      bulletClass: `${pfx}-bullet`,
      bulletActiveClass: `${pfx}-bullet-active`,
      modifierClass: `${pfx}-`,
      currentClass: `${pfx}-current`,
      totalClass: `${pfx}-total`,
      hiddenClass: `${pfx}-hidden`,
      progressbarFillClass: `${pfx}-progressbar-fill`,
      progressbarOppositeClass: `${pfx}-progressbar-opposite`,
      clickableClass: `${pfx}-clickable`,
      lockClass: `${pfx}-lock`,
      horizontalClass: `${pfx}-horizontal`,
      verticalClass: `${pfx}-vertical`,
      paginationDisabledClass: `${pfx}-disabled`,
    },
  });
  swiper.pagination = {
    el: null,
    bullets: [],
  };
  let bulletSize;
  let dynamicBulletIndex = 0;
  const makeElementsArray = (el) =>
    (Array.isArray(el) ? el : [el]).filter((e) => !!e);
  function isPaginationDisabled() {
    return (
      !swiper.params.pagination.el ||
      !swiper.pagination.el ||
      (Array.isArray(swiper.pagination.el) && swiper.pagination.el.length === 0)
    );
  }
  function setSideBullets(bulletEl, position) {
    const { bulletActiveClass } = swiper.params.pagination;
    if (!bulletEl) return;
    bulletEl =
      bulletEl[`${position === "prev" ? "previous" : "next"}ElementSibling`];
    if (bulletEl) {
      bulletEl.classList.add(`${bulletActiveClass}-${position}`);
      bulletEl =
        bulletEl[`${position === "prev" ? "previous" : "next"}ElementSibling`];
      if (bulletEl) {
        bulletEl.classList.add(`${bulletActiveClass}-${position}-${position}`);
      }
    }
  }
  function onBulletClick(e) {
    const bulletEl = e.target.closest(
      classesToSelector(swiper.params.pagination.bulletClass)
    );
    if (!bulletEl) {
      return;
    }
    e.preventDefault();
    const index = elementIndex(bulletEl) * swiper.params.slidesPerGroup;
    if (swiper.params.loop) {
      if (swiper.realIndex === index) return;
      const realIndex = swiper.realIndex;
      const newSlideIndex = swiper.getSlideIndexByData(index);
      const currentSlideIndex = swiper.getSlideIndexByData(swiper.realIndex);
      const loopFix = (dir) => {
        const indexBeforeLoopFix = swiper.activeIndex;
        swiper.loopFix({
          direction: dir,
          activeSlideIndex: newSlideIndex,
          slideTo: false,
        });
        const indexAfterFix = swiper.activeIndex;
        if (indexBeforeLoopFix === indexAfterFix) {
          swiper.slideToLoop(realIndex, 0, false, true);
        }
      };
      if (newSlideIndex > swiper.slides.length - swiper.loopedSlides) {
        loopFix(newSlideIndex > currentSlideIndex ? "next" : "prev");
      } else if (swiper.params.centeredSlides) {
        const slidesPerView =
          swiper.params.slidesPerView === "auto"
            ? swiper.slidesPerViewDynamic()
            : Math.ceil(parseFloat(swiper.params.slidesPerView, 10));
        if (newSlideIndex < Math.floor(slidesPerView / 2)) {
          loopFix("prev");
        }
      }
      swiper.slideToLoop(index);
    } else {
      swiper.slideTo(index);
    }
  }
  function update() {
    // Render || Update Pagination bullets/items
    const rtl = swiper.rtl;
    const params = swiper.params.pagination;
    if (isPaginationDisabled()) return;
    let el = swiper.pagination.el;
    el = makeElementsArray(el);
    // Current/Total
    let current;
    let previousIndex;
    const slidesLength =
      swiper.virtual && swiper.params.virtual.enabled
        ? swiper.virtual.slides.length
        : swiper.slides.length;
    const total = swiper.params.loop
      ? Math.ceil(slidesLength / swiper.params.slidesPerGroup)
      : swiper.snapGrid.length;
    if (swiper.params.loop) {
      previousIndex = swiper.previousRealIndex || 0;
      current =
        swiper.params.slidesPerGroup > 1
          ? Math.floor(swiper.realIndex / swiper.params.slidesPerGroup)
          : swiper.realIndex;
    } else if (typeof swiper.snapIndex !== "undefined") {
      current = swiper.snapIndex;
      previousIndex = swiper.previousSnapIndex;
    } else {
      previousIndex = swiper.previousIndex || 0;
      current = swiper.activeIndex || 0;
    }
    // Types
    if (
      params.type === "bullets" &&
      swiper.pagination.bullets &&
      swiper.pagination.bullets.length > 0
    ) {
      const bullets = swiper.pagination.bullets;
      let firstIndex;
      let lastIndex;
      let midIndex;
      if (params.dynamicBullets) {
        bulletSize = elementOuterSize(
          bullets[0],
          swiper.isHorizontal() ? "width" : "height",
          true
        );
        el.forEach((subEl) => {
          subEl.style[swiper.isHorizontal() ? "width" : "height"] = `${
            bulletSize * (params.dynamicMainBullets + 4)
          }px`;
        });
        if (params.dynamicMainBullets > 1 && previousIndex !== undefined) {
          dynamicBulletIndex += current - (previousIndex || 0);
          if (dynamicBulletIndex > params.dynamicMainBullets - 1) {
            dynamicBulletIndex = params.dynamicMainBullets - 1;
          } else if (dynamicBulletIndex < 0) {
            dynamicBulletIndex = 0;
          }
        }
        firstIndex = Math.max(current - dynamicBulletIndex, 0);
        lastIndex =
          firstIndex +
          (Math.min(bullets.length, params.dynamicMainBullets) - 1);
        midIndex = (lastIndex + firstIndex) / 2;
      }
      bullets.forEach((bulletEl) => {
        const classesToRemove = [
          ...["", "-next", "-next-next", "-prev", "-prev-prev", "-main"].map(
            (suffix) => `${params.bulletActiveClass}${suffix}`
          ),
        ]
          .map((s) =>
            typeof s === "string" && s.includes(" ") ? s.split(" ") : s
          )
          .flat();
        bulletEl.classList.remove(...classesToRemove);
      });
      if (el.length > 1) {
        bullets.forEach((bullet) => {
          const bulletIndex = elementIndex(bullet);
          if (bulletIndex === current) {
            bullet.classList.add(...params.bulletActiveClass.split(" "));
          } else if (swiper.isElement) {
            bullet.setAttribute("part", "bullet");
          }
          if (params.dynamicBullets) {
            if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {
              bullet.classList.add(
                ...`${params.bulletActiveClass}-main`.split(" ")
              );
            }
            if (bulletIndex === firstIndex) {
              setSideBullets(bullet, "prev");
            }
            if (bulletIndex === lastIndex) {
              setSideBullets(bullet, "next");
            }
          }
        });
      } else {
        const bullet = bullets[current];
        if (bullet) {
          bullet.classList.add(...params.bulletActiveClass.split(" "));
        }
        if (swiper.isElement) {
          bullets.forEach((bulletEl, bulletIndex) => {
            bulletEl.setAttribute(
              "part",
              bulletIndex === current ? "bullet-active" : "bullet"
            );
          });
        }
        if (params.dynamicBullets) {
          const firstDisplayedBullet = bullets[firstIndex];
          const lastDisplayedBullet = bullets[lastIndex];
          for (let i = firstIndex; i <= lastIndex; i += 1) {
            if (bullets[i]) {
              bullets[i].classList.add(
                ...`${params.bulletActiveClass}-main`.split(" ")
              );
            }
          }
          setSideBullets(firstDisplayedBullet, "prev");
          setSideBullets(lastDisplayedBullet, "next");
        }
      }
      if (params.dynamicBullets) {
        const dynamicBulletsLength = Math.min(
          bullets.length,
          params.dynamicMainBullets + 4
        );
        const bulletsOffset =
          (bulletSize * dynamicBulletsLength - bulletSize) / 2 -
          midIndex * bulletSize;
        const offsetProp = rtl ? "right" : "left";
        bullets.forEach((bullet) => {
          bullet.style[
            swiper.isHorizontal() ? offsetProp : "top"
          ] = `${bulletsOffset}px`;
        });
      }
    }
    el.forEach((subEl, subElIndex) => {
      if (params.type === "fraction") {
        subEl
          .querySelectorAll(classesToSelector(params.currentClass))
          .forEach((fractionEl) => {
            fractionEl.textContent = params.formatFractionCurrent(current + 1);
          });
        subEl
          .querySelectorAll(classesToSelector(params.totalClass))
          .forEach((totalEl) => {
            totalEl.textContent = params.formatFractionTotal(total);
          });
      }
      if (params.type === "progressbar") {
        let progressbarDirection;
        if (params.progressbarOpposite) {
          progressbarDirection = swiper.isHorizontal()
            ? "vertical"
            : "horizontal";
        } else {
          progressbarDirection = swiper.isHorizontal()
            ? "horizontal"
            : "vertical";
        }
        const scale = (current + 1) / total;
        let scaleX = 1;
        let scaleY = 1;
        if (progressbarDirection === "horizontal") {
          scaleX = scale;
        } else {
          scaleY = scale;
        }
        subEl
          .querySelectorAll(classesToSelector(params.progressbarFillClass))
          .forEach((progressEl) => {
            progressEl.style.transform = `translate3d(0,0,0) scaleX(${scaleX}) scaleY(${scaleY})`;
            progressEl.style.transitionDuration = `${swiper.params.speed}ms`;
          });
      }
      if (params.type === "custom" && params.renderCustom) {
        subEl.innerHTML = params.renderCustom(swiper, current + 1, total);
        if (subElIndex === 0) emit("paginationRender", subEl);
      } else {
        if (subElIndex === 0) emit("paginationRender", subEl);
        emit("paginationUpdate", subEl);
      }
      if (swiper.params.watchOverflow && swiper.enabled) {
        subEl.classList[swiper.isLocked ? "add" : "remove"](params.lockClass);
      }
    });
  }
  function render() {
    // Render Container
    const params = swiper.params.pagination;
    if (isPaginationDisabled()) return;
    const slidesLength =
      swiper.virtual && swiper.params.virtual.enabled
        ? swiper.virtual.slides.length
        : swiper.slides.length;
    let el = swiper.pagination.el;
    el = makeElementsArray(el);
    let paginationHTML = "";
    if (params.type === "bullets") {
      let numberOfBullets = swiper.params.loop
        ? Math.ceil(slidesLength / swiper.params.slidesPerGroup)
        : swiper.snapGrid.length;
      if (
        swiper.params.freeMode &&
        swiper.params.freeMode.enabled &&
        numberOfBullets > slidesLength
      ) {
        numberOfBullets = slidesLength;
      }
      for (let i = 0; i < numberOfBullets; i += 1) {
        if (params.renderBullet) {
          paginationHTML += params.renderBullet.call(
            swiper,
            i,
            params.bulletClass
          );
        } else {
          // prettier-ignore
          paginationHTML += `<${params.bulletElement} ${swiper.isElement ? 'part="bullet"' : ''} class="${params.bulletClass}"></${params.bulletElement}>`;
        }
      }
    }
    if (params.type === "fraction") {
      if (params.renderFraction) {
        paginationHTML = params.renderFraction.call(
          swiper,
          params.currentClass,
          params.totalClass
        );
      } else {
        paginationHTML =
          `<span class="${params.currentClass}"></span>` +
          " / " +
          `<span class="${params.totalClass}"></span>`;
      }
    }
    if (params.type === "progressbar") {
      if (params.renderProgressbar) {
        paginationHTML = params.renderProgressbar.call(
          swiper,
          params.progressbarFillClass
        );
      } else {
        paginationHTML = `<span class="${params.progressbarFillClass}"></span>`;
      }
    }
    swiper.pagination.bullets = [];
    el.forEach((subEl) => {
      if (params.type !== "custom") {
        subEl.innerHTML = paginationHTML || "";
      }
      if (params.type === "bullets") {
        swiper.pagination.bullets.push(
          ...subEl.querySelectorAll(classesToSelector(params.bulletClass))
        );
      }
    });
    if (params.type !== "custom") {
      emit("paginationRender", el[0]);
    }
  }
  function init() {
    swiper.params.pagination = createElementIfNotDefined(
      swiper,
      swiper.originalParams.pagination,
      swiper.params.pagination,
      {
        el: "swiper-pagination",
      }
    );
    const params = swiper.params.pagination;
    if (!params.el) return;
    let el;
    if (typeof params.el === "string" && swiper.isElement) {
      el = swiper.el.querySelector(params.el);
    }
    if (!el && typeof params.el === "string") {
      el = [...document.querySelectorAll(params.el)];
    }
    if (!el) {
      el = params.el;
    }
    if (!el || el.length === 0) return;
    if (
      swiper.params.uniqueNavElements &&
      typeof params.el === "string" &&
      Array.isArray(el) &&
      el.length > 1
    ) {
      el = [...swiper.el.querySelectorAll(params.el)];
      // check if it belongs to another nested Swiper
      if (el.length > 1) {
        el = el.filter((subEl) => {
          if (elementParents(subEl, ".swiper")[0] !== swiper.el) return false;
          return true;
        })[0];
      }
    }
    if (Array.isArray(el) && el.length === 1) el = el[0];
    Object.assign(swiper.pagination, {
      el,
    });
    el = makeElementsArray(el);
    el.forEach((subEl) => {
      if (params.type === "bullets" && params.clickable) {
        subEl.classList.add(...(params.clickableClass || "").split(" "));
      }
      subEl.classList.add(params.modifierClass + params.type);
      subEl.classList.add(
        swiper.isHorizontal() ? params.horizontalClass : params.verticalClass
      );
      if (params.type === "bullets" && params.dynamicBullets) {
        subEl.classList.add(`${params.modifierClass}${params.type}-dynamic`);
        dynamicBulletIndex = 0;
        if (params.dynamicMainBullets < 1) {
          params.dynamicMainBullets = 1;
        }
      }
      if (params.type === "progressbar" && params.progressbarOpposite) {
        subEl.classList.add(params.progressbarOppositeClass);
      }
      if (params.clickable) {
        subEl.addEventListener("click", onBulletClick);
      }
      if (!swiper.enabled) {
        subEl.classList.add(params.lockClass);
      }
    });
  }
  function destroy() {
    const params = swiper.params.pagination;
    if (isPaginationDisabled()) return;
    let el = swiper.pagination.el;
    if (el) {
      el = makeElementsArray(el);
      el.forEach((subEl) => {
        subEl.classList.remove(params.hiddenClass);
        subEl.classList.remove(params.modifierClass + params.type);
        subEl.classList.remove(
          swiper.isHorizontal() ? params.horizontalClass : params.verticalClass
        );
        if (params.clickable) {
          subEl.classList.remove(...(params.clickableClass || "").split(" "));
          subEl.removeEventListener("click", onBulletClick);
        }
      });
    }
    if (swiper.pagination.bullets)
      swiper.pagination.bullets.forEach((subEl) =>
        subEl.classList.remove(...params.bulletActiveClass.split(" "))
      );
  }
  on("changeDirection", () => {
    if (!swiper.pagination || !swiper.pagination.el) return;
    const params = swiper.params.pagination;
    let { el } = swiper.pagination;
    el = makeElementsArray(el);
    el.forEach((subEl) => {
      subEl.classList.remove(params.horizontalClass, params.verticalClass);
      subEl.classList.add(
        swiper.isHorizontal() ? params.horizontalClass : params.verticalClass
      );
    });
  });
  on("init", () => {
    if (swiper.params.pagination.enabled === false) {
      // eslint-disable-next-line
      disable();
    } else {
      init();
      render();
      update();
    }
  });
  on("activeIndexChange", () => {
    if (typeof swiper.snapIndex === "undefined") {
      update();
    }
  });
  on("snapIndexChange", () => {
    update();
  });
  on("snapGridLengthChange", () => {
    render();
    update();
  });
  on("destroy", () => {
    destroy();
  });
  on("enable disable", () => {
    let { el } = swiper.pagination;
    if (el) {
      el = makeElementsArray(el);
      el.forEach((subEl) =>
        subEl.classList[swiper.enabled ? "remove" : "add"](
          swiper.params.pagination.lockClass
        )
      );
    }
  });
  on("lock unlock", () => {
    update();
  });
  on("click", (_s, e) => {
    const targetEl = e.target;
    const el = makeElementsArray(swiper.pagination.el);
    if (
      swiper.params.pagination.el &&
      swiper.params.pagination.hideOnClick &&
      el &&
      el.length > 0 &&
      !targetEl.classList.contains(swiper.params.pagination.bulletClass)
    ) {
      if (
        swiper.navigation &&
        ((swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl) ||
          (swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl))
      )
        return;
      const isHidden = el[0].classList.contains(
        swiper.params.pagination.hiddenClass
      );
      if (isHidden === true) {
        emit("paginationShow");
      } else {
        emit("paginationHide");
      }
      el.forEach((subEl) =>
        subEl.classList.toggle(swiper.params.pagination.hiddenClass)
      );
    }
  });
  const enable = () => {
    swiper.el.classList.remove(
      swiper.params.pagination.paginationDisabledClass
    );
    let { el } = swiper.pagination;
    if (el) {
      el = makeElementsArray(el);
      el.forEach((subEl) =>
        subEl.classList.remove(swiper.params.pagination.paginationDisabledClass)
      );
    }
    init();
    render();
    update();
  };
  const disable = () => {
    swiper.el.classList.add(swiper.params.pagination.paginationDisabledClass);
    let { el } = swiper.pagination;
    if (el) {
      el = makeElementsArray(el);
      el.forEach((subEl) =>
        subEl.classList.add(swiper.params.pagination.paginationDisabledClass)
      );
    }
    destroy();
  };
  Object.assign(swiper.pagination, {
    enable,
    disable,
    render,
    update,
    init,
    destroy,
  });
}

var commonjsGlobal$1 =
  typeof globalThis !== "undefined"
    ? globalThis
    : typeof window !== "undefined"
    ? window
    : typeof global !== "undefined"
    ? global
    : typeof self !== "undefined"
    ? self
    : {};

function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default")
    ? x["default"]
    : x;
}

function commonjsRequire(path) {
  throw new Error(
    'Could not dynamically require "' +
      path +
      '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.'
  );
}

var progressbar = { exports: {} };

(function (module, exports) {
  // ProgressBar.js 1.1.1
  // https://kimmobrunfeldt.github.io/progressbar.js
  // License: MIT

  (function (f) {
    {
      module.exports = f();
    }
  })(function () {
    return (function () {
      function r(e, n, t) {
        function o(i, f) {
          if (!n[i]) {
            if (!e[i]) {
              var c = "function" == typeof commonjsRequire && commonjsRequire;
              if (!f && c) return c(i, !0);
              if (u) return u(i, !0);
              var a = new Error("Cannot find module '" + i + "'");
              throw ((a.code = "MODULE_NOT_FOUND"), a);
            }
            var p = (n[i] = { exports: {} });
            e[i][0].call(
              p.exports,
              function (r) {
                var n = e[i][1][r];
                return o(n || r);
              },
              p,
              p.exports,
              r,
              e,
              n,
              t
            );
          }
          return n[i].exports;
        }
        for (
          var u = "function" == typeof commonjsRequire && commonjsRequire,
            i = 0;
          i < t.length;
          i++
        )
          o(t[i]);
        return o;
      }
      return r;
    })()(
      {
        1: [
          function (require, module, exports) {
            (function (global) {
              (function () {
                /**
                 * Lodash (Custom Build) <https://lodash.com/>
                 * Build: `lodash modularize exports="npm" -o ./`
                 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
                 * Released under MIT license <https://lodash.com/license>
                 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
                 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
                 */

                /** Used as the size to enable large array optimizations. */
                var LARGE_ARRAY_SIZE = 200;

                /** Used to stand-in for `undefined` hash values. */
                var HASH_UNDEFINED = "__lodash_hash_undefined__";

                /** Used to detect hot functions by number of calls within a span of milliseconds. */
                var HOT_COUNT = 800,
                  HOT_SPAN = 16;

                /** Used as references for various `Number` constants. */
                var MAX_SAFE_INTEGER = 9007199254740991;

                /** `Object#toString` result references. */
                var argsTag = "[object Arguments]",
                  arrayTag = "[object Array]",
                  asyncTag = "[object AsyncFunction]",
                  boolTag = "[object Boolean]",
                  dateTag = "[object Date]",
                  errorTag = "[object Error]",
                  funcTag = "[object Function]",
                  genTag = "[object GeneratorFunction]",
                  mapTag = "[object Map]",
                  numberTag = "[object Number]",
                  nullTag = "[object Null]",
                  objectTag = "[object Object]",
                  proxyTag = "[object Proxy]",
                  regexpTag = "[object RegExp]",
                  setTag = "[object Set]",
                  stringTag = "[object String]",
                  undefinedTag = "[object Undefined]",
                  weakMapTag = "[object WeakMap]";

                var arrayBufferTag = "[object ArrayBuffer]",
                  dataViewTag = "[object DataView]",
                  float32Tag = "[object Float32Array]",
                  float64Tag = "[object Float64Array]",
                  int8Tag = "[object Int8Array]",
                  int16Tag = "[object Int16Array]",
                  int32Tag = "[object Int32Array]",
                  uint8Tag = "[object Uint8Array]",
                  uint8ClampedTag = "[object Uint8ClampedArray]",
                  uint16Tag = "[object Uint16Array]",
                  uint32Tag = "[object Uint32Array]";

                /**
                 * Used to match `RegExp`
                 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
                 */
                var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

                /** Used to detect host constructors (Safari). */
                var reIsHostCtor = /^\[object .+?Constructor\]$/;

                /** Used to detect unsigned integer values. */
                var reIsUint = /^(?:0|[1-9]\d*)$/;

                /** Used to identify `toStringTag` values of typed arrays. */
                var typedArrayTags = {};
                typedArrayTags[float32Tag] =
                  typedArrayTags[float64Tag] =
                  typedArrayTags[int8Tag] =
                  typedArrayTags[int16Tag] =
                  typedArrayTags[int32Tag] =
                  typedArrayTags[uint8Tag] =
                  typedArrayTags[uint8ClampedTag] =
                  typedArrayTags[uint16Tag] =
                  typedArrayTags[uint32Tag] =
                    true;
                typedArrayTags[argsTag] =
                  typedArrayTags[arrayTag] =
                  typedArrayTags[arrayBufferTag] =
                  typedArrayTags[boolTag] =
                  typedArrayTags[dataViewTag] =
                  typedArrayTags[dateTag] =
                  typedArrayTags[errorTag] =
                  typedArrayTags[funcTag] =
                  typedArrayTags[mapTag] =
                  typedArrayTags[numberTag] =
                  typedArrayTags[objectTag] =
                  typedArrayTags[regexpTag] =
                  typedArrayTags[setTag] =
                  typedArrayTags[stringTag] =
                  typedArrayTags[weakMapTag] =
                    false;

                /** Detect free variable `global` from Node.js. */
                var freeGlobal =
                  typeof global == "object" &&
                  global &&
                  global.Object === Object &&
                  global;

                /** Detect free variable `self`. */
                var freeSelf =
                  typeof self == "object" &&
                  self &&
                  self.Object === Object &&
                  self;

                /** Used as a reference to the global object. */
                var root = freeGlobal || freeSelf || Function("return this")();

                /** Detect free variable `exports`. */
                var freeExports =
                  typeof exports == "object" &&
                  exports &&
                  !exports.nodeType &&
                  exports;

                /** Detect free variable `module`. */
                var freeModule =
                  freeExports &&
                  typeof module == "object" &&
                  module &&
                  !module.nodeType &&
                  module;

                /** Detect the popular CommonJS extension `module.exports`. */
                var moduleExports =
                  freeModule && freeModule.exports === freeExports;

                /** Detect free variable `process` from Node.js. */
                var freeProcess = moduleExports && freeGlobal.process;

                /** Used to access faster Node.js helpers. */
                var nodeUtil = (function () {
                  try {
                    // Use `util.types` for Node.js 10+.
                    var types =
                      freeModule &&
                      freeModule.require &&
                      freeModule.require("util").types;

                    if (types) {
                      return types;
                    }

                    // Legacy `process.binding('util')` for Node.js < 10.
                    return (
                      freeProcess &&
                      freeProcess.binding &&
                      freeProcess.binding("util")
                    );
                  } catch (e) {}
                })();

                /* Node.js helper references. */
                var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

                /**
                 * A faster alternative to `Function#apply`, this function invokes `func`
                 * with the `this` binding of `thisArg` and the arguments of `args`.
                 *
                 * @private
                 * @param {Function} func The function to invoke.
                 * @param {*} thisArg The `this` binding of `func`.
                 * @param {Array} args The arguments to invoke `func` with.
                 * @returns {*} Returns the result of `func`.
                 */
                function apply(func, thisArg, args) {
                  switch (args.length) {
                    case 0:
                      return func.call(thisArg);
                    case 1:
                      return func.call(thisArg, args[0]);
                    case 2:
                      return func.call(thisArg, args[0], args[1]);
                    case 3:
                      return func.call(thisArg, args[0], args[1], args[2]);
                  }
                  return func.apply(thisArg, args);
                }

                /**
                 * The base implementation of `_.times` without support for iteratee shorthands
                 * or max array length checks.
                 *
                 * @private
                 * @param {number} n The number of times to invoke `iteratee`.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array} Returns the array of results.
                 */
                function baseTimes(n, iteratee) {
                  var index = -1,
                    result = Array(n);

                  while (++index < n) {
                    result[index] = iteratee(index);
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.unary` without support for storing metadata.
                 *
                 * @private
                 * @param {Function} func The function to cap arguments for.
                 * @returns {Function} Returns the new capped function.
                 */
                function baseUnary(func) {
                  return function (value) {
                    return func(value);
                  };
                }

                /**
                 * Gets the value at `key` of `object`.
                 *
                 * @private
                 * @param {Object} [object] The object to query.
                 * @param {string} key The key of the property to get.
                 * @returns {*} Returns the property value.
                 */
                function getValue(object, key) {
                  return object == null ? undefined : object[key];
                }

                /**
                 * Creates a unary function that invokes `func` with its argument transformed.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {Function} transform The argument transform.
                 * @returns {Function} Returns the new function.
                 */
                function overArg(func, transform) {
                  return function (arg) {
                    return func(transform(arg));
                  };
                }

                /** Used for built-in method references. */
                var arrayProto = Array.prototype,
                  funcProto = Function.prototype,
                  objectProto = Object.prototype;

                /** Used to detect overreaching core-js shims. */
                var coreJsData = root["__core-js_shared__"];

                /** Used to resolve the decompiled source of functions. */
                var funcToString = funcProto.toString;

                /** Used to check objects for own properties. */
                var hasOwnProperty = objectProto.hasOwnProperty;

                /** Used to detect methods masquerading as native. */
                var maskSrcKey = (function () {
                  var uid = /[^.]+$/.exec(
                    (coreJsData &&
                      coreJsData.keys &&
                      coreJsData.keys.IE_PROTO) ||
                      ""
                  );
                  return uid ? "Symbol(src)_1." + uid : "";
                })();

                /**
                 * Used to resolve the
                 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
                 * of values.
                 */
                var nativeObjectToString = objectProto.toString;

                /** Used to infer the `Object` constructor. */
                var objectCtorString = funcToString.call(Object);

                /** Used to detect if a method is native. */
                var reIsNative = RegExp(
                  "^" +
                    funcToString
                      .call(hasOwnProperty)
                      .replace(reRegExpChar, "\\$&")
                      .replace(
                        /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                        "$1.*?"
                      ) +
                    "$"
                );

                /** Built-in value references. */
                var Buffer = moduleExports ? root.Buffer : undefined,
                  Symbol = root.Symbol,
                  Uint8Array = root.Uint8Array,
                  allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
                  getPrototype = overArg(Object.getPrototypeOf, Object),
                  objectCreate = Object.create,
                  propertyIsEnumerable = objectProto.propertyIsEnumerable,
                  splice = arrayProto.splice,
                  symToStringTag = Symbol ? Symbol.toStringTag : undefined;

                var defineProperty = (function () {
                  try {
                    var func = getNative(Object, "defineProperty");
                    func({}, "", {});
                    return func;
                  } catch (e) {}
                })();

                /* Built-in method references for those with the same name as other `lodash` methods. */
                var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
                  nativeMax = Math.max,
                  nativeNow = Date.now;

                /* Built-in method references that are verified to be native. */
                var Map = getNative(root, "Map"),
                  nativeCreate = getNative(Object, "create");

                /**
                 * The base implementation of `_.create` without support for assigning
                 * properties to the created object.
                 *
                 * @private
                 * @param {Object} proto The object to inherit from.
                 * @returns {Object} Returns the new object.
                 */
                var baseCreate = (function () {
                  function object() {}
                  return function (proto) {
                    if (!isObject(proto)) {
                      return {};
                    }
                    if (objectCreate) {
                      return objectCreate(proto);
                    }
                    object.prototype = proto;
                    var result = new object();
                    object.prototype = undefined;
                    return result;
                  };
                })();

                /**
                 * Creates a hash object.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function Hash(entries) {
                  var index = -1,
                    length = entries == null ? 0 : entries.length;

                  this.clear();
                  while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                  }
                }

                /**
                 * Removes all key-value entries from the hash.
                 *
                 * @private
                 * @name clear
                 * @memberOf Hash
                 */
                function hashClear() {
                  this.__data__ = nativeCreate ? nativeCreate(null) : {};
                  this.size = 0;
                }

                /**
                 * Removes `key` and its value from the hash.
                 *
                 * @private
                 * @name delete
                 * @memberOf Hash
                 * @param {Object} hash The hash to modify.
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function hashDelete(key) {
                  var result = this.has(key) && delete this.__data__[key];
                  this.size -= result ? 1 : 0;
                  return result;
                }

                /**
                 * Gets the hash value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf Hash
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function hashGet(key) {
                  var data = this.__data__;
                  if (nativeCreate) {
                    var result = data[key];
                    return result === HASH_UNDEFINED ? undefined : result;
                  }
                  return hasOwnProperty.call(data, key) ? data[key] : undefined;
                }

                /**
                 * Checks if a hash value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf Hash
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function hashHas(key) {
                  var data = this.__data__;
                  return nativeCreate
                    ? data[key] !== undefined
                    : hasOwnProperty.call(data, key);
                }

                /**
                 * Sets the hash `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf Hash
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the hash instance.
                 */
                function hashSet(key, value) {
                  var data = this.__data__;
                  this.size += this.has(key) ? 0 : 1;
                  data[key] =
                    nativeCreate && value === undefined
                      ? HASH_UNDEFINED
                      : value;
                  return this;
                }

                // Add methods to `Hash`.
                Hash.prototype.clear = hashClear;
                Hash.prototype["delete"] = hashDelete;
                Hash.prototype.get = hashGet;
                Hash.prototype.has = hashHas;
                Hash.prototype.set = hashSet;

                /**
                 * Creates an list cache object.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function ListCache(entries) {
                  var index = -1,
                    length = entries == null ? 0 : entries.length;

                  this.clear();
                  while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                  }
                }

                /**
                 * Removes all key-value entries from the list cache.
                 *
                 * @private
                 * @name clear
                 * @memberOf ListCache
                 */
                function listCacheClear() {
                  this.__data__ = [];
                  this.size = 0;
                }

                /**
                 * Removes `key` and its value from the list cache.
                 *
                 * @private
                 * @name delete
                 * @memberOf ListCache
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function listCacheDelete(key) {
                  var data = this.__data__,
                    index = assocIndexOf(data, key);

                  if (index < 0) {
                    return false;
                  }
                  var lastIndex = data.length - 1;
                  if (index == lastIndex) {
                    data.pop();
                  } else {
                    splice.call(data, index, 1);
                  }
                  --this.size;
                  return true;
                }

                /**
                 * Gets the list cache value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf ListCache
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function listCacheGet(key) {
                  var data = this.__data__,
                    index = assocIndexOf(data, key);

                  return index < 0 ? undefined : data[index][1];
                }

                /**
                 * Checks if a list cache value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf ListCache
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function listCacheHas(key) {
                  return assocIndexOf(this.__data__, key) > -1;
                }

                /**
                 * Sets the list cache `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf ListCache
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the list cache instance.
                 */
                function listCacheSet(key, value) {
                  var data = this.__data__,
                    index = assocIndexOf(data, key);

                  if (index < 0) {
                    ++this.size;
                    data.push([key, value]);
                  } else {
                    data[index][1] = value;
                  }
                  return this;
                }

                // Add methods to `ListCache`.
                ListCache.prototype.clear = listCacheClear;
                ListCache.prototype["delete"] = listCacheDelete;
                ListCache.prototype.get = listCacheGet;
                ListCache.prototype.has = listCacheHas;
                ListCache.prototype.set = listCacheSet;

                /**
                 * Creates a map cache object to store key-value pairs.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function MapCache(entries) {
                  var index = -1,
                    length = entries == null ? 0 : entries.length;

                  this.clear();
                  while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                  }
                }

                /**
                 * Removes all key-value entries from the map.
                 *
                 * @private
                 * @name clear
                 * @memberOf MapCache
                 */
                function mapCacheClear() {
                  this.size = 0;
                  this.__data__ = {
                    hash: new Hash(),
                    map: new (Map || ListCache)(),
                    string: new Hash(),
                  };
                }

                /**
                 * Removes `key` and its value from the map.
                 *
                 * @private
                 * @name delete
                 * @memberOf MapCache
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function mapCacheDelete(key) {
                  var result = getMapData(this, key)["delete"](key);
                  this.size -= result ? 1 : 0;
                  return result;
                }

                /**
                 * Gets the map value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf MapCache
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function mapCacheGet(key) {
                  return getMapData(this, key).get(key);
                }

                /**
                 * Checks if a map value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf MapCache
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function mapCacheHas(key) {
                  return getMapData(this, key).has(key);
                }

                /**
                 * Sets the map `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf MapCache
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the map cache instance.
                 */
                function mapCacheSet(key, value) {
                  var data = getMapData(this, key),
                    size = data.size;

                  data.set(key, value);
                  this.size += data.size == size ? 0 : 1;
                  return this;
                }

                // Add methods to `MapCache`.
                MapCache.prototype.clear = mapCacheClear;
                MapCache.prototype["delete"] = mapCacheDelete;
                MapCache.prototype.get = mapCacheGet;
                MapCache.prototype.has = mapCacheHas;
                MapCache.prototype.set = mapCacheSet;

                /**
                 * Creates a stack cache object to store key-value pairs.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function Stack(entries) {
                  var data = (this.__data__ = new ListCache(entries));
                  this.size = data.size;
                }

                /**
                 * Removes all key-value entries from the stack.
                 *
                 * @private
                 * @name clear
                 * @memberOf Stack
                 */
                function stackClear() {
                  this.__data__ = new ListCache();
                  this.size = 0;
                }

                /**
                 * Removes `key` and its value from the stack.
                 *
                 * @private
                 * @name delete
                 * @memberOf Stack
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function stackDelete(key) {
                  var data = this.__data__,
                    result = data["delete"](key);

                  this.size = data.size;
                  return result;
                }

                /**
                 * Gets the stack value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf Stack
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function stackGet(key) {
                  return this.__data__.get(key);
                }

                /**
                 * Checks if a stack value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf Stack
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function stackHas(key) {
                  return this.__data__.has(key);
                }

                /**
                 * Sets the stack `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf Stack
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the stack cache instance.
                 */
                function stackSet(key, value) {
                  var data = this.__data__;
                  if (data instanceof ListCache) {
                    var pairs = data.__data__;
                    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                      pairs.push([key, value]);
                      this.size = ++data.size;
                      return this;
                    }
                    data = this.__data__ = new MapCache(pairs);
                  }
                  data.set(key, value);
                  this.size = data.size;
                  return this;
                }

                // Add methods to `Stack`.
                Stack.prototype.clear = stackClear;
                Stack.prototype["delete"] = stackDelete;
                Stack.prototype.get = stackGet;
                Stack.prototype.has = stackHas;
                Stack.prototype.set = stackSet;

                /**
                 * Creates an array of the enumerable property names of the array-like `value`.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @param {boolean} inherited Specify returning inherited property names.
                 * @returns {Array} Returns the array of property names.
                 */
                function arrayLikeKeys(value, inherited) {
                  var isArr = isArray(value),
                    isArg = !isArr && isArguments(value),
                    isBuff = !isArr && !isArg && isBuffer(value),
                    isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                    skipIndexes = isArr || isArg || isBuff || isType,
                    result = skipIndexes ? baseTimes(value.length, String) : [],
                    length = result.length;

                  for (var key in value) {
                    if (
                      (inherited || hasOwnProperty.call(value, key)) &&
                      !(
                        skipIndexes &&
                        // Safari 9 has enumerable `arguments.length` in strict mode.
                        (key == "length" ||
                          // Node.js 0.10 has enumerable non-index properties on buffers.
                          (isBuff && (key == "offset" || key == "parent")) ||
                          // PhantomJS 2 has enumerable non-index properties on typed arrays.
                          (isType &&
                            (key == "buffer" ||
                              key == "byteLength" ||
                              key == "byteOffset")) ||
                          // Skip index properties.
                          isIndex(key, length))
                      )
                    ) {
                      result.push(key);
                    }
                  }
                  return result;
                }

                /**
                 * This function is like `assignValue` except that it doesn't assign
                 * `undefined` values.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {string} key The key of the property to assign.
                 * @param {*} value The value to assign.
                 */
                function assignMergeValue(object, key, value) {
                  if (
                    (value !== undefined && !eq(object[key], value)) ||
                    (value === undefined && !(key in object))
                  ) {
                    baseAssignValue(object, key, value);
                  }
                }

                /**
                 * Assigns `value` to `key` of `object` if the existing value is not equivalent
                 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {string} key The key of the property to assign.
                 * @param {*} value The value to assign.
                 */
                function assignValue(object, key, value) {
                  var objValue = object[key];
                  if (
                    !(
                      hasOwnProperty.call(object, key) && eq(objValue, value)
                    ) ||
                    (value === undefined && !(key in object))
                  ) {
                    baseAssignValue(object, key, value);
                  }
                }

                /**
                 * Gets the index at which the `key` is found in `array` of key-value pairs.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {*} key The key to search for.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 */
                function assocIndexOf(array, key) {
                  var length = array.length;
                  while (length--) {
                    if (eq(array[length][0], key)) {
                      return length;
                    }
                  }
                  return -1;
                }

                /**
                 * The base implementation of `assignValue` and `assignMergeValue` without
                 * value checks.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {string} key The key of the property to assign.
                 * @param {*} value The value to assign.
                 */
                function baseAssignValue(object, key, value) {
                  if (key == "__proto__" && defineProperty) {
                    defineProperty(object, key, {
                      configurable: true,
                      enumerable: true,
                      value: value,
                      writable: true,
                    });
                  } else {
                    object[key] = value;
                  }
                }

                /**
                 * The base implementation of `baseForOwn` which iterates over `object`
                 * properties returned by `keysFunc` and invokes `iteratee` for each property.
                 * Iteratee functions may exit iteration early by explicitly returning `false`.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @param {Function} keysFunc The function to get the keys of `object`.
                 * @returns {Object} Returns `object`.
                 */
                var baseFor = createBaseFor();

                /**
                 * The base implementation of `getTag` without fallbacks for buggy environments.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @returns {string} Returns the `toStringTag`.
                 */
                function baseGetTag(value) {
                  if (value == null) {
                    return value === undefined ? undefinedTag : nullTag;
                  }
                  return symToStringTag && symToStringTag in Object(value)
                    ? getRawTag(value)
                    : objectToString(value);
                }

                /**
                 * The base implementation of `_.isArguments`.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                 */
                function baseIsArguments(value) {
                  return isObjectLike(value) && baseGetTag(value) == argsTag;
                }

                /**
                 * The base implementation of `_.isNative` without bad shim checks.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a native function,
                 *  else `false`.
                 */
                function baseIsNative(value) {
                  if (!isObject(value) || isMasked(value)) {
                    return false;
                  }
                  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
                  return pattern.test(toSource(value));
                }

                /**
                 * The base implementation of `_.isTypedArray` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                 */
                function baseIsTypedArray(value) {
                  return (
                    isObjectLike(value) &&
                    isLength(value.length) &&
                    !!typedArrayTags[baseGetTag(value)]
                  );
                }

                /**
                 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 */
                function baseKeysIn(object) {
                  if (!isObject(object)) {
                    return nativeKeysIn(object);
                  }
                  var isProto = isPrototype(object),
                    result = [];

                  for (var key in object) {
                    if (
                      !(
                        key == "constructor" &&
                        (isProto || !hasOwnProperty.call(object, key))
                      )
                    ) {
                      result.push(key);
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.merge` without support for multiple sources.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @param {number} srcIndex The index of `source`.
                 * @param {Function} [customizer] The function to customize merged values.
                 * @param {Object} [stack] Tracks traversed source values and their merged
                 *  counterparts.
                 */
                function baseMerge(
                  object,
                  source,
                  srcIndex,
                  customizer,
                  stack
                ) {
                  if (object === source) {
                    return;
                  }
                  baseFor(
                    source,
                    function (srcValue, key) {
                      stack || (stack = new Stack());
                      if (isObject(srcValue)) {
                        baseMergeDeep(
                          object,
                          source,
                          key,
                          srcIndex,
                          baseMerge,
                          customizer,
                          stack
                        );
                      } else {
                        var newValue = customizer
                          ? customizer(
                              safeGet(object, key),
                              srcValue,
                              key + "",
                              object,
                              source,
                              stack
                            )
                          : undefined;

                        if (newValue === undefined) {
                          newValue = srcValue;
                        }
                        assignMergeValue(object, key, newValue);
                      }
                    },
                    keysIn
                  );
                }

                /**
                 * A specialized version of `baseMerge` for arrays and objects which performs
                 * deep merges and tracks traversed objects enabling objects with circular
                 * references to be merged.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @param {string} key The key of the value to merge.
                 * @param {number} srcIndex The index of `source`.
                 * @param {Function} mergeFunc The function to merge values.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @param {Object} [stack] Tracks traversed source values and their merged
                 *  counterparts.
                 */
                function baseMergeDeep(
                  object,
                  source,
                  key,
                  srcIndex,
                  mergeFunc,
                  customizer,
                  stack
                ) {
                  var objValue = safeGet(object, key),
                    srcValue = safeGet(source, key),
                    stacked = stack.get(srcValue);

                  if (stacked) {
                    assignMergeValue(object, key, stacked);
                    return;
                  }
                  var newValue = customizer
                    ? customizer(
                        objValue,
                        srcValue,
                        key + "",
                        object,
                        source,
                        stack
                      )
                    : undefined;

                  var isCommon = newValue === undefined;

                  if (isCommon) {
                    var isArr = isArray(srcValue),
                      isBuff = !isArr && isBuffer(srcValue),
                      isTyped = !isArr && !isBuff && isTypedArray(srcValue);

                    newValue = srcValue;
                    if (isArr || isBuff || isTyped) {
                      if (isArray(objValue)) {
                        newValue = objValue;
                      } else if (isArrayLikeObject(objValue)) {
                        newValue = copyArray(objValue);
                      } else if (isBuff) {
                        isCommon = false;
                        newValue = cloneBuffer(srcValue, true);
                      } else if (isTyped) {
                        isCommon = false;
                        newValue = cloneTypedArray(srcValue, true);
                      } else {
                        newValue = [];
                      }
                    } else if (
                      isPlainObject(srcValue) ||
                      isArguments(srcValue)
                    ) {
                      newValue = objValue;
                      if (isArguments(objValue)) {
                        newValue = toPlainObject(objValue);
                      } else if (!isObject(objValue) || isFunction(objValue)) {
                        newValue = initCloneObject(srcValue);
                      }
                    } else {
                      isCommon = false;
                    }
                  }
                  if (isCommon) {
                    // Recursively merge objects and arrays (susceptible to call stack limits).
                    stack.set(srcValue, newValue);
                    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                    stack["delete"](srcValue);
                  }
                  assignMergeValue(object, key, newValue);
                }

                /**
                 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
                 *
                 * @private
                 * @param {Function} func The function to apply a rest parameter to.
                 * @param {number} [start=func.length-1] The start position of the rest parameter.
                 * @returns {Function} Returns the new function.
                 */
                function baseRest(func, start) {
                  return setToString(
                    overRest(func, start, identity),
                    func + ""
                  );
                }

                /**
                 * The base implementation of `setToString` without support for hot loop shorting.
                 *
                 * @private
                 * @param {Function} func The function to modify.
                 * @param {Function} string The `toString` result.
                 * @returns {Function} Returns `func`.
                 */
                var baseSetToString = !defineProperty
                  ? identity
                  : function (func, string) {
                      return defineProperty(func, "toString", {
                        configurable: true,
                        enumerable: false,
                        value: constant(string),
                        writable: true,
                      });
                    };

                /**
                 * Creates a clone of  `buffer`.
                 *
                 * @private
                 * @param {Buffer} buffer The buffer to clone.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Buffer} Returns the cloned buffer.
                 */
                function cloneBuffer(buffer, isDeep) {
                  if (isDeep) {
                    return buffer.slice();
                  }
                  var length = buffer.length,
                    result = allocUnsafe
                      ? allocUnsafe(length)
                      : new buffer.constructor(length);

                  buffer.copy(result);
                  return result;
                }

                /**
                 * Creates a clone of `arrayBuffer`.
                 *
                 * @private
                 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
                 * @returns {ArrayBuffer} Returns the cloned array buffer.
                 */
                function cloneArrayBuffer(arrayBuffer) {
                  var result = new arrayBuffer.constructor(
                    arrayBuffer.byteLength
                  );
                  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
                  return result;
                }

                /**
                 * Creates a clone of `typedArray`.
                 *
                 * @private
                 * @param {Object} typedArray The typed array to clone.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Object} Returns the cloned typed array.
                 */
                function cloneTypedArray(typedArray, isDeep) {
                  var buffer = isDeep
                    ? cloneArrayBuffer(typedArray.buffer)
                    : typedArray.buffer;
                  return new typedArray.constructor(
                    buffer,
                    typedArray.byteOffset,
                    typedArray.length
                  );
                }

                /**
                 * Copies the values of `source` to `array`.
                 *
                 * @private
                 * @param {Array} source The array to copy values from.
                 * @param {Array} [array=[]] The array to copy values to.
                 * @returns {Array} Returns `array`.
                 */
                function copyArray(source, array) {
                  var index = -1,
                    length = source.length;

                  array || (array = Array(length));
                  while (++index < length) {
                    array[index] = source[index];
                  }
                  return array;
                }

                /**
                 * Copies properties of `source` to `object`.
                 *
                 * @private
                 * @param {Object} source The object to copy properties from.
                 * @param {Array} props The property identifiers to copy.
                 * @param {Object} [object={}] The object to copy properties to.
                 * @param {Function} [customizer] The function to customize copied values.
                 * @returns {Object} Returns `object`.
                 */
                function copyObject(source, props, object, customizer) {
                  var isNew = !object;
                  object || (object = {});

                  var index = -1,
                    length = props.length;

                  while (++index < length) {
                    var key = props[index];

                    var newValue = customizer
                      ? customizer(
                          object[key],
                          source[key],
                          key,
                          object,
                          source
                        )
                      : undefined;

                    if (newValue === undefined) {
                      newValue = source[key];
                    }
                    if (isNew) {
                      baseAssignValue(object, key, newValue);
                    } else {
                      assignValue(object, key, newValue);
                    }
                  }
                  return object;
                }

                /**
                 * Creates a function like `_.assign`.
                 *
                 * @private
                 * @param {Function} assigner The function to assign values.
                 * @returns {Function} Returns the new assigner function.
                 */
                function createAssigner(assigner) {
                  return baseRest(function (object, sources) {
                    var index = -1,
                      length = sources.length,
                      customizer = length > 1 ? sources[length - 1] : undefined,
                      guard = length > 2 ? sources[2] : undefined;

                    customizer =
                      assigner.length > 3 && typeof customizer == "function"
                        ? (length--, customizer)
                        : undefined;

                    if (
                      guard &&
                      isIterateeCall(sources[0], sources[1], guard)
                    ) {
                      customizer = length < 3 ? undefined : customizer;
                      length = 1;
                    }
                    object = Object(object);
                    while (++index < length) {
                      var source = sources[index];
                      if (source) {
                        assigner(object, source, index, customizer);
                      }
                    }
                    return object;
                  });
                }

                /**
                 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
                 *
                 * @private
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Function} Returns the new base function.
                 */
                function createBaseFor(fromRight) {
                  return function (object, iteratee, keysFunc) {
                    var index = -1,
                      iterable = Object(object),
                      props = keysFunc(object),
                      length = props.length;

                    while (length--) {
                      var key = props[fromRight ? length : ++index];
                      if (iteratee(iterable[key], key, iterable) === false) {
                        break;
                      }
                    }
                    return object;
                  };
                }

                /**
                 * Gets the data for `map`.
                 *
                 * @private
                 * @param {Object} map The map to query.
                 * @param {string} key The reference key.
                 * @returns {*} Returns the map data.
                 */
                function getMapData(map, key) {
                  var data = map.__data__;
                  return isKeyable(key)
                    ? data[typeof key == "string" ? "string" : "hash"]
                    : data.map;
                }

                /**
                 * Gets the native function at `key` of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {string} key The key of the method to get.
                 * @returns {*} Returns the function if it's native, else `undefined`.
                 */
                function getNative(object, key) {
                  var value = getValue(object, key);
                  return baseIsNative(value) ? value : undefined;
                }

                /**
                 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @returns {string} Returns the raw `toStringTag`.
                 */
                function getRawTag(value) {
                  var isOwn = hasOwnProperty.call(value, symToStringTag),
                    tag = value[symToStringTag];

                  try {
                    value[symToStringTag] = undefined;
                    var unmasked = true;
                  } catch (e) {}

                  var result = nativeObjectToString.call(value);
                  if (unmasked) {
                    if (isOwn) {
                      value[symToStringTag] = tag;
                    } else {
                      delete value[symToStringTag];
                    }
                  }
                  return result;
                }

                /**
                 * Initializes an object clone.
                 *
                 * @private
                 * @param {Object} object The object to clone.
                 * @returns {Object} Returns the initialized clone.
                 */
                function initCloneObject(object) {
                  return typeof object.constructor == "function" &&
                    !isPrototype(object)
                    ? baseCreate(getPrototype(object))
                    : {};
                }

                /**
                 * Checks if `value` is a valid array-like index.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
                 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
                 */
                function isIndex(value, length) {
                  var type = typeof value;
                  length = length == null ? MAX_SAFE_INTEGER : length;

                  return (
                    !!length &&
                    (type == "number" ||
                      (type != "symbol" && reIsUint.test(value))) &&
                    value > -1 &&
                    value % 1 == 0 &&
                    value < length
                  );
                }

                /**
                 * Checks if the given arguments are from an iteratee call.
                 *
                 * @private
                 * @param {*} value The potential iteratee value argument.
                 * @param {*} index The potential iteratee index or key argument.
                 * @param {*} object The potential iteratee object argument.
                 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
                 *  else `false`.
                 */
                function isIterateeCall(value, index, object) {
                  if (!isObject(object)) {
                    return false;
                  }
                  var type = typeof index;
                  if (
                    type == "number"
                      ? isArrayLike(object) && isIndex(index, object.length)
                      : type == "string" && index in object
                  ) {
                    return eq(object[index], value);
                  }
                  return false;
                }

                /**
                 * Checks if `value` is suitable for use as unique object key.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
                 */
                function isKeyable(value) {
                  var type = typeof value;
                  return type == "string" ||
                    type == "number" ||
                    type == "symbol" ||
                    type == "boolean"
                    ? value !== "__proto__"
                    : value === null;
                }

                /**
                 * Checks if `func` has its source masked.
                 *
                 * @private
                 * @param {Function} func The function to check.
                 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
                 */
                function isMasked(func) {
                  return !!maskSrcKey && maskSrcKey in func;
                }

                /**
                 * Checks if `value` is likely a prototype object.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
                 */
                function isPrototype(value) {
                  var Ctor = value && value.constructor,
                    proto =
                      (typeof Ctor == "function" && Ctor.prototype) ||
                      objectProto;

                  return value === proto;
                }

                /**
                 * This function is like
                 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                 * except that it includes inherited enumerable properties.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 */
                function nativeKeysIn(object) {
                  var result = [];
                  if (object != null) {
                    for (var key in Object(object)) {
                      result.push(key);
                    }
                  }
                  return result;
                }

                /**
                 * Converts `value` to a string using `Object.prototype.toString`.
                 *
                 * @private
                 * @param {*} value The value to convert.
                 * @returns {string} Returns the converted string.
                 */
                function objectToString(value) {
                  return nativeObjectToString.call(value);
                }

                /**
                 * A specialized version of `baseRest` which transforms the rest array.
                 *
                 * @private
                 * @param {Function} func The function to apply a rest parameter to.
                 * @param {number} [start=func.length-1] The start position of the rest parameter.
                 * @param {Function} transform The rest array transform.
                 * @returns {Function} Returns the new function.
                 */
                function overRest(func, start, transform) {
                  start = nativeMax(
                    start === undefined ? func.length - 1 : start,
                    0
                  );
                  return function () {
                    var args = arguments,
                      index = -1,
                      length = nativeMax(args.length - start, 0),
                      array = Array(length);

                    while (++index < length) {
                      array[index] = args[start + index];
                    }
                    index = -1;
                    var otherArgs = Array(start + 1);
                    while (++index < start) {
                      otherArgs[index] = args[index];
                    }
                    otherArgs[start] = transform(array);
                    return apply(func, this, otherArgs);
                  };
                }

                /**
                 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {string} key The key of the property to get.
                 * @returns {*} Returns the property value.
                 */
                function safeGet(object, key) {
                  if (
                    key === "constructor" &&
                    typeof object[key] === "function"
                  ) {
                    return;
                  }

                  if (key == "__proto__") {
                    return;
                  }

                  return object[key];
                }

                /**
                 * Sets the `toString` method of `func` to return `string`.
                 *
                 * @private
                 * @param {Function} func The function to modify.
                 * @param {Function} string The `toString` result.
                 * @returns {Function} Returns `func`.
                 */
                var setToString = shortOut(baseSetToString);

                /**
                 * Creates a function that'll short out and invoke `identity` instead
                 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
                 * milliseconds.
                 *
                 * @private
                 * @param {Function} func The function to restrict.
                 * @returns {Function} Returns the new shortable function.
                 */
                function shortOut(func) {
                  var count = 0,
                    lastCalled = 0;

                  return function () {
                    var stamp = nativeNow(),
                      remaining = HOT_SPAN - (stamp - lastCalled);

                    lastCalled = stamp;
                    if (remaining > 0) {
                      if (++count >= HOT_COUNT) {
                        return arguments[0];
                      }
                    } else {
                      count = 0;
                    }
                    return func.apply(undefined, arguments);
                  };
                }

                /**
                 * Converts `func` to its source code.
                 *
                 * @private
                 * @param {Function} func The function to convert.
                 * @returns {string} Returns the source code.
                 */
                function toSource(func) {
                  if (func != null) {
                    try {
                      return funcToString.call(func);
                    } catch (e) {}
                    try {
                      return func + "";
                    } catch (e) {}
                  }
                  return "";
                }

                /**
                 * Performs a
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * comparison between two values to determine if they are equivalent.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                 * @example
                 *
                 * var object = { 'a': 1 };
                 * var other = { 'a': 1 };
                 *
                 * _.eq(object, object);
                 * // => true
                 *
                 * _.eq(object, other);
                 * // => false
                 *
                 * _.eq('a', 'a');
                 * // => true
                 *
                 * _.eq('a', Object('a'));
                 * // => false
                 *
                 * _.eq(NaN, NaN);
                 * // => true
                 */
                function eq(value, other) {
                  return (
                    value === other || (value !== value && other !== other)
                  );
                }

                /**
                 * Checks if `value` is likely an `arguments` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                 *  else `false`.
                 * @example
                 *
                 * _.isArguments(function() { return arguments; }());
                 * // => true
                 *
                 * _.isArguments([1, 2, 3]);
                 * // => false
                 */
                var isArguments = baseIsArguments(
                  (function () {
                    return arguments;
                  })()
                )
                  ? baseIsArguments
                  : function (value) {
                      return (
                        isObjectLike(value) &&
                        hasOwnProperty.call(value, "callee") &&
                        !propertyIsEnumerable.call(value, "callee")
                      );
                    };

                /**
                 * Checks if `value` is classified as an `Array` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
                 * @example
                 *
                 * _.isArray([1, 2, 3]);
                 * // => true
                 *
                 * _.isArray(document.body.children);
                 * // => false
                 *
                 * _.isArray('abc');
                 * // => false
                 *
                 * _.isArray(_.noop);
                 * // => false
                 */
                var isArray = Array.isArray;

                /**
                 * Checks if `value` is array-like. A value is considered array-like if it's
                 * not a function and has a `value.length` that's an integer greater than or
                 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
                 * @example
                 *
                 * _.isArrayLike([1, 2, 3]);
                 * // => true
                 *
                 * _.isArrayLike(document.body.children);
                 * // => true
                 *
                 * _.isArrayLike('abc');
                 * // => true
                 *
                 * _.isArrayLike(_.noop);
                 * // => false
                 */
                function isArrayLike(value) {
                  return (
                    value != null &&
                    isLength(value.length) &&
                    !isFunction(value)
                  );
                }

                /**
                 * This method is like `_.isArrayLike` except that it also checks if `value`
                 * is an object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array-like object,
                 *  else `false`.
                 * @example
                 *
                 * _.isArrayLikeObject([1, 2, 3]);
                 * // => true
                 *
                 * _.isArrayLikeObject(document.body.children);
                 * // => true
                 *
                 * _.isArrayLikeObject('abc');
                 * // => false
                 *
                 * _.isArrayLikeObject(_.noop);
                 * // => false
                 */
                function isArrayLikeObject(value) {
                  return isObjectLike(value) && isArrayLike(value);
                }

                /**
                 * Checks if `value` is a buffer.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
                 * @example
                 *
                 * _.isBuffer(new Buffer(2));
                 * // => true
                 *
                 * _.isBuffer(new Uint8Array(2));
                 * // => false
                 */
                var isBuffer = nativeIsBuffer || stubFalse;

                /**
                 * Checks if `value` is classified as a `Function` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
                 * @example
                 *
                 * _.isFunction(_);
                 * // => true
                 *
                 * _.isFunction(/abc/);
                 * // => false
                 */
                function isFunction(value) {
                  if (!isObject(value)) {
                    return false;
                  }
                  // The use of `Object#toString` avoids issues with the `typeof` operator
                  // in Safari 9 which returns 'object' for typed arrays and other constructors.
                  var tag = baseGetTag(value);
                  return (
                    tag == funcTag ||
                    tag == genTag ||
                    tag == asyncTag ||
                    tag == proxyTag
                  );
                }

                /**
                 * Checks if `value` is a valid array-like length.
                 *
                 * **Note:** This method is loosely based on
                 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
                 * @example
                 *
                 * _.isLength(3);
                 * // => true
                 *
                 * _.isLength(Number.MIN_VALUE);
                 * // => false
                 *
                 * _.isLength(Infinity);
                 * // => false
                 *
                 * _.isLength('3');
                 * // => false
                 */
                function isLength(value) {
                  return (
                    typeof value == "number" &&
                    value > -1 &&
                    value % 1 == 0 &&
                    value <= MAX_SAFE_INTEGER
                  );
                }

                /**
                 * Checks if `value` is the
                 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
                 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
                 * @example
                 *
                 * _.isObject({});
                 * // => true
                 *
                 * _.isObject([1, 2, 3]);
                 * // => true
                 *
                 * _.isObject(_.noop);
                 * // => true
                 *
                 * _.isObject(null);
                 * // => false
                 */
                function isObject(value) {
                  var type = typeof value;
                  return (
                    value != null && (type == "object" || type == "function")
                  );
                }

                /**
                 * Checks if `value` is object-like. A value is object-like if it's not `null`
                 * and has a `typeof` result of "object".
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
                 * @example
                 *
                 * _.isObjectLike({});
                 * // => true
                 *
                 * _.isObjectLike([1, 2, 3]);
                 * // => true
                 *
                 * _.isObjectLike(_.noop);
                 * // => false
                 *
                 * _.isObjectLike(null);
                 * // => false
                 */
                function isObjectLike(value) {
                  return value != null && typeof value == "object";
                }

                /**
                 * Checks if `value` is a plain object, that is, an object created by the
                 * `Object` constructor or one with a `[[Prototype]]` of `null`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.8.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 * }
                 *
                 * _.isPlainObject(new Foo);
                 * // => false
                 *
                 * _.isPlainObject([1, 2, 3]);
                 * // => false
                 *
                 * _.isPlainObject({ 'x': 0, 'y': 0 });
                 * // => true
                 *
                 * _.isPlainObject(Object.create(null));
                 * // => true
                 */
                function isPlainObject(value) {
                  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                    return false;
                  }
                  var proto = getPrototype(value);
                  if (proto === null) {
                    return true;
                  }
                  var Ctor =
                    hasOwnProperty.call(proto, "constructor") &&
                    proto.constructor;
                  return (
                    typeof Ctor == "function" &&
                    Ctor instanceof Ctor &&
                    funcToString.call(Ctor) == objectCtorString
                  );
                }

                /**
                 * Checks if `value` is classified as a typed array.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                 * @example
                 *
                 * _.isTypedArray(new Uint8Array);
                 * // => true
                 *
                 * _.isTypedArray([]);
                 * // => false
                 */
                var isTypedArray = nodeIsTypedArray
                  ? baseUnary(nodeIsTypedArray)
                  : baseIsTypedArray;

                /**
                 * Converts `value` to a plain object flattening inherited enumerable string
                 * keyed properties of `value` to own properties of the plain object.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {Object} Returns the converted plain object.
                 * @example
                 *
                 * function Foo() {
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.assign({ 'a': 1 }, new Foo);
                 * // => { 'a': 1, 'b': 2 }
                 *
                 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
                 * // => { 'a': 1, 'b': 2, 'c': 3 }
                 */
                function toPlainObject(value) {
                  return copyObject(value, keysIn(value));
                }

                /**
                 * Creates an array of the own and inherited enumerable property names of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.keysIn(new Foo);
                 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
                 */
                function keysIn(object) {
                  return isArrayLike(object)
                    ? arrayLikeKeys(object, true)
                    : baseKeysIn(object);
                }

                /**
                 * This method is like `_.assign` except that it recursively merges own and
                 * inherited enumerable string keyed properties of source objects into the
                 * destination object. Source properties that resolve to `undefined` are
                 * skipped if a destination value exists. Array and plain object properties
                 * are merged recursively. Other objects and value types are overridden by
                 * assignment. Source objects are applied from left to right. Subsequent
                 * sources overwrite property assignments of previous sources.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.5.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = {
                 *   'a': [{ 'b': 2 }, { 'd': 4 }]
                 * };
                 *
                 * var other = {
                 *   'a': [{ 'c': 3 }, { 'e': 5 }]
                 * };
                 *
                 * _.merge(object, other);
                 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
                 */
                var merge = createAssigner(function (object, source, srcIndex) {
                  baseMerge(object, source, srcIndex);
                });

                /**
                 * Creates a function that returns `value`.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Util
                 * @param {*} value The value to return from the new function.
                 * @returns {Function} Returns the new constant function.
                 * @example
                 *
                 * var objects = _.times(2, _.constant({ 'a': 1 }));
                 *
                 * console.log(objects);
                 * // => [{ 'a': 1 }, { 'a': 1 }]
                 *
                 * console.log(objects[0] === objects[1]);
                 * // => true
                 */
                function constant(value) {
                  return function () {
                    return value;
                  };
                }

                /**
                 * This method returns the first argument it receives.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {*} value Any value.
                 * @returns {*} Returns `value`.
                 * @example
                 *
                 * var object = { 'a': 1 };
                 *
                 * console.log(_.identity(object) === object);
                 * // => true
                 */
                function identity(value) {
                  return value;
                }

                /**
                 * This method returns `false`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {boolean} Returns `false`.
                 * @example
                 *
                 * _.times(2, _.stubFalse);
                 * // => [false, false]
                 */
                function stubFalse() {
                  return false;
                }

                module.exports = merge;
              }).call(this);
            }).call(
              this,
              typeof commonjsGlobal$1 !== "undefined"
                ? commonjsGlobal$1
                : typeof self !== "undefined"
                ? self
                : typeof window !== "undefined"
                ? window
                : {}
            );
          },
          {},
        ],
        2: [
          function (require, module, exports) {
            /*! For license information please see shifty.js.LICENSE.txt */
            !(function (t, n) {
              "object" == typeof exports && "object" == typeof module
                ? (module.exports = n())
                : "object" == typeof exports
                ? (exports.shifty = n())
                : (t.shifty = n());
            })(self, function () {
              return (function () {
                var t = {
                    720: function (t, n, e) {
                      e.r(n),
                        e.d(n, {
                          Scene: function () {
                            return sn;
                          },
                          Tweenable: function () {
                            return kt;
                          },
                          interpolate: function () {
                            return nn;
                          },
                          processTweens: function () {
                            return dt;
                          },
                          setBezierFunction: function () {
                            return $;
                          },
                          shouldScheduleUpdate: function () {
                            return bt;
                          },
                          tween: function () {
                            return Pt;
                          },
                          unsetBezierFunction: function () {
                            return L;
                          },
                        });
                      var r = {};
                      e.r(r),
                        e.d(r, {
                          bounce: function () {
                            return D;
                          },
                          bouncePast: function () {
                            return q;
                          },
                          easeFrom: function () {
                            return B;
                          },
                          easeFromTo: function () {
                            return Q;
                          },
                          easeInBack: function () {
                            return E;
                          },
                          easeInCirc: function () {
                            return j;
                          },
                          easeInCubic: function () {
                            return c;
                          },
                          easeInExpo: function () {
                            return w;
                          },
                          easeInOutBack: function () {
                            return T;
                          },
                          easeInOutCirc: function () {
                            return P;
                          },
                          easeInOutCubic: function () {
                            return l;
                          },
                          easeInOutExpo: function () {
                            return S;
                          },
                          easeInOutQuad: function () {
                            return s;
                          },
                          easeInOutQuart: function () {
                            return v;
                          },
                          easeInOutQuint: function () {
                            return d;
                          },
                          easeInOutSine: function () {
                            return b;
                          },
                          easeInQuad: function () {
                            return u;
                          },
                          easeInQuart: function () {
                            return h;
                          },
                          easeInQuint: function () {
                            return y;
                          },
                          easeInSine: function () {
                            return g;
                          },
                          easeOutBack: function () {
                            return A;
                          },
                          easeOutBounce: function () {
                            return M;
                          },
                          easeOutCirc: function () {
                            return k;
                          },
                          easeOutCubic: function () {
                            return f;
                          },
                          easeOutExpo: function () {
                            return O;
                          },
                          easeOutQuad: function () {
                            return a;
                          },
                          easeOutQuart: function () {
                            return p;
                          },
                          easeOutQuint: function () {
                            return _;
                          },
                          easeOutSine: function () {
                            return m;
                          },
                          easeTo: function () {
                            return N;
                          },
                          elastic: function () {
                            return I;
                          },
                          linear: function () {
                            return o;
                          },
                          swingFrom: function () {
                            return x;
                          },
                          swingFromTo: function () {
                            return F;
                          },
                          swingTo: function () {
                            return C;
                          },
                        });
                      var i = {};
                      e.r(i),
                        e.d(i, {
                          afterTween: function () {
                            return Jt;
                          },
                          beforeTween: function () {
                            return Ht;
                          },
                          doesApply: function () {
                            return Wt;
                          },
                          tweenCreated: function () {
                            return Gt;
                          },
                        });
                      var o = function (t) {
                          return t;
                        },
                        u = function (t) {
                          return Math.pow(t, 2);
                        },
                        a = function (t) {
                          return -(Math.pow(t - 1, 2) - 1);
                        },
                        s = function (t) {
                          return (t /= 0.5) < 1
                            ? 0.5 * Math.pow(t, 2)
                            : -0.5 * ((t -= 2) * t - 2);
                        },
                        c = function (t) {
                          return Math.pow(t, 3);
                        },
                        f = function (t) {
                          return Math.pow(t - 1, 3) + 1;
                        },
                        l = function (t) {
                          return (t /= 0.5) < 1
                            ? 0.5 * Math.pow(t, 3)
                            : 0.5 * (Math.pow(t - 2, 3) + 2);
                        },
                        h = function (t) {
                          return Math.pow(t, 4);
                        },
                        p = function (t) {
                          return -(Math.pow(t - 1, 4) - 1);
                        },
                        v = function (t) {
                          return (t /= 0.5) < 1
                            ? 0.5 * Math.pow(t, 4)
                            : -0.5 * ((t -= 2) * Math.pow(t, 3) - 2);
                        },
                        y = function (t) {
                          return Math.pow(t, 5);
                        },
                        _ = function (t) {
                          return Math.pow(t - 1, 5) + 1;
                        },
                        d = function (t) {
                          return (t /= 0.5) < 1
                            ? 0.5 * Math.pow(t, 5)
                            : 0.5 * (Math.pow(t - 2, 5) + 2);
                        },
                        g = function (t) {
                          return 1 - Math.cos(t * (Math.PI / 2));
                        },
                        m = function (t) {
                          return Math.sin(t * (Math.PI / 2));
                        },
                        b = function (t) {
                          return -0.5 * (Math.cos(Math.PI * t) - 1);
                        },
                        w = function (t) {
                          return 0 === t ? 0 : Math.pow(2, 10 * (t - 1));
                        },
                        O = function (t) {
                          return 1 === t ? 1 : 1 - Math.pow(2, -10 * t);
                        },
                        S = function (t) {
                          return 0 === t
                            ? 0
                            : 1 === t
                            ? 1
                            : (t /= 0.5) < 1
                            ? 0.5 * Math.pow(2, 10 * (t - 1))
                            : 0.5 * (2 - Math.pow(2, -10 * --t));
                        },
                        j = function (t) {
                          return -(Math.sqrt(1 - t * t) - 1);
                        },
                        k = function (t) {
                          return Math.sqrt(1 - Math.pow(t - 1, 2));
                        },
                        P = function (t) {
                          return (t /= 0.5) < 1
                            ? -0.5 * (Math.sqrt(1 - t * t) - 1)
                            : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
                        },
                        M = function (t) {
                          return t < 1 / 2.75
                            ? 7.5625 * t * t
                            : t < 2 / 2.75
                            ? 7.5625 * (t -= 1.5 / 2.75) * t + 0.75
                            : t < 2.5 / 2.75
                            ? 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375
                            : 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;
                        },
                        E = function (t) {
                          var n = 1.70158;
                          return t * t * ((n + 1) * t - n);
                        },
                        A = function (t) {
                          var n = 1.70158;
                          return (t -= 1) * t * ((n + 1) * t + n) + 1;
                        },
                        T = function (t) {
                          var n = 1.70158;
                          return (t /= 0.5) < 1
                            ? t * t * ((1 + (n *= 1.525)) * t - n) * 0.5
                            : 0.5 *
                                ((t -= 2) * t * ((1 + (n *= 1.525)) * t + n) +
                                  2);
                        },
                        I = function (t) {
                          return (
                            -1 *
                              Math.pow(4, -8 * t) *
                              Math.sin(((6 * t - 1) * (2 * Math.PI)) / 2) +
                            1
                          );
                        },
                        F = function (t) {
                          var n = 1.70158;
                          return (t /= 0.5) < 1
                            ? t * t * ((1 + (n *= 1.525)) * t - n) * 0.5
                            : 0.5 *
                                ((t -= 2) * t * ((1 + (n *= 1.525)) * t + n) +
                                  2);
                        },
                        x = function (t) {
                          var n = 1.70158;
                          return t * t * ((n + 1) * t - n);
                        },
                        C = function (t) {
                          var n = 1.70158;
                          return (t -= 1) * t * ((n + 1) * t + n) + 1;
                        },
                        D = function (t) {
                          return t < 1 / 2.75
                            ? 7.5625 * t * t
                            : t < 2 / 2.75
                            ? 7.5625 * (t -= 1.5 / 2.75) * t + 0.75
                            : t < 2.5 / 2.75
                            ? 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375
                            : 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;
                        },
                        q = function (t) {
                          return t < 1 / 2.75
                            ? 7.5625 * t * t
                            : t < 2 / 2.75
                            ? 2 - (7.5625 * (t -= 1.5 / 2.75) * t + 0.75)
                            : t < 2.5 / 2.75
                            ? 2 - (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375)
                            : 2 - (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375);
                        },
                        Q = function (t) {
                          return (t /= 0.5) < 1
                            ? 0.5 * Math.pow(t, 4)
                            : -0.5 * ((t -= 2) * Math.pow(t, 3) - 2);
                        },
                        B = function (t) {
                          return Math.pow(t, 4);
                        },
                        N = function (t) {
                          return Math.pow(t, 0.25);
                        };
                      function R(t, n, e, r, i, o) {
                        var u,
                          a,
                          s,
                          c,
                          f,
                          l = 0,
                          h = 0,
                          p = 0,
                          v = function (t) {
                            return ((l * t + h) * t + p) * t;
                          },
                          y = function (t) {
                            return (3 * l * t + 2 * h) * t + p;
                          },
                          _ = function (t) {
                            return t >= 0 ? t : 0 - t;
                          };
                        return (
                          (l = 1 - (p = 3 * n) - (h = 3 * (r - n) - p)),
                          (s = 1 - (f = 3 * e) - (c = 3 * (i - e) - f)),
                          (u = t),
                          (a = (function (t) {
                            return 1 / (200 * t);
                          })(o)),
                          (function (t) {
                            return ((s * t + c) * t + f) * t;
                          })(
                            (function (t, n) {
                              var e, r, i, o, u, a;
                              for (i = t, a = 0; a < 8; a++) {
                                if (((o = v(i) - t), _(o) < n)) return i;
                                if (((u = y(i)), _(u) < 1e-6)) break;
                                i -= o / u;
                              }
                              if ((i = t) < (e = 0)) return e;
                              if (i > (r = 1)) return r;
                              for (; e < r; ) {
                                if (((o = v(i)), _(o - t) < n)) return i;
                                t > o ? (e = i) : (r = i),
                                  (i = 0.5 * (r - e) + e);
                              }
                              return i;
                            })(u, a)
                          )
                        );
                      }
                      var z,
                        U = function () {
                          var t =
                              arguments.length > 0 && void 0 !== arguments[0]
                                ? arguments[0]
                                : 0.25,
                            n =
                              arguments.length > 1 && void 0 !== arguments[1]
                                ? arguments[1]
                                : 0.25,
                            e =
                              arguments.length > 2 && void 0 !== arguments[2]
                                ? arguments[2]
                                : 0.75,
                            r =
                              arguments.length > 3 && void 0 !== arguments[3]
                                ? arguments[3]
                                : 0.75;
                          return function (i) {
                            return R(i, t, n, e, r, 1);
                          };
                        },
                        $ = function (t, n, e, r, i) {
                          var o = U(n, e, r, i);
                          return (
                            (o.displayName = t),
                            (o.x1 = n),
                            (o.y1 = e),
                            (o.x2 = r),
                            (o.y2 = i),
                            (kt.formulas[t] = o)
                          );
                        },
                        L = function (t) {
                          return delete kt.formulas[t];
                        };
                      function V(t, n) {
                        if (!(t instanceof n))
                          throw new TypeError(
                            "Cannot call a class as a function"
                          );
                      }
                      function W(t, n) {
                        for (var e = 0; e < n.length; e++) {
                          var r = n[e];
                          (r.enumerable = r.enumerable || !1),
                            (r.configurable = !0),
                            "value" in r && (r.writable = !0),
                            Object.defineProperty(t, r.key, r);
                        }
                      }
                      function G(t) {
                        return (
                          (G =
                            "function" == typeof Symbol &&
                            "symbol" == typeof Symbol.iterator
                              ? function (t) {
                                  return typeof t;
                                }
                              : function (t) {
                                  return t &&
                                    "function" == typeof Symbol &&
                                    t.constructor === Symbol &&
                                    t !== Symbol.prototype
                                    ? "symbol"
                                    : typeof t;
                                }),
                          G(t)
                        );
                      }
                      function H(t) {
                        return (
                          (function (t) {
                            if (Array.isArray(t)) return J(t);
                          })(t) ||
                          (function (t) {
                            if (
                              "undefined" != typeof Symbol &&
                              Symbol.iterator in Object(t)
                            )
                              return Array.from(t);
                          })(t) ||
                          (function (t, n) {
                            if (t) {
                              if ("string" == typeof t) return J(t, n);
                              var e = Object.prototype.toString
                                .call(t)
                                .slice(8, -1);
                              return (
                                "Object" === e &&
                                  t.constructor &&
                                  (e = t.constructor.name),
                                "Map" === e || "Set" === e
                                  ? Array.from(t)
                                  : "Arguments" === e ||
                                    /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(
                                      e
                                    )
                                  ? J(t, n)
                                  : void 0
                              );
                            }
                          })(t) ||
                          (function () {
                            throw new TypeError(
                              "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                            );
                          })()
                        );
                      }
                      function J(t, n) {
                        (null == n || n > t.length) && (n = t.length);
                        for (var e = 0, r = new Array(n); e < n; e++)
                          r[e] = t[e];
                        return r;
                      }
                      function K(t, n) {
                        var e = Object.keys(t);
                        if (Object.getOwnPropertySymbols) {
                          var r = Object.getOwnPropertySymbols(t);
                          n &&
                            (r = r.filter(function (n) {
                              return Object.getOwnPropertyDescriptor(
                                t,
                                n
                              ).enumerable;
                            })),
                            e.push.apply(e, r);
                        }
                        return e;
                      }
                      function X(t) {
                        for (var n = 1; n < arguments.length; n++) {
                          var e = null != arguments[n] ? arguments[n] : {};
                          n % 2
                            ? K(Object(e), !0).forEach(function (n) {
                                Y(t, n, e[n]);
                              })
                            : Object.getOwnPropertyDescriptors
                            ? Object.defineProperties(
                                t,
                                Object.getOwnPropertyDescriptors(e)
                              )
                            : K(Object(e)).forEach(function (n) {
                                Object.defineProperty(
                                  t,
                                  n,
                                  Object.getOwnPropertyDescriptor(e, n)
                                );
                              });
                        }
                        return t;
                      }
                      function Y(t, n, e) {
                        return (
                          n in t
                            ? Object.defineProperty(t, n, {
                                value: e,
                                enumerable: !0,
                                configurable: !0,
                                writable: !0,
                              })
                            : (t[n] = e),
                          t
                        );
                      }
                      var Z,
                        tt,
                        nt,
                        et = "linear",
                        rt = "undefined" != typeof window ? window : e.g,
                        it = "afterTween",
                        ot = "afterTweenEnd",
                        ut = "beforeTween",
                        at = "tweenCreated",
                        st = "function",
                        ct = "string",
                        ft =
                          rt.requestAnimationFrame ||
                          rt.webkitRequestAnimationFrame ||
                          rt.oRequestAnimationFrame ||
                          rt.msRequestAnimationFrame ||
                          (rt.mozCancelRequestAnimationFrame &&
                            rt.mozRequestAnimationFrame) ||
                          setTimeout,
                        lt = function () {},
                        ht = null,
                        pt = null,
                        vt = X({}, r),
                        yt = function (t, n, e, r, i, o, u) {
                          var a,
                            s,
                            c,
                            f = t < o ? 0 : (t - o) / i,
                            l = !1;
                          for (var h in (u && u.call && ((l = !0), (a = u(f))),
                          n))
                            l || (a = ((s = u[h]).call ? s : vt[s])(f)),
                              (c = e[h]),
                              (n[h] = c + (r[h] - c) * a);
                          return n;
                        },
                        _t = function (t, n) {
                          var e = t._timestamp,
                            r = t._currentState,
                            i = t._delay;
                          if (!(n < e + i)) {
                            var o = t._duration,
                              u = t._targetState,
                              a = e + i + o,
                              s = n > a ? a : n;
                            t._hasEnded = s >= a;
                            var c = o - (a - s),
                              f = t._filters.length > 0;
                            if (t._hasEnded)
                              return t._render(u, t._data, c), t.stop(!0);
                            f && t._applyFilter(ut),
                              s < e + i ? (e = o = s = 1) : (e += i),
                              yt(s, r, t._originalState, u, o, e, t._easing),
                              f && t._applyFilter(it),
                              t._render(r, t._data, c);
                          }
                        },
                        dt = function () {
                          for (var t, n = kt.now(), e = ht; e; )
                            (t = e._next), _t(e, n), (e = t);
                        },
                        gt =
                          Date.now ||
                          function () {
                            return +new Date();
                          },
                        mt = !1,
                        bt = function (t) {
                          (t && mt) || ((mt = t), t && wt());
                        },
                        wt = function t() {
                          (Z = gt()),
                            mt && ft.call(rt, t, 16.666666666666668),
                            dt();
                        },
                        Ot = function (t) {
                          var n =
                              arguments.length > 1 && void 0 !== arguments[1]
                                ? arguments[1]
                                : et,
                            e =
                              arguments.length > 2 && void 0 !== arguments[2]
                                ? arguments[2]
                                : {};
                          if (Array.isArray(n)) {
                            var r = U.apply(void 0, H(n));
                            return r;
                          }
                          var i = G(n);
                          if (vt[n]) return vt[n];
                          if (i === ct || i === st) for (var o in t) e[o] = n;
                          else for (var u in t) e[u] = n[u] || et;
                          return e;
                        },
                        St = function (t) {
                          t === ht
                            ? (ht = t._next)
                              ? (ht._previous = null)
                              : (pt = null)
                            : t === pt
                            ? (pt = t._previous)
                              ? (pt._next = null)
                              : (ht = null)
                            : ((tt = t._previous),
                              (nt = t._next),
                              (tt._next = nt),
                              (nt._previous = tt)),
                            (t._previous = t._next = null);
                        },
                        jt = "function" == typeof Promise ? Promise : null;
                      z = Symbol.toStringTag;
                      var kt = (function () {
                        function t() {
                          var n =
                              arguments.length > 0 && void 0 !== arguments[0]
                                ? arguments[0]
                                : {},
                            e =
                              arguments.length > 1 && void 0 !== arguments[1]
                                ? arguments[1]
                                : void 0;
                          V(this, t),
                            Y(this, z, "Promise"),
                            (this._config = {}),
                            (this._data = {}),
                            (this._delay = 0),
                            (this._filters = []),
                            (this._next = null),
                            (this._previous = null),
                            (this._timestamp = null),
                            (this._hasEnded = !1),
                            (this._resolve = null),
                            (this._reject = null),
                            (this._currentState = n || {}),
                            (this._originalState = {}),
                            (this._targetState = {}),
                            (this._start = lt),
                            (this._render = lt),
                            (this._promiseCtor = jt),
                            e && this.setConfig(e);
                        }
                        var n, e;
                        return (
                          (n = t),
                          (e = [
                            {
                              key: "_applyFilter",
                              value: function (t) {
                                for (var n = this._filters.length; n > 0; n--) {
                                  var e = this._filters[n - n][t];
                                  e && e(this);
                                }
                              },
                            },
                            {
                              key: "tween",
                              value: function () {
                                var n =
                                  arguments.length > 0 &&
                                  void 0 !== arguments[0]
                                    ? arguments[0]
                                    : void 0;
                                return (
                                  this._isPlaying && this.stop(),
                                  (!n && this._config) || this.setConfig(n),
                                  (this._pausedAtTime = null),
                                  (this._timestamp = t.now()),
                                  this._start(this.get(), this._data),
                                  this._delay &&
                                    this._render(
                                      this._currentState,
                                      this._data,
                                      0
                                    ),
                                  this._resume(this._timestamp)
                                );
                              },
                            },
                            {
                              key: "setConfig",
                              value: function () {
                                var n =
                                    arguments.length > 0 &&
                                    void 0 !== arguments[0]
                                      ? arguments[0]
                                      : {},
                                  e = this._config;
                                for (var r in n) e[r] = n[r];
                                var i = e.promise,
                                  o = void 0 === i ? this._promiseCtor : i,
                                  u = e.start,
                                  a = void 0 === u ? lt : u,
                                  s = e.finish,
                                  c = e.render,
                                  f =
                                    void 0 === c ? this._config.step || lt : c,
                                  l = e.step,
                                  h = void 0 === l ? lt : l;
                                (this._data =
                                  e.data || e.attachment || this._data),
                                  (this._isPlaying = !1),
                                  (this._pausedAtTime = null),
                                  (this._scheduleId = null),
                                  (this._delay = n.delay || 0),
                                  (this._start = a),
                                  (this._render = f || h),
                                  (this._duration = e.duration || 500),
                                  (this._promiseCtor = o),
                                  s && (this._resolve = s);
                                var p = n.from,
                                  v = n.to,
                                  y = void 0 === v ? {} : v,
                                  _ = this._currentState,
                                  d = this._originalState,
                                  g = this._targetState;
                                for (var m in p) _[m] = p[m];
                                var b = !1;
                                for (var w in _) {
                                  var O = _[w];
                                  b || G(O) !== ct || (b = !0),
                                    (d[w] = O),
                                    (g[w] = y.hasOwnProperty(w) ? y[w] : O);
                                }
                                if (
                                  ((this._easing = Ot(
                                    this._currentState,
                                    e.easing,
                                    this._easing
                                  )),
                                  (this._filters.length = 0),
                                  b)
                                ) {
                                  for (var S in t.filters)
                                    t.filters[S].doesApply(this) &&
                                      this._filters.push(t.filters[S]);
                                  this._applyFilter(at);
                                }
                                return this;
                              },
                            },
                            {
                              key: "then",
                              value: function (t, n) {
                                var e = this;
                                return (
                                  (this._promise = new this._promiseCtor(
                                    function (t, n) {
                                      (e._resolve = t), (e._reject = n);
                                    }
                                  )),
                                  this._promise.then(t, n)
                                );
                              },
                            },
                            {
                              key: "catch",
                              value: function (t) {
                                return this.then().catch(t);
                              },
                            },
                            {
                              key: "finally",
                              value: function (t) {
                                return this.then().finally(t);
                              },
                            },
                            {
                              key: "get",
                              value: function () {
                                return X({}, this._currentState);
                              },
                            },
                            {
                              key: "set",
                              value: function (t) {
                                this._currentState = t;
                              },
                            },
                            {
                              key: "pause",
                              value: function () {
                                if (this._isPlaying)
                                  return (
                                    (this._pausedAtTime = t.now()),
                                    (this._isPlaying = !1),
                                    St(this),
                                    this
                                  );
                              },
                            },
                            {
                              key: "resume",
                              value: function () {
                                return this._resume();
                              },
                            },
                            {
                              key: "_resume",
                              value: function () {
                                var n =
                                  arguments.length > 0 &&
                                  void 0 !== arguments[0]
                                    ? arguments[0]
                                    : t.now();
                                return null === this._timestamp
                                  ? this.tween()
                                  : this._isPlaying
                                  ? this._promise
                                  : (this._pausedAtTime &&
                                      ((this._timestamp +=
                                        n - this._pausedAtTime),
                                      (this._pausedAtTime = null)),
                                    (this._isPlaying = !0),
                                    null === ht
                                      ? ((ht = this), (pt = this))
                                      : ((this._previous = pt),
                                        (pt._next = this),
                                        (pt = this)),
                                    this);
                              },
                            },
                            {
                              key: "seek",
                              value: function (n) {
                                n = Math.max(n, 0);
                                var e = t.now();
                                return (
                                  this._timestamp + n === 0 ||
                                    ((this._timestamp = e - n), _t(this, e)),
                                  this
                                );
                              },
                            },
                            {
                              key: "stop",
                              value: function () {
                                var t =
                                  arguments.length > 0 &&
                                  void 0 !== arguments[0] &&
                                  arguments[0];
                                if (!this._isPlaying) return this;
                                (this._isPlaying = !1), St(this);
                                var n = this._filters.length > 0;
                                return (
                                  t &&
                                    (n && this._applyFilter(ut),
                                    yt(
                                      1,
                                      this._currentState,
                                      this._originalState,
                                      this._targetState,
                                      1,
                                      0,
                                      this._easing
                                    ),
                                    n &&
                                      (this._applyFilter(it),
                                      this._applyFilter(ot))),
                                  this._resolve &&
                                    this._resolve({
                                      data: this._data,
                                      state: this._currentState,
                                      tweenable: this,
                                    }),
                                  (this._resolve = null),
                                  (this._reject = null),
                                  this
                                );
                              },
                            },
                            {
                              key: "cancel",
                              value: function () {
                                var t =
                                    arguments.length > 0 &&
                                    void 0 !== arguments[0] &&
                                    arguments[0],
                                  n = this._currentState,
                                  e = this._data,
                                  r = this._isPlaying;
                                return r
                                  ? (this._reject &&
                                      this._reject({
                                        data: e,
                                        state: n,
                                        tweenable: this,
                                      }),
                                    (this._resolve = null),
                                    (this._reject = null),
                                    this.stop(t))
                                  : this;
                              },
                            },
                            {
                              key: "isPlaying",
                              value: function () {
                                return this._isPlaying;
                              },
                            },
                            {
                              key: "hasEnded",
                              value: function () {
                                return this._hasEnded;
                              },
                            },
                            {
                              key: "setScheduleFunction",
                              value: function (n) {
                                t.setScheduleFunction(n);
                              },
                            },
                            {
                              key: "data",
                              value: function () {
                                var t =
                                  arguments.length > 0 &&
                                  void 0 !== arguments[0]
                                    ? arguments[0]
                                    : null;
                                return t && (this._data = X({}, t)), this._data;
                              },
                            },
                            {
                              key: "dispose",
                              value: function () {
                                for (var t in this) delete this[t];
                              },
                            },
                          ]),
                          e && W(n.prototype, e),
                          t
                        );
                      })();
                      function Pt() {
                        var t =
                            arguments.length > 0 && void 0 !== arguments[0]
                              ? arguments[0]
                              : {},
                          n = new kt();
                        return n.tween(t), (n.tweenable = n), n;
                      }
                      Y(kt, "now", function () {
                        return Z;
                      }),
                        Y(kt, "setScheduleFunction", function (t) {
                          return (ft = t);
                        }),
                        Y(kt, "filters", {}),
                        Y(kt, "formulas", vt),
                        bt(!0);
                      var Mt,
                        Et,
                        At = /(\d|-|\.)/,
                        Tt = /([^\-0-9.]+)/g,
                        It = /[0-9.-]+/g,
                        Ft =
                          ((Mt = It.source),
                          (Et = /,\s*/.source),
                          new RegExp(
                            "rgba?\\("
                              .concat(Mt)
                              .concat(Et)
                              .concat(Mt)
                              .concat(Et)
                              .concat(Mt, "(")
                              .concat(Et)
                              .concat(Mt, ")?\\)"),
                            "g"
                          )),
                        xt = /^.*\(/,
                        Ct = /#([0-9]|[a-f]){3,6}/gi,
                        Dt = "VAL",
                        qt = function (t, n) {
                          return t.map(function (t, e) {
                            return "_".concat(n, "_").concat(e);
                          });
                        };
                      function Qt(t) {
                        return parseInt(t, 16);
                      }
                      var Bt = function (t) {
                          return "rgb(".concat(
                            ((n = t),
                            3 === (n = n.replace(/#/, "")).length &&
                              (n =
                                (n = n.split(""))[0] +
                                n[0] +
                                n[1] +
                                n[1] +
                                n[2] +
                                n[2]),
                            [
                              Qt(n.substr(0, 2)),
                              Qt(n.substr(2, 2)),
                              Qt(n.substr(4, 2)),
                            ]).join(","),
                            ")"
                          );
                          var n;
                        },
                        Nt = function (t, n, e) {
                          var r = n.match(t),
                            i = n.replace(t, Dt);
                          return (
                            r &&
                              r.forEach(function (t) {
                                return (i = i.replace(Dt, e(t)));
                              }),
                            i
                          );
                        },
                        Rt = function (t) {
                          for (var n in t) {
                            var e = t[n];
                            "string" == typeof e &&
                              e.match(Ct) &&
                              (t[n] = Nt(Ct, e, Bt));
                          }
                        },
                        zt = function (t) {
                          var n = t.match(It),
                            e = n.slice(0, 3).map(Math.floor),
                            r = t.match(xt)[0];
                          if (3 === n.length)
                            return "".concat(r).concat(e.join(","), ")");
                          if (4 === n.length)
                            return ""
                              .concat(r)
                              .concat(e.join(","), ",")
                              .concat(n[3], ")");
                          throw new Error("Invalid rgbChunk: ".concat(t));
                        },
                        Ut = function (t) {
                          return t.match(It);
                        },
                        $t = function (t, n) {
                          var e = {};
                          return (
                            n.forEach(function (n) {
                              (e[n] = t[n]), delete t[n];
                            }),
                            e
                          );
                        },
                        Lt = function (t, n) {
                          return n.map(function (n) {
                            return t[n];
                          });
                        },
                        Vt = function (t, n) {
                          return (
                            n.forEach(function (n) {
                              return (t = t.replace(Dt, +n.toFixed(4)));
                            }),
                            t
                          );
                        },
                        Wt = function (t) {
                          for (var n in t._currentState)
                            if ("string" == typeof t._currentState[n])
                              return !0;
                          return !1;
                        };
                      function Gt(t) {
                        var n = t._currentState;
                        [n, t._originalState, t._targetState].forEach(Rt),
                          (t._tokenData = (function (t) {
                            var n,
                              e,
                              r = {};
                            for (var i in t) {
                              var o = t[i];
                              "string" == typeof o &&
                                (r[i] = {
                                  formatString:
                                    ((n = o),
                                    (e = void 0),
                                    (e = n.match(Tt)),
                                    e
                                      ? (1 === e.length ||
                                          n.charAt(0).match(At)) &&
                                        e.unshift("")
                                      : (e = ["", ""]),
                                    e.join(Dt)),
                                  chunkNames: qt(Ut(o), i),
                                });
                            }
                            return r;
                          })(n));
                      }
                      function Ht(t) {
                        var n = t._currentState,
                          e = t._originalState,
                          r = t._targetState,
                          i = t._easing,
                          o = t._tokenData;
                        !(function (t, n) {
                          var e = function (e) {
                            var r = n[e].chunkNames,
                              i = t[e];
                            if ("string" == typeof i) {
                              var o = i.split(" "),
                                u = o[o.length - 1];
                              r.forEach(function (n, e) {
                                return (t[n] = o[e] || u);
                              });
                            } else
                              r.forEach(function (n) {
                                return (t[n] = i);
                              });
                            delete t[e];
                          };
                          for (var r in n) e(r);
                        })(i, o),
                          [n, e, r].forEach(function (t) {
                            return (function (t, n) {
                              var e = function (e) {
                                Ut(t[e]).forEach(function (r, i) {
                                  return (t[n[e].chunkNames[i]] = +r);
                                }),
                                  delete t[e];
                              };
                              for (var r in n) e(r);
                            })(t, o);
                          });
                      }
                      function Jt(t) {
                        var n = t._currentState,
                          e = t._originalState,
                          r = t._targetState,
                          i = t._easing,
                          o = t._tokenData;
                        [n, e, r].forEach(function (t) {
                          return (function (t, n) {
                            for (var e in n) {
                              var r = n[e],
                                i = r.chunkNames,
                                o = r.formatString,
                                u = Vt(o, Lt($t(t, i), i));
                              t[e] = Nt(Ft, u, zt);
                            }
                          })(t, o);
                        }),
                          (function (t, n) {
                            for (var e in n) {
                              var r = n[e].chunkNames,
                                i = t[r[0]];
                              t[e] =
                                "string" == typeof i
                                  ? r
                                      .map(function (n) {
                                        var e = t[n];
                                        return delete t[n], e;
                                      })
                                      .join(" ")
                                  : i;
                            }
                          })(i, o);
                      }
                      function Kt(t, n) {
                        var e = Object.keys(t);
                        if (Object.getOwnPropertySymbols) {
                          var r = Object.getOwnPropertySymbols(t);
                          n &&
                            (r = r.filter(function (n) {
                              return Object.getOwnPropertyDescriptor(
                                t,
                                n
                              ).enumerable;
                            })),
                            e.push.apply(e, r);
                        }
                        return e;
                      }
                      function Xt(t) {
                        for (var n = 1; n < arguments.length; n++) {
                          var e = null != arguments[n] ? arguments[n] : {};
                          n % 2
                            ? Kt(Object(e), !0).forEach(function (n) {
                                Yt(t, n, e[n]);
                              })
                            : Object.getOwnPropertyDescriptors
                            ? Object.defineProperties(
                                t,
                                Object.getOwnPropertyDescriptors(e)
                              )
                            : Kt(Object(e)).forEach(function (n) {
                                Object.defineProperty(
                                  t,
                                  n,
                                  Object.getOwnPropertyDescriptor(e, n)
                                );
                              });
                        }
                        return t;
                      }
                      function Yt(t, n, e) {
                        return (
                          n in t
                            ? Object.defineProperty(t, n, {
                                value: e,
                                enumerable: !0,
                                configurable: !0,
                                writable: !0,
                              })
                            : (t[n] = e),
                          t
                        );
                      }
                      var Zt = new kt(),
                        tn = kt.filters,
                        nn = function (t, n, e, r) {
                          var i =
                              arguments.length > 4 && void 0 !== arguments[4]
                                ? arguments[4]
                                : 0,
                            o = Xt({}, t),
                            u = Ot(t, r);
                          for (var a in ((Zt._filters.length = 0),
                          Zt.set({}),
                          (Zt._currentState = o),
                          (Zt._originalState = t),
                          (Zt._targetState = n),
                          (Zt._easing = u),
                          tn))
                            tn[a].doesApply(Zt) && Zt._filters.push(tn[a]);
                          Zt._applyFilter("tweenCreated"),
                            Zt._applyFilter("beforeTween");
                          var s = yt(e, o, t, n, 1, i, u);
                          return Zt._applyFilter("afterTween"), s;
                        };
                      function en(t, n) {
                        (null == n || n > t.length) && (n = t.length);
                        for (var e = 0, r = new Array(n); e < n; e++)
                          r[e] = t[e];
                        return r;
                      }
                      function rn(t, n) {
                        if (!(t instanceof n))
                          throw new TypeError(
                            "Cannot call a class as a function"
                          );
                      }
                      function on(t, n) {
                        for (var e = 0; e < n.length; e++) {
                          var r = n[e];
                          (r.enumerable = r.enumerable || !1),
                            (r.configurable = !0),
                            "value" in r && (r.writable = !0),
                            Object.defineProperty(t, r.key, r);
                        }
                      }
                      function un(t, n) {
                        var e = n.get(t);
                        if (!e)
                          throw new TypeError(
                            "attempted to get private field on non-instance"
                          );
                        return e.get ? e.get.call(t) : e.value;
                      }
                      var an = new WeakMap(),
                        sn = (function () {
                          function t() {
                            rn(this, t),
                              an.set(this, { writable: !0, value: [] });
                            for (
                              var n = arguments.length, e = new Array(n), r = 0;
                              r < n;
                              r++
                            )
                              e[r] = arguments[r];
                            e.forEach(this.add.bind(this));
                          }
                          var n, e;
                          return (
                            (n = t),
                            (e = [
                              {
                                key: "add",
                                value: function (t) {
                                  return un(this, an).push(t), t;
                                },
                              },
                              {
                                key: "remove",
                                value: function (t) {
                                  var n = un(this, an).indexOf(t);
                                  return ~n && un(this, an).splice(n, 1), t;
                                },
                              },
                              {
                                key: "empty",
                                value: function () {
                                  return this.tweenables.map(
                                    this.remove.bind(this)
                                  );
                                },
                              },
                              {
                                key: "isPlaying",
                                value: function () {
                                  return un(this, an).some(function (t) {
                                    return t.isPlaying();
                                  });
                                },
                              },
                              {
                                key: "play",
                                value: function () {
                                  return (
                                    un(this, an).forEach(function (t) {
                                      return t.tween();
                                    }),
                                    this
                                  );
                                },
                              },
                              {
                                key: "pause",
                                value: function () {
                                  return (
                                    un(this, an).forEach(function (t) {
                                      return t.pause();
                                    }),
                                    this
                                  );
                                },
                              },
                              {
                                key: "resume",
                                value: function () {
                                  return (
                                    this.playingTweenables.forEach(function (
                                      t
                                    ) {
                                      return t.resume();
                                    }),
                                    this
                                  );
                                },
                              },
                              {
                                key: "stop",
                                value: function (t) {
                                  return (
                                    un(this, an).forEach(function (n) {
                                      return n.stop(t);
                                    }),
                                    this
                                  );
                                },
                              },
                              {
                                key: "tweenables",
                                get: function () {
                                  return (
                                    (function (t) {
                                      if (Array.isArray(t)) return en(t);
                                    })((t = un(this, an))) ||
                                    (function (t) {
                                      if (
                                        "undefined" != typeof Symbol &&
                                        Symbol.iterator in Object(t)
                                      )
                                        return Array.from(t);
                                    })(t) ||
                                    (function (t, n) {
                                      if (t) {
                                        if ("string" == typeof t)
                                          return en(t, n);
                                        var e = Object.prototype.toString
                                          .call(t)
                                          .slice(8, -1);
                                        return (
                                          "Object" === e &&
                                            t.constructor &&
                                            (e = t.constructor.name),
                                          "Map" === e || "Set" === e
                                            ? Array.from(t)
                                            : "Arguments" === e ||
                                              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(
                                                e
                                              )
                                            ? en(t, n)
                                            : void 0
                                        );
                                      }
                                    })(t) ||
                                    (function () {
                                      throw new TypeError(
                                        "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                                      );
                                    })()
                                  );
                                  var t;
                                },
                              },
                              {
                                key: "playingTweenables",
                                get: function () {
                                  return un(this, an).filter(function (t) {
                                    return !t.hasEnded();
                                  });
                                },
                              },
                              {
                                key: "promises",
                                get: function () {
                                  return un(this, an).map(function (t) {
                                    return t.then();
                                  });
                                },
                              },
                            ]) && on(n.prototype, e),
                            t
                          );
                        })();
                      kt.filters.token = i;
                    },
                  },
                  n = {};
                function e(r) {
                  if (n[r]) return n[r].exports;
                  var i = (n[r] = { exports: {} });
                  return t[r](i, i.exports, e), i.exports;
                }
                return (
                  (e.d = function (t, n) {
                    for (var r in n)
                      e.o(n, r) &&
                        !e.o(t, r) &&
                        Object.defineProperty(t, r, {
                          enumerable: !0,
                          get: n[r],
                        });
                  }),
                  (e.g = (function () {
                    if ("object" == typeof globalThis) return globalThis;
                    try {
                      return this || new Function("return this")();
                    } catch (t) {
                      if ("object" == typeof window) return window;
                    }
                  })()),
                  (e.o = function (t, n) {
                    return Object.prototype.hasOwnProperty.call(t, n);
                  }),
                  (e.r = function (t) {
                    "undefined" != typeof Symbol &&
                      Symbol.toStringTag &&
                      Object.defineProperty(t, Symbol.toStringTag, {
                        value: "Module",
                      }),
                      Object.defineProperty(t, "__esModule", { value: !0 });
                  }),
                  e(720)
                );
              })();
            });
          },
          {},
        ],
        3: [
          function (require, module, exports) {
            // Circle shaped progress bar

            var Shape = require("./shape");
            var utils = require("./utils");

            var Circle = function Circle(container, options) {
              // Use two arcs to form a circle
              // See this answer http://stackoverflow.com/a/10477334/1446092
              this._pathTemplate =
                "M 50,50 m 0,-{radius}" +
                " a {radius},{radius} 0 1 1 0,{2radius}" +
                " a {radius},{radius} 0 1 1 0,-{2radius}";

              this.containerAspectRatio = 1;

              Shape.apply(this, arguments);
            };

            Circle.prototype = new Shape();
            Circle.prototype.constructor = Circle;

            Circle.prototype._pathString = function _pathString(opts) {
              var widthOfWider = opts.strokeWidth;
              if (opts.trailWidth && opts.trailWidth > opts.strokeWidth) {
                widthOfWider = opts.trailWidth;
              }

              var r = 50 - widthOfWider / 2;

              return utils.render(this._pathTemplate, {
                radius: r,
                "2radius": r * 2,
              });
            };

            Circle.prototype._trailString = function _trailString(opts) {
              return this._pathString(opts);
            };

            module.exports = Circle;
          },
          { "./shape": 8, "./utils": 10 },
        ],
        4: [
          function (require, module, exports) {
            // Line shaped progress bar

            var Shape = require("./shape");
            var utils = require("./utils");

            var Line = function Line(container, options) {
              this._pathTemplate = options.vertical
                ? "M {center},100 L {center},0"
                : "M 0,{center} L 100,{center}";
              Shape.apply(this, arguments);
            };

            Line.prototype = new Shape();
            Line.prototype.constructor = Line;

            Line.prototype._initializeSvg = function _initializeSvg(svg, opts) {
              var viewBoxStr = opts.vertical
                ? "0 0 " + opts.strokeWidth + " 100"
                : "0 0 100 " + opts.strokeWidth;
              svg.setAttribute("viewBox", viewBoxStr);
              svg.setAttribute("preserveAspectRatio", "none");
            };

            Line.prototype._pathString = function _pathString(opts) {
              return utils.render(this._pathTemplate, {
                center: opts.strokeWidth / 2,
              });
            };

            Line.prototype._trailString = function _trailString(opts) {
              return this._pathString(opts);
            };

            module.exports = Line;
          },
          { "./shape": 8, "./utils": 10 },
        ],
        5: [
          function (require, module, exports) {
            module.exports = {
              // Higher level API, different shaped progress bars
              Line: require("./line"),
              Circle: require("./circle"),
              SemiCircle: require("./semicircle"),
              Square: require("./square"),

              // Lower level API to use any SVG path
              Path: require("./path"),

              // Base-class for creating new custom shapes
              // to be in line with the API of built-in shapes
              // Undocumented.
              Shape: require("./shape"),

              // Internal utils, undocumented.
              utils: require("./utils"),
            };
          },
          {
            "./circle": 3,
            "./line": 4,
            "./path": 6,
            "./semicircle": 7,
            "./shape": 8,
            "./square": 9,
            "./utils": 10,
          },
        ],
        6: [
          function (require, module, exports) {
            // Lower level API to animate any kind of svg path

            var shifty = require("shifty");
            var utils = require("./utils");

            var Tweenable = shifty.Tweenable;

            var EASING_ALIASES = {
              easeIn: "easeInCubic",
              easeOut: "easeOutCubic",
              easeInOut: "easeInOutCubic",
            };

            var Path = function Path(path, opts) {
              // Throw a better error if not initialized with `new` keyword
              if (!(this instanceof Path)) {
                throw new Error("Constructor was called without new keyword");
              }

              // Default parameters for animation
              opts = utils.extend(
                {
                  delay: 0,
                  duration: 800,
                  easing: "linear",
                  from: {},
                  to: {},
                  step: function () {},
                },
                opts
              );

              var element;
              if (utils.isString(path)) {
                element = document.querySelector(path);
              } else {
                element = path;
              }

              // Reveal .path as public attribute
              this.path = element;
              this._opts = opts;
              this._tweenable = null;

              // Set up the starting positions
              var length = this.path.getTotalLength();
              this.path.style.strokeDasharray = length + " " + length;
              this.set(0);
            };

            Path.prototype.value = function value() {
              var offset = this._getComputedDashOffset();
              var length = this.path.getTotalLength();

              var progress = 1 - offset / length;
              // Round number to prevent returning very small number like 1e-30, which
              // is practically 0
              return parseFloat(progress.toFixed(6), 10);
            };

            Path.prototype.set = function set(progress) {
              this.stop();

              this.path.style.strokeDashoffset =
                this._progressToOffset(progress);

              var step = this._opts.step;
              if (utils.isFunction(step)) {
                var easing = this._easing(this._opts.easing);
                var values = this._calculateTo(progress, easing);
                var reference = this._opts.shape || this;
                step(values, reference, this._opts.attachment);
              }
            };

            Path.prototype.stop = function stop() {
              this._stopTween();
              this.path.style.strokeDashoffset = this._getComputedDashOffset();
            };

            // Method introduced here:
            // http://jakearchibald.com/2013/animated-line-drawing-svg/
            Path.prototype.animate = function animate(progress, opts, cb) {
              opts = opts || {};

              if (utils.isFunction(opts)) {
                cb = opts;
                opts = {};
              }

              var passedOpts = utils.extend({}, opts);

              // Copy default opts to new object so defaults are not modified
              var defaultOpts = utils.extend({}, this._opts);
              opts = utils.extend(defaultOpts, opts);

              var shiftyEasing = this._easing(opts.easing);
              var values = this._resolveFromAndTo(
                progress,
                shiftyEasing,
                passedOpts
              );

              this.stop();

              // Trigger a layout so styles are calculated & the browser
              // picks up the starting position before animating
              this.path.getBoundingClientRect();

              var offset = this._getComputedDashOffset();
              var newOffset = this._progressToOffset(progress);

              var self = this;
              this._tweenable = new Tweenable();
              this._tweenable
                .tween({
                  from: utils.extend({ offset: offset }, values.from),
                  to: utils.extend({ offset: newOffset }, values.to),
                  duration: opts.duration,
                  delay: opts.delay,
                  easing: shiftyEasing,
                  step: function (state) {
                    self.path.style.strokeDashoffset = state.offset;
                    var reference = opts.shape || self;
                    opts.step(state, reference, opts.attachment);
                  },
                })
                .then(function (state) {
                  if (utils.isFunction(cb)) {
                    cb();
                  }
                })
                .catch(function (err) {
                  console.error("Error in tweening:", err);
                  throw err;
                });
            };

            Path.prototype._getComputedDashOffset =
              function _getComputedDashOffset() {
                var computedStyle = window.getComputedStyle(this.path, null);
                return parseFloat(
                  computedStyle.getPropertyValue("stroke-dashoffset"),
                  10
                );
              };

            Path.prototype._progressToOffset = function _progressToOffset(
              progress
            ) {
              var length = this.path.getTotalLength();
              return length - progress * length;
            };

            // Resolves from and to values for animation.
            Path.prototype._resolveFromAndTo = function _resolveFromAndTo(
              progress,
              easing,
              opts
            ) {
              if (opts.from && opts.to) {
                return {
                  from: opts.from,
                  to: opts.to,
                };
              }

              return {
                from: this._calculateFrom(easing),
                to: this._calculateTo(progress, easing),
              };
            };

            // Calculate `from` values from options passed at initialization
            Path.prototype._calculateFrom = function _calculateFrom(easing) {
              return shifty.interpolate(
                this._opts.from,
                this._opts.to,
                this.value(),
                easing
              );
            };

            // Calculate `to` values from options passed at initialization
            Path.prototype._calculateTo = function _calculateTo(
              progress,
              easing
            ) {
              return shifty.interpolate(
                this._opts.from,
                this._opts.to,
                progress,
                easing
              );
            };

            Path.prototype._stopTween = function _stopTween() {
              if (this._tweenable !== null) {
                this._tweenable.stop(true);
                this._tweenable = null;
              }
            };

            Path.prototype._easing = function _easing(easing) {
              if (EASING_ALIASES.hasOwnProperty(easing)) {
                return EASING_ALIASES[easing];
              }

              return easing;
            };

            module.exports = Path;
          },
          { "./utils": 10, shifty: 2 },
        ],
        7: [
          function (require, module, exports) {
            // Semi-SemiCircle shaped progress bar

            var Shape = require("./shape");
            var Circle = require("./circle");
            var utils = require("./utils");

            var SemiCircle = function SemiCircle(container, options) {
              // Use one arc to form a SemiCircle
              // See this answer http://stackoverflow.com/a/10477334/1446092
              this._pathTemplate =
                "M 50,50 m -{radius},0" +
                " a {radius},{radius} 0 1 1 {2radius},0";

              this.containerAspectRatio = 2;

              Shape.apply(this, arguments);
            };

            SemiCircle.prototype = new Shape();
            SemiCircle.prototype.constructor = SemiCircle;

            SemiCircle.prototype._initializeSvg = function _initializeSvg(
              svg,
              opts
            ) {
              svg.setAttribute("viewBox", "0 0 100 50");
            };

            SemiCircle.prototype._initializeTextContainer =
              function _initializeTextContainer(
                opts,
                container,
                textContainer
              ) {
                if (opts.text.style) {
                  // Reset top style
                  textContainer.style.top = "auto";
                  textContainer.style.bottom = "0";

                  if (opts.text.alignToBottom) {
                    utils.setStyle(
                      textContainer,
                      "transform",
                      "translate(-50%, 0)"
                    );
                  } else {
                    utils.setStyle(
                      textContainer,
                      "transform",
                      "translate(-50%, 50%)"
                    );
                  }
                }
              };

            // Share functionality with Circle, just have different path
            SemiCircle.prototype._pathString = Circle.prototype._pathString;
            SemiCircle.prototype._trailString = Circle.prototype._trailString;

            module.exports = SemiCircle;
          },
          { "./circle": 3, "./shape": 8, "./utils": 10 },
        ],
        8: [
          function (require, module, exports) {
            // Base object for different progress bar shapes

            var Path = require("./path");
            var utils = require("./utils");

            var DESTROYED_ERROR = "Object is destroyed";

            var Shape = function Shape(container, opts) {
              // Throw a better error if progress bars are not initialized with `new`
              // keyword
              if (!(this instanceof Shape)) {
                throw new Error("Constructor was called without new keyword");
              }

              // Prevent calling constructor without parameters so inheritance
              // works correctly. To understand, this is how Shape is inherited:
              //
              //   Line.prototype = new Shape();
              //
              // We just want to set the prototype for Line.
              if (arguments.length === 0) {
                return;
              }

              // Default parameters for progress bar creation
              this._opts = utils.extend(
                {
                  color: "#555",
                  strokeWidth: 1.0,
                  trailColor: null,
                  trailWidth: null,
                  fill: null,
                  text: {
                    style: {
                      color: null,
                      position: "absolute",
                      left: "50%",
                      top: "50%",
                      padding: 0,
                      margin: 0,
                      transform: {
                        prefix: true,
                        value: "translate(-50%, -50%)",
                      },
                    },
                    autoStyleContainer: true,
                    alignToBottom: true,
                    value: null,
                    className: "progressbar-text",
                  },
                  svgStyle: {
                    display: "block",
                    width: "100%",
                  },
                  warnings: false,
                },
                opts,
                true
              ); // Use recursive extend

              // If user specifies e.g. svgStyle or text style, the whole object
              // should replace the defaults to make working with styles easier
              if (utils.isObject(opts) && opts.svgStyle !== undefined) {
                this._opts.svgStyle = opts.svgStyle;
              }
              if (
                utils.isObject(opts) &&
                utils.isObject(opts.text) &&
                opts.text.style !== undefined
              ) {
                this._opts.text.style = opts.text.style;
              }

              var svgView = this._createSvgView(this._opts);

              var element;
              if (utils.isString(container)) {
                element = document.querySelector(container);
              } else {
                element = container;
              }

              if (!element) {
                throw new Error("Container does not exist: " + container);
              }

              this._container = element;
              this._container.appendChild(svgView.svg);
              if (this._opts.warnings) {
                this._warnContainerAspectRatio(this._container);
              }

              if (this._opts.svgStyle) {
                utils.setStyles(svgView.svg, this._opts.svgStyle);
              }

              // Expose public attributes before Path initialization
              this.svg = svgView.svg;
              this.path = svgView.path;
              this.trail = svgView.trail;
              this.text = null;

              var newOpts = utils.extend(
                {
                  attachment: undefined,
                  shape: this,
                },
                this._opts
              );
              this._progressPath = new Path(svgView.path, newOpts);

              if (
                utils.isObject(this._opts.text) &&
                this._opts.text.value !== null
              ) {
                this.setText(this._opts.text.value);
              }
            };

            Shape.prototype.animate = function animate(progress, opts, cb) {
              if (this._progressPath === null) {
                throw new Error(DESTROYED_ERROR);
              }

              this._progressPath.animate(progress, opts, cb);
            };

            Shape.prototype.stop = function stop() {
              if (this._progressPath === null) {
                throw new Error(DESTROYED_ERROR);
              }

              // Don't crash if stop is called inside step function
              if (this._progressPath === undefined) {
                return;
              }

              this._progressPath.stop();
            };

            Shape.prototype.pause = function pause() {
              if (this._progressPath === null) {
                throw new Error(DESTROYED_ERROR);
              }

              if (this._progressPath === undefined) {
                return;
              }

              if (!this._progressPath._tweenable) {
                // It seems that we can't pause this
                return;
              }

              this._progressPath._tweenable.pause();
            };

            Shape.prototype.resume = function resume() {
              if (this._progressPath === null) {
                throw new Error(DESTROYED_ERROR);
              }

              if (this._progressPath === undefined) {
                return;
              }

              if (!this._progressPath._tweenable) {
                // It seems that we can't resume this
                return;
              }

              this._progressPath._tweenable.resume();
            };

            Shape.prototype.destroy = function destroy() {
              if (this._progressPath === null) {
                throw new Error(DESTROYED_ERROR);
              }

              this.stop();
              this.svg.parentNode.removeChild(this.svg);
              this.svg = null;
              this.path = null;
              this.trail = null;
              this._progressPath = null;

              if (this.text !== null) {
                this.text.parentNode.removeChild(this.text);
                this.text = null;
              }
            };

            Shape.prototype.set = function set(progress) {
              if (this._progressPath === null) {
                throw new Error(DESTROYED_ERROR);
              }

              this._progressPath.set(progress);
            };

            Shape.prototype.value = function value() {
              if (this._progressPath === null) {
                throw new Error(DESTROYED_ERROR);
              }

              if (this._progressPath === undefined) {
                return 0;
              }

              return this._progressPath.value();
            };

            Shape.prototype.setText = function setText(newText) {
              if (this._progressPath === null) {
                throw new Error(DESTROYED_ERROR);
              }

              if (this.text === null) {
                // Create new text node
                this.text = this._createTextContainer(
                  this._opts,
                  this._container
                );
                this._container.appendChild(this.text);
              }

              // Remove previous text and add new
              if (utils.isObject(newText)) {
                utils.removeChildren(this.text);
                this.text.appendChild(newText);
              } else {
                this.text.innerHTML = newText;
              }
            };

            Shape.prototype._createSvgView = function _createSvgView(opts) {
              var svg = document.createElementNS(
                "http://www.w3.org/2000/svg",
                "svg"
              );
              this._initializeSvg(svg, opts);

              var trailPath = null;
              // Each option listed in the if condition are 'triggers' for creating
              // the trail path
              if (opts.trailColor || opts.trailWidth) {
                trailPath = this._createTrail(opts);
                svg.appendChild(trailPath);
              }

              var path = this._createPath(opts);
              svg.appendChild(path);

              return {
                svg: svg,
                path: path,
                trail: trailPath,
              };
            };

            Shape.prototype._initializeSvg = function _initializeSvg(
              svg,
              opts
            ) {
              svg.setAttribute("viewBox", "0 0 100 100");
            };

            Shape.prototype._createPath = function _createPath(opts) {
              var pathString = this._pathString(opts);
              return this._createPathElement(pathString, opts);
            };

            Shape.prototype._createTrail = function _createTrail(opts) {
              // Create path string with original passed options
              var pathString = this._trailString(opts);

              // Prevent modifying original
              var newOpts = utils.extend({}, opts);

              // Defaults for parameters which modify trail path
              if (!newOpts.trailColor) {
                newOpts.trailColor = "#eee";
              }
              if (!newOpts.trailWidth) {
                newOpts.trailWidth = newOpts.strokeWidth;
              }

              newOpts.color = newOpts.trailColor;
              newOpts.strokeWidth = newOpts.trailWidth;

              // When trail path is set, fill must be set for it instead of the
              // actual path to prevent trail stroke from clipping
              newOpts.fill = null;

              return this._createPathElement(pathString, newOpts);
            };

            Shape.prototype._createPathElement = function _createPathElement(
              pathString,
              opts
            ) {
              var path = document.createElementNS(
                "http://www.w3.org/2000/svg",
                "path"
              );
              path.setAttribute("d", pathString);
              path.setAttribute("stroke", opts.color);
              path.setAttribute("stroke-width", opts.strokeWidth);

              if (opts.fill) {
                path.setAttribute("fill", opts.fill);
              } else {
                path.setAttribute("fill-opacity", "0");
              }

              return path;
            };

            Shape.prototype._createTextContainer =
              function _createTextContainer(opts, container) {
                var textContainer = document.createElement("div");
                textContainer.className = opts.text.className;

                var textStyle = opts.text.style;
                if (textStyle) {
                  if (opts.text.autoStyleContainer) {
                    container.style.position = "relative";
                  }

                  utils.setStyles(textContainer, textStyle);
                  // Default text color to progress bar's color
                  if (!textStyle.color) {
                    textContainer.style.color = opts.color;
                  }
                }

                this._initializeTextContainer(opts, container, textContainer);
                return textContainer;
              };

            // Give custom shapes possibility to modify text element
            Shape.prototype._initializeTextContainer = function (
              opts,
              container,
              element
            ) {
              // By default, no-op
              // Custom shapes should respect API options, such as text.style
            };

            Shape.prototype._pathString = function _pathString(opts) {
              throw new Error("Override this function for each progress bar");
            };

            Shape.prototype._trailString = function _trailString(opts) {
              throw new Error("Override this function for each progress bar");
            };

            Shape.prototype._warnContainerAspectRatio =
              function _warnContainerAspectRatio(container) {
                if (!this.containerAspectRatio) {
                  return;
                }

                var computedStyle = window.getComputedStyle(container, null);
                var width = parseFloat(
                  computedStyle.getPropertyValue("width"),
                  10
                );
                var height = parseFloat(
                  computedStyle.getPropertyValue("height"),
                  10
                );
                if (
                  !utils.floatEquals(this.containerAspectRatio, width / height)
                ) {
                  console.warn(
                    "Incorrect aspect ratio of container",
                    "#" + container.id,
                    "detected:",
                    computedStyle.getPropertyValue("width") + "(width)",
                    "/",
                    computedStyle.getPropertyValue("height") + "(height)",
                    "=",
                    width / height
                  );

                  console.warn(
                    "Aspect ratio of should be",
                    this.containerAspectRatio
                  );
                }
              };

            module.exports = Shape;
          },
          { "./path": 6, "./utils": 10 },
        ],
        9: [
          function (require, module, exports) {
            // Square shaped progress bar
            // Note: Square is not core part of API anymore. It's left here
            //       for reference. square is not included to the progressbar
            //       build anymore

            var Shape = require("./shape");
            var utils = require("./utils");

            var Square = function Square(container, options) {
              this._pathTemplate =
                "M 0,{halfOfStrokeWidth}" +
                " L {width},{halfOfStrokeWidth}" +
                " L {width},{width}" +
                " L {halfOfStrokeWidth},{width}" +
                " L {halfOfStrokeWidth},{strokeWidth}";

              this._trailTemplate =
                "M {startMargin},{halfOfStrokeWidth}" +
                " L {width},{halfOfStrokeWidth}" +
                " L {width},{width}" +
                " L {halfOfStrokeWidth},{width}" +
                " L {halfOfStrokeWidth},{halfOfStrokeWidth}";

              Shape.apply(this, arguments);
            };

            Square.prototype = new Shape();
            Square.prototype.constructor = Square;

            Square.prototype._pathString = function _pathString(opts) {
              var w = 100 - opts.strokeWidth / 2;

              return utils.render(this._pathTemplate, {
                width: w,
                strokeWidth: opts.strokeWidth,
                halfOfStrokeWidth: opts.strokeWidth / 2,
              });
            };

            Square.prototype._trailString = function _trailString(opts) {
              var w = 100 - opts.strokeWidth / 2;

              return utils.render(this._trailTemplate, {
                width: w,
                strokeWidth: opts.strokeWidth,
                halfOfStrokeWidth: opts.strokeWidth / 2,
                startMargin: opts.strokeWidth / 2 - opts.trailWidth / 2,
              });
            };

            module.exports = Square;
          },
          { "./shape": 8, "./utils": 10 },
        ],
        10: [
          function (require, module, exports) {
            // Utility functions

            var merge = require("lodash.merge");

            var PREFIXES = "Webkit Moz O ms".split(" ");
            var FLOAT_COMPARISON_EPSILON = 0.001;

            // Renders templates with given variables. Variables must be surrounded with
            // braces without any spaces, e.g. {variable}
            // All instances of variable placeholders will be replaced with given content
            // Example:
            // render('Hello, {message}!', {message: 'world'})
            function render(template, vars) {
              var rendered = template;

              for (var key in vars) {
                if (vars.hasOwnProperty(key)) {
                  var val = vars[key];
                  var regExpString = "\\{" + key + "\\}";
                  var regExp = new RegExp(regExpString, "g");

                  rendered = rendered.replace(regExp, val);
                }
              }

              return rendered;
            }

            function setStyle(element, style, value) {
              var elStyle = element.style; // cache for performance

              for (var i = 0; i < PREFIXES.length; ++i) {
                var prefix = PREFIXES[i];
                elStyle[prefix + capitalize(style)] = value;
              }

              elStyle[style] = value;
            }

            function setStyles(element, styles) {
              forEachObject(styles, function (styleValue, styleName) {
                // Allow disabling some individual styles by setting them
                // to null or undefined
                if (styleValue === null || styleValue === undefined) {
                  return;
                }

                // If style's value is {prefix: true, value: '50%'},
                // Set also browser prefixed styles
                if (isObject(styleValue) && styleValue.prefix === true) {
                  setStyle(element, styleName, styleValue.value);
                } else {
                  element.style[styleName] = styleValue;
                }
              });
            }

            function capitalize(text) {
              return text.charAt(0).toUpperCase() + text.slice(1);
            }

            function isString(obj) {
              return typeof obj === "string" || obj instanceof String;
            }

            function isFunction(obj) {
              return typeof obj === "function";
            }

            function isArray(obj) {
              return Object.prototype.toString.call(obj) === "[object Array]";
            }

            // Returns true if `obj` is object as in {a: 1, b: 2}, not if it's function or
            // array
            function isObject(obj) {
              if (isArray(obj)) {
                return false;
              }

              var type = typeof obj;
              return type === "object" && !!obj;
            }

            function forEachObject(object, callback) {
              for (var key in object) {
                if (object.hasOwnProperty(key)) {
                  var val = object[key];
                  callback(val, key);
                }
              }
            }

            function floatEquals(a, b) {
              return Math.abs(a - b) < FLOAT_COMPARISON_EPSILON;
            }

            // https://coderwall.com/p/nygghw/don-t-use-innerhtml-to-empty-dom-elements
            function removeChildren(el) {
              while (el.firstChild) {
                el.removeChild(el.firstChild);
              }
            }

            module.exports = {
              extend: merge,
              render: render,
              setStyle: setStyle,
              setStyles: setStyles,
              capitalize: capitalize,
              isString: isString,
              isFunction: isFunction,
              isObject: isObject,
              forEachObject: forEachObject,
              floatEquals: floatEquals,
              removeChildren: removeChildren,
            };
          },
          { "lodash.merge": 1 },
        ],
      },
      {},
      [5]
    )(5);
  });
})(progressbar);

var progressbarExports = progressbar.exports;
const ProgressBar = /*@__PURE__*/ getDefaultExportFromCjs(progressbarExports);

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == "object" || type == "function");
}

/** Detect free variable `global` from Node.js. */
var freeGlobal =
  typeof global == "object" && global && global.Object === Object && global;

const freeGlobal$1 = freeGlobal;

/** Detect free variable `self`. */
var freeSelf =
  typeof self == "object" && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal$1 || freeSelf || Function("return this")();

const root$1 = root;

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function () {
  return root$1.Date.now();
};

const now$1 = now;

/** Used to match a single whitespace character. */
var reWhitespace = /\s/;

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */
function trimmedEndIndex(string) {
  var index = string.length;

  while (index-- && reWhitespace.test(string.charAt(index))) {}
  return index;
}

/** Used to match leading whitespace. */
var reTrimStart = /^\s+/;

/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */
function baseTrim(string) {
  return string
    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "")
    : string;
}

/** Built-in value references. */
var Symbol$1 = root$1.Symbol;

const Symbol$2 = Symbol$1;

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$1.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$1.toString;

/** Built-in value references. */
var symToStringTag$1 = Symbol$2 ? Symbol$2.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty$2.call(value, symToStringTag$1),
    tag = value[symToStringTag$1];

  try {
    value[symToStringTag$1] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString$1.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

/** `Object#toString` result references. */
var nullTag = "[object Null]",
  undefinedTag = "[object Undefined]";

/** Built-in value references. */
var symToStringTag = Symbol$2 ? Symbol$2.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return symToStringTag && symToStringTag in Object(value)
    ? getRawTag(value)
    : objectToString(value);
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == "object";
}

/** `Object#toString` result references. */
var symbolTag = "[object Symbol]";

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return (
    typeof value == "symbol" ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag)
  );
}

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == "number") {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == "function" ? value.valueOf() : value;
    value = isObject(other) ? other + "" : other;
  }
  if (typeof value != "string") {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value)
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : reIsBadHex.test(value)
    ? NAN
    : +value;
}

/** Error message constants. */
var FUNC_ERROR_TEXT$1 = "Expected a function";

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
  nativeMin = Math.min;

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
    lastThis,
    maxWait,
    result,
    timerId,
    lastCallTime,
    lastInvokeTime = 0,
    leading = false,
    maxing = false,
    trailing = true;

  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT$1);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = "maxWait" in options;
    maxWait = maxing
      ? nativeMax(toNumber(options.maxWait) || 0, wait)
      : maxWait;
    trailing = "trailing" in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
      thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
      timeSinceLastInvoke = time - lastInvokeTime,
      timeWaiting = wait - timeSinceLastCall;

    return maxing
      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
      : timeWaiting;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
      timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (
      lastCallTime === undefined ||
      timeSinceLastCall >= wait ||
      timeSinceLastCall < 0 ||
      (maxing && timeSinceLastInvoke >= maxWait)
    );
  }

  function timerExpired() {
    var time = now$1();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now$1());
  }

  function debounced() {
    var time = now$1(),
      isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

/** Error message constants. */
var FUNC_ERROR_TEXT = "Expected a function";

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */
function throttle(func, wait, options) {
  var leading = true,
    trailing = true;

  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject(options)) {
    leading = "leading" in options ? !!options.leading : leading;
    trailing = "trailing" in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    leading: leading,
    maxWait: wait,
    trailing: trailing,
  });
}

/**
 * simplebar-core - v1.3.2
 * Scrollbars, simpler.
 * https://grsmto.github.io/simplebar/
 *
 * Made by Adrien Denat from a fork by Jonathan Nicol
 * Under MIT License
 */

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function () {
  __assign =
    Object.assign ||
    function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
  return __assign.apply(this, arguments);
};

function getElementWindow$1(element) {
  if (
    !element ||
    !element.ownerDocument ||
    !element.ownerDocument.defaultView
  ) {
    return window;
  }
  return element.ownerDocument.defaultView;
}
function getElementDocument$1(element) {
  if (!element || !element.ownerDocument) {
    return document;
  }
  return element.ownerDocument;
}
// Helper function to retrieve options from element attributes
var getOptions$1 = function (obj) {
  var initialObj = {};
  var options = Array.prototype.reduce.call(
    obj,
    function (acc, attribute) {
      var option = attribute.name.match(/data-simplebar-(.+)/);
      if (option) {
        var key = option[1].replace(/\W+(.)/g, function (_, chr) {
          return chr.toUpperCase();
        });
        switch (attribute.value) {
          case "true":
            acc[key] = true;
            break;
          case "false":
            acc[key] = false;
            break;
          case undefined:
            acc[key] = true;
            break;
          default:
            acc[key] = attribute.value;
        }
      }
      return acc;
    },
    initialObj
  );
  return options;
};
function addClasses$1(el, classes) {
  var _a;
  if (!el) return;
  (_a = el.classList).add.apply(_a, classes.split(" "));
}
function removeClasses$1(el, classes) {
  if (!el) return;
  classes.split(" ").forEach(function (className) {
    el.classList.remove(className);
  });
}
function classNamesToQuery$1(classNames) {
  return ".".concat(classNames.split(" ").join("."));
}
var canUseDOM$1 = !!(
  typeof window !== "undefined" &&
  window.document &&
  window.document.createElement
);

var helpers = /*#__PURE__*/ Object.freeze({
  __proto__: null,
  addClasses: addClasses$1,
  canUseDOM: canUseDOM$1,
  classNamesToQuery: classNamesToQuery$1,
  getElementDocument: getElementDocument$1,
  getElementWindow: getElementWindow$1,
  getOptions: getOptions$1,
  removeClasses: removeClasses$1,
});

var cachedScrollbarWidth = null;
var cachedDevicePixelRatio = null;
if (canUseDOM$1) {
  window.addEventListener("resize", function () {
    if (cachedDevicePixelRatio !== window.devicePixelRatio) {
      cachedDevicePixelRatio = window.devicePixelRatio;
      cachedScrollbarWidth = null;
    }
  });
}
function scrollbarWidth() {
  if (cachedScrollbarWidth === null) {
    if (typeof document === "undefined") {
      cachedScrollbarWidth = 0;
      return cachedScrollbarWidth;
    }
    var body = document.body;
    var box = document.createElement("div");
    box.classList.add("simplebar-hide-scrollbar");
    body.appendChild(box);
    var width = box.getBoundingClientRect().right;
    body.removeChild(box);
    cachedScrollbarWidth = width;
  }
  return cachedScrollbarWidth;
}

var getElementWindow = getElementWindow$1,
  getElementDocument = getElementDocument$1,
  getOptions$2 = getOptions$1,
  addClasses$2 = addClasses$1,
  removeClasses = removeClasses$1,
  classNamesToQuery = classNamesToQuery$1;
var SimpleBarCore = /** @class */ (function () {
  function SimpleBarCore(element, options) {
    if (options === void 0) {
      options = {};
    }
    var _this = this;
    this.removePreventClickId = null;
    this.minScrollbarWidth = 20;
    this.stopScrollDelay = 175;
    this.isScrolling = false;
    this.isMouseEntering = false;
    this.isDragging = false;
    this.scrollXTicking = false;
    this.scrollYTicking = false;
    this.wrapperEl = null;
    this.contentWrapperEl = null;
    this.contentEl = null;
    this.offsetEl = null;
    this.maskEl = null;
    this.placeholderEl = null;
    this.heightAutoObserverWrapperEl = null;
    this.heightAutoObserverEl = null;
    this.rtlHelpers = null;
    this.scrollbarWidth = 0;
    this.resizeObserver = null;
    this.mutationObserver = null;
    this.elStyles = null;
    this.isRtl = null;
    this.mouseX = 0;
    this.mouseY = 0;
    this.onMouseMove = function () {};
    this.onWindowResize = function () {};
    this.onStopScrolling = function () {};
    this.onMouseEntered = function () {};
    /**
     * On scroll event handling
     */
    this.onScroll = function () {
      var elWindow = getElementWindow(_this.el);
      if (!_this.scrollXTicking) {
        elWindow.requestAnimationFrame(_this.scrollX);
        _this.scrollXTicking = true;
      }
      if (!_this.scrollYTicking) {
        elWindow.requestAnimationFrame(_this.scrollY);
        _this.scrollYTicking = true;
      }
      if (!_this.isScrolling) {
        _this.isScrolling = true;
        addClasses$2(_this.el, _this.classNames.scrolling);
      }
      _this.showScrollbar("x");
      _this.showScrollbar("y");
      _this.onStopScrolling();
    };
    this.scrollX = function () {
      if (_this.axis.x.isOverflowing) {
        _this.positionScrollbar("x");
      }
      _this.scrollXTicking = false;
    };
    this.scrollY = function () {
      if (_this.axis.y.isOverflowing) {
        _this.positionScrollbar("y");
      }
      _this.scrollYTicking = false;
    };
    this._onStopScrolling = function () {
      removeClasses(_this.el, _this.classNames.scrolling);
      if (_this.options.autoHide) {
        _this.hideScrollbar("x");
        _this.hideScrollbar("y");
      }
      _this.isScrolling = false;
    };
    this.onMouseEnter = function () {
      if (!_this.isMouseEntering) {
        addClasses$2(_this.el, _this.classNames.mouseEntered);
        _this.showScrollbar("x");
        _this.showScrollbar("y");
        _this.isMouseEntering = true;
      }
      _this.onMouseEntered();
    };
    this._onMouseEntered = function () {
      removeClasses(_this.el, _this.classNames.mouseEntered);
      if (_this.options.autoHide) {
        _this.hideScrollbar("x");
        _this.hideScrollbar("y");
      }
      _this.isMouseEntering = false;
    };
    this._onMouseMove = function (e) {
      _this.mouseX = e.clientX;
      _this.mouseY = e.clientY;
      if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {
        _this.onMouseMoveForAxis("x");
      }
      if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {
        _this.onMouseMoveForAxis("y");
      }
    };
    this.onMouseLeave = function () {
      _this.onMouseMove.cancel();
      if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {
        _this.onMouseLeaveForAxis("x");
      }
      if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {
        _this.onMouseLeaveForAxis("y");
      }
      _this.mouseX = -1;
      _this.mouseY = -1;
    };
    this._onWindowResize = function () {
      // Recalculate scrollbarWidth in case it's a zoom
      _this.scrollbarWidth = _this.getScrollbarWidth();
      _this.hideNativeScrollbar();
    };
    this.onPointerEvent = function (e) {
      if (
        !_this.axis.x.track.el ||
        !_this.axis.y.track.el ||
        !_this.axis.x.scrollbar.el ||
        !_this.axis.y.scrollbar.el
      )
        return;
      var isWithinTrackXBounds, isWithinTrackYBounds;
      _this.axis.x.track.rect = _this.axis.x.track.el.getBoundingClientRect();
      _this.axis.y.track.rect = _this.axis.y.track.el.getBoundingClientRect();
      if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {
        isWithinTrackXBounds = _this.isWithinBounds(_this.axis.x.track.rect);
      }
      if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {
        isWithinTrackYBounds = _this.isWithinBounds(_this.axis.y.track.rect);
      }
      // If any pointer event is called on the scrollbar
      if (isWithinTrackXBounds || isWithinTrackYBounds) {
        // Prevent event leaking
        e.stopPropagation();
        if (e.type === "pointerdown" && e.pointerType !== "touch") {
          if (isWithinTrackXBounds) {
            _this.axis.x.scrollbar.rect =
              _this.axis.x.scrollbar.el.getBoundingClientRect();
            if (_this.isWithinBounds(_this.axis.x.scrollbar.rect)) {
              _this.onDragStart(e, "x");
            } else {
              _this.onTrackClick(e, "x");
            }
          }
          if (isWithinTrackYBounds) {
            _this.axis.y.scrollbar.rect =
              _this.axis.y.scrollbar.el.getBoundingClientRect();
            if (_this.isWithinBounds(_this.axis.y.scrollbar.rect)) {
              _this.onDragStart(e, "y");
            } else {
              _this.onTrackClick(e, "y");
            }
          }
        }
      }
    };
    /**
     * Drag scrollbar handle
     */
    this.drag = function (e) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
      if (!_this.draggedAxis || !_this.contentWrapperEl) return;
      var eventOffset;
      var track = _this.axis[_this.draggedAxis].track;
      var trackSize =
        (_b =
          (_a = track.rect) === null || _a === void 0
            ? void 0
            : _a[_this.axis[_this.draggedAxis].sizeAttr]) !== null &&
        _b !== void 0
          ? _b
          : 0;
      var scrollbar = _this.axis[_this.draggedAxis].scrollbar;
      var contentSize =
        (_d =
          (_c = _this.contentWrapperEl) === null || _c === void 0
            ? void 0
            : _c[_this.axis[_this.draggedAxis].scrollSizeAttr]) !== null &&
        _d !== void 0
          ? _d
          : 0;
      var hostSize = parseInt(
        (_f =
          (_e = _this.elStyles) === null || _e === void 0
            ? void 0
            : _e[_this.axis[_this.draggedAxis].sizeAttr]) !== null &&
          _f !== void 0
          ? _f
          : "0px",
        10
      );
      e.preventDefault();
      e.stopPropagation();
      if (_this.draggedAxis === "y") {
        eventOffset = e.pageY;
      } else {
        eventOffset = e.pageX;
      }
      // Calculate how far the user's mouse is from the top/left of the scrollbar (minus the dragOffset).
      var dragPos =
        eventOffset -
        ((_h =
          (_g = track.rect) === null || _g === void 0
            ? void 0
            : _g[_this.axis[_this.draggedAxis].offsetAttr]) !== null &&
        _h !== void 0
          ? _h
          : 0) -
        _this.axis[_this.draggedAxis].dragOffset;
      dragPos =
        _this.draggedAxis === "x" && _this.isRtl
          ? ((_k =
              (_j = track.rect) === null || _j === void 0
                ? void 0
                : _j[_this.axis[_this.draggedAxis].sizeAttr]) !== null &&
            _k !== void 0
              ? _k
              : 0) -
            scrollbar.size -
            dragPos
          : dragPos;
      // Convert the mouse position into a percentage of the scrollbar height/width.
      var dragPerc = dragPos / (trackSize - scrollbar.size);
      // Scroll the content by the same percentage.
      var scrollPos = dragPerc * (contentSize - hostSize);
      // Fix browsers inconsistency on RTL
      if (_this.draggedAxis === "x" && _this.isRtl) {
        scrollPos = (
          (_l = SimpleBarCore.getRtlHelpers()) === null || _l === void 0
            ? void 0
            : _l.isScrollingToNegative
        )
          ? -scrollPos
          : scrollPos;
      }
      _this.contentWrapperEl[_this.axis[_this.draggedAxis].scrollOffsetAttr] =
        scrollPos;
    };
    /**
     * End scroll handle drag
     */
    this.onEndDrag = function (e) {
      _this.isDragging = false;
      var elDocument = getElementDocument(_this.el);
      var elWindow = getElementWindow(_this.el);
      e.preventDefault();
      e.stopPropagation();
      removeClasses(_this.el, _this.classNames.dragging);
      _this.onStopScrolling();
      elDocument.removeEventListener("mousemove", _this.drag, true);
      elDocument.removeEventListener("mouseup", _this.onEndDrag, true);
      _this.removePreventClickId = elWindow.setTimeout(function () {
        // Remove these asynchronously so we still suppress click events
        // generated simultaneously with mouseup.
        elDocument.removeEventListener("click", _this.preventClick, true);
        elDocument.removeEventListener("dblclick", _this.preventClick, true);
        _this.removePreventClickId = null;
      });
    };
    /**
     * Handler to ignore click events during drag
     */
    this.preventClick = function (e) {
      e.preventDefault();
      e.stopPropagation();
    };
    this.el = element;
    this.options = __assign(
      __assign({}, SimpleBarCore.defaultOptions),
      options
    );
    this.classNames = __assign(
      __assign({}, SimpleBarCore.defaultOptions.classNames),
      options.classNames
    );
    this.axis = {
      x: {
        scrollOffsetAttr: "scrollLeft",
        sizeAttr: "width",
        scrollSizeAttr: "scrollWidth",
        offsetSizeAttr: "offsetWidth",
        offsetAttr: "left",
        overflowAttr: "overflowX",
        dragOffset: 0,
        isOverflowing: true,
        forceVisible: false,
        track: { size: null, el: null, rect: null, isVisible: false },
        scrollbar: { size: null, el: null, rect: null, isVisible: false },
      },
      y: {
        scrollOffsetAttr: "scrollTop",
        sizeAttr: "height",
        scrollSizeAttr: "scrollHeight",
        offsetSizeAttr: "offsetHeight",
        offsetAttr: "top",
        overflowAttr: "overflowY",
        dragOffset: 0,
        isOverflowing: true,
        forceVisible: false,
        track: { size: null, el: null, rect: null, isVisible: false },
        scrollbar: { size: null, el: null, rect: null, isVisible: false },
      },
    };
    if (typeof this.el !== "object" || !this.el.nodeName) {
      throw new Error(
        "Argument passed to SimpleBar must be an HTML element instead of ".concat(
          this.el
        )
      );
    }
    this.onMouseMove = throttle(this._onMouseMove, 64);
    this.onWindowResize = debounce(this._onWindowResize, 64, { leading: true });
    this.onStopScrolling = debounce(
      this._onStopScrolling,
      this.stopScrollDelay
    );
    this.onMouseEntered = debounce(this._onMouseEntered, this.stopScrollDelay);
    this.init();
  }
  /**
   * Helper to fix browsers inconsistency on RTL:
   *  - Firefox inverts the scrollbar initial position
   *  - IE11 inverts both scrollbar position and scrolling offset
   * Directly inspired by @KingSora's OverlayScrollbars https://github.com/KingSora/OverlayScrollbars/blob/master/js/OverlayScrollbars.js#L1634
   */
  SimpleBarCore.getRtlHelpers = function () {
    if (SimpleBarCore.rtlHelpers) {
      return SimpleBarCore.rtlHelpers;
    }
    var dummyDiv = document.createElement("div");
    dummyDiv.innerHTML =
      '<div class="simplebar-dummy-scrollbar-size"><div></div></div>';
    var scrollbarDummyEl = dummyDiv.firstElementChild;
    var dummyChild =
      scrollbarDummyEl === null || scrollbarDummyEl === void 0
        ? void 0
        : scrollbarDummyEl.firstElementChild;
    if (!dummyChild) return null;
    document.body.appendChild(scrollbarDummyEl);
    scrollbarDummyEl.scrollLeft = 0;
    var dummyContainerOffset = SimpleBarCore.getOffset(scrollbarDummyEl);
    var dummyChildOffset = SimpleBarCore.getOffset(dummyChild);
    scrollbarDummyEl.scrollLeft = -999;
    var dummyChildOffsetAfterScroll = SimpleBarCore.getOffset(dummyChild);
    document.body.removeChild(scrollbarDummyEl);
    SimpleBarCore.rtlHelpers = {
      // determines if the scrolling is responding with negative values
      isScrollOriginAtZero: dummyContainerOffset.left !== dummyChildOffset.left,
      // determines if the origin scrollbar position is inverted or not (positioned on left or right)
      isScrollingToNegative:
        dummyChildOffset.left !== dummyChildOffsetAfterScroll.left,
    };
    return SimpleBarCore.rtlHelpers;
  };
  SimpleBarCore.prototype.getScrollbarWidth = function () {
    // Try/catch for FF 56 throwing on undefined computedStyles
    try {
      // Detect browsers supporting CSS scrollbar styling and do not calculate
      if (
        (this.contentWrapperEl &&
          getComputedStyle(this.contentWrapperEl, "::-webkit-scrollbar")
            .display === "none") ||
        "scrollbarWidth" in document.documentElement.style ||
        "-ms-overflow-style" in document.documentElement.style
      ) {
        return 0;
      } else {
        return scrollbarWidth();
      }
    } catch (e) {
      return scrollbarWidth();
    }
  };
  SimpleBarCore.getOffset = function (el) {
    var rect = el.getBoundingClientRect();
    var elDocument = getElementDocument(el);
    var elWindow = getElementWindow(el);
    return {
      top:
        rect.top +
        (elWindow.pageYOffset || elDocument.documentElement.scrollTop),
      left:
        rect.left +
        (elWindow.pageXOffset || elDocument.documentElement.scrollLeft),
    };
  };
  SimpleBarCore.prototype.init = function () {
    // We stop here on server-side
    if (canUseDOM$1) {
      this.initDOM();
      this.rtlHelpers = SimpleBarCore.getRtlHelpers();
      this.scrollbarWidth = this.getScrollbarWidth();
      this.recalculate();
      this.initListeners();
    }
  };
  SimpleBarCore.prototype.initDOM = function () {
    var _a, _b;
    // assume that element has his DOM already initiated
    this.wrapperEl = this.el.querySelector(
      classNamesToQuery(this.classNames.wrapper)
    );
    this.contentWrapperEl =
      this.options.scrollableNode ||
      this.el.querySelector(classNamesToQuery(this.classNames.contentWrapper));
    this.contentEl =
      this.options.contentNode ||
      this.el.querySelector(classNamesToQuery(this.classNames.contentEl));
    this.offsetEl = this.el.querySelector(
      classNamesToQuery(this.classNames.offset)
    );
    this.maskEl = this.el.querySelector(
      classNamesToQuery(this.classNames.mask)
    );
    this.placeholderEl = this.findChild(
      this.wrapperEl,
      classNamesToQuery(this.classNames.placeholder)
    );
    this.heightAutoObserverWrapperEl = this.el.querySelector(
      classNamesToQuery(this.classNames.heightAutoObserverWrapperEl)
    );
    this.heightAutoObserverEl = this.el.querySelector(
      classNamesToQuery(this.classNames.heightAutoObserverEl)
    );
    this.axis.x.track.el = this.findChild(
      this.el,
      ""
        .concat(classNamesToQuery(this.classNames.track))
        .concat(classNamesToQuery(this.classNames.horizontal))
    );
    this.axis.y.track.el = this.findChild(
      this.el,
      ""
        .concat(classNamesToQuery(this.classNames.track))
        .concat(classNamesToQuery(this.classNames.vertical))
    );
    this.axis.x.scrollbar.el =
      ((_a = this.axis.x.track.el) === null || _a === void 0
        ? void 0
        : _a.querySelector(classNamesToQuery(this.classNames.scrollbar))) ||
      null;
    this.axis.y.scrollbar.el =
      ((_b = this.axis.y.track.el) === null || _b === void 0
        ? void 0
        : _b.querySelector(classNamesToQuery(this.classNames.scrollbar))) ||
      null;
    if (!this.options.autoHide) {
      addClasses$2(this.axis.x.scrollbar.el, this.classNames.visible);
      addClasses$2(this.axis.y.scrollbar.el, this.classNames.visible);
    }
  };
  SimpleBarCore.prototype.initListeners = function () {
    var _this = this;
    var _a;
    var elWindow = getElementWindow(this.el);
    // Event listeners
    this.el.addEventListener("mouseenter", this.onMouseEnter);
    this.el.addEventListener("pointerdown", this.onPointerEvent, true);
    this.el.addEventListener("mousemove", this.onMouseMove);
    this.el.addEventListener("mouseleave", this.onMouseLeave);
    (_a = this.contentWrapperEl) === null || _a === void 0
      ? void 0
      : _a.addEventListener("scroll", this.onScroll);
    // Browser zoom triggers a window resize
    elWindow.addEventListener("resize", this.onWindowResize);
    if (!this.contentEl) return;
    if (window.ResizeObserver) {
      // Hack for https://github.com/WICG/ResizeObserver/issues/38
      var resizeObserverStarted_1 = false;
      var resizeObserver = elWindow.ResizeObserver || ResizeObserver;
      this.resizeObserver = new resizeObserver(function () {
        if (!resizeObserverStarted_1) return;
        elWindow.requestAnimationFrame(function () {
          _this.recalculate();
        });
      });
      this.resizeObserver.observe(this.el);
      this.resizeObserver.observe(this.contentEl);
      elWindow.requestAnimationFrame(function () {
        resizeObserverStarted_1 = true;
      });
    }
    // This is required to detect horizontal scroll. Vertical scroll only needs the resizeObserver.
    this.mutationObserver = new elWindow.MutationObserver(function () {
      elWindow.requestAnimationFrame(function () {
        _this.recalculate();
      });
    });
    this.mutationObserver.observe(this.contentEl, {
      childList: true,
      subtree: true,
      characterData: true,
    });
  };
  SimpleBarCore.prototype.recalculate = function () {
    if (
      !this.heightAutoObserverEl ||
      !this.contentEl ||
      !this.contentWrapperEl ||
      !this.wrapperEl ||
      !this.placeholderEl
    )
      return;
    var elWindow = getElementWindow(this.el);
    this.elStyles = elWindow.getComputedStyle(this.el);
    this.isRtl = this.elStyles.direction === "rtl";
    var contentElOffsetWidth = this.contentEl.offsetWidth;
    var isHeightAuto = this.heightAutoObserverEl.offsetHeight <= 1;
    var isWidthAuto =
      this.heightAutoObserverEl.offsetWidth <= 1 || contentElOffsetWidth > 0;
    var contentWrapperElOffsetWidth = this.contentWrapperEl.offsetWidth;
    var elOverflowX = this.elStyles.overflowX;
    var elOverflowY = this.elStyles.overflowY;
    this.contentEl.style.padding = ""
      .concat(this.elStyles.paddingTop, " ")
      .concat(this.elStyles.paddingRight, " ")
      .concat(this.elStyles.paddingBottom, " ")
      .concat(this.elStyles.paddingLeft);
    this.wrapperEl.style.margin = "-"
      .concat(this.elStyles.paddingTop, " -")
      .concat(this.elStyles.paddingRight, " -")
      .concat(this.elStyles.paddingBottom, " -")
      .concat(this.elStyles.paddingLeft);
    var contentElScrollHeight = this.contentEl.scrollHeight;
    var contentElScrollWidth = this.contentEl.scrollWidth;
    this.contentWrapperEl.style.height = isHeightAuto ? "auto" : "100%";
    // Determine placeholder size
    this.placeholderEl.style.width = isWidthAuto
      ? "".concat(contentElOffsetWidth || contentElScrollWidth, "px")
      : "auto";
    this.placeholderEl.style.height = "".concat(contentElScrollHeight, "px");
    var contentWrapperElOffsetHeight = this.contentWrapperEl.offsetHeight;
    this.axis.x.isOverflowing =
      contentElOffsetWidth !== 0 && contentElScrollWidth > contentElOffsetWidth;
    this.axis.y.isOverflowing =
      contentElScrollHeight > contentWrapperElOffsetHeight;
    // Set isOverflowing to false if user explicitely set hidden overflow
    this.axis.x.isOverflowing =
      elOverflowX === "hidden" ? false : this.axis.x.isOverflowing;
    this.axis.y.isOverflowing =
      elOverflowY === "hidden" ? false : this.axis.y.isOverflowing;
    this.axis.x.forceVisible =
      this.options.forceVisible === "x" || this.options.forceVisible === true;
    this.axis.y.forceVisible =
      this.options.forceVisible === "y" || this.options.forceVisible === true;
    this.hideNativeScrollbar();
    // Set isOverflowing to false if scrollbar is not necessary (content is shorter than offset)
    var offsetForXScrollbar = this.axis.x.isOverflowing
      ? this.scrollbarWidth
      : 0;
    var offsetForYScrollbar = this.axis.y.isOverflowing
      ? this.scrollbarWidth
      : 0;
    this.axis.x.isOverflowing =
      this.axis.x.isOverflowing &&
      contentElScrollWidth > contentWrapperElOffsetWidth - offsetForYScrollbar;
    this.axis.y.isOverflowing =
      this.axis.y.isOverflowing &&
      contentElScrollHeight >
        contentWrapperElOffsetHeight - offsetForXScrollbar;
    this.axis.x.scrollbar.size = this.getScrollbarSize("x");
    this.axis.y.scrollbar.size = this.getScrollbarSize("y");
    if (this.axis.x.scrollbar.el)
      this.axis.x.scrollbar.el.style.width = "".concat(
        this.axis.x.scrollbar.size,
        "px"
      );
    if (this.axis.y.scrollbar.el)
      this.axis.y.scrollbar.el.style.height = "".concat(
        this.axis.y.scrollbar.size,
        "px"
      );
    this.positionScrollbar("x");
    this.positionScrollbar("y");
    this.toggleTrackVisibility("x");
    this.toggleTrackVisibility("y");
  };
  /**
   * Calculate scrollbar size
   */
  SimpleBarCore.prototype.getScrollbarSize = function (axis) {
    var _a, _b;
    if (axis === void 0) {
      axis = "y";
    }
    if (!this.axis[axis].isOverflowing || !this.contentEl) {
      return 0;
    }
    var contentSize = this.contentEl[this.axis[axis].scrollSizeAttr];
    var trackSize =
      (_b =
        (_a = this.axis[axis].track.el) === null || _a === void 0
          ? void 0
          : _a[this.axis[axis].offsetSizeAttr]) !== null && _b !== void 0
        ? _b
        : 0;
    var scrollbarRatio = trackSize / contentSize;
    var scrollbarSize;
    // Calculate new height/position of drag handle.
    scrollbarSize = Math.max(
      ~~(scrollbarRatio * trackSize),
      this.options.scrollbarMinSize
    );
    if (this.options.scrollbarMaxSize) {
      scrollbarSize = Math.min(scrollbarSize, this.options.scrollbarMaxSize);
    }
    return scrollbarSize;
  };
  SimpleBarCore.prototype.positionScrollbar = function (axis) {
    var _a, _b, _c;
    if (axis === void 0) {
      axis = "y";
    }
    var scrollbar = this.axis[axis].scrollbar;
    if (
      !this.axis[axis].isOverflowing ||
      !this.contentWrapperEl ||
      !scrollbar.el ||
      !this.elStyles
    ) {
      return;
    }
    var contentSize = this.contentWrapperEl[this.axis[axis].scrollSizeAttr];
    var trackSize =
      ((_a = this.axis[axis].track.el) === null || _a === void 0
        ? void 0
        : _a[this.axis[axis].offsetSizeAttr]) || 0;
    var hostSize = parseInt(this.elStyles[this.axis[axis].sizeAttr], 10);
    var scrollOffset = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];
    scrollOffset =
      axis === "x" &&
      this.isRtl &&
      ((_b = SimpleBarCore.getRtlHelpers()) === null || _b === void 0
        ? void 0
        : _b.isScrollOriginAtZero)
        ? -scrollOffset
        : scrollOffset;
    if (axis === "x" && this.isRtl) {
      scrollOffset = (
        (_c = SimpleBarCore.getRtlHelpers()) === null || _c === void 0
          ? void 0
          : _c.isScrollingToNegative
      )
        ? scrollOffset
        : -scrollOffset;
    }
    var scrollPourcent = scrollOffset / (contentSize - hostSize);
    var handleOffset = ~~((trackSize - scrollbar.size) * scrollPourcent);
    handleOffset =
      axis === "x" && this.isRtl
        ? -handleOffset + (trackSize - scrollbar.size)
        : handleOffset;
    scrollbar.el.style.transform =
      axis === "x"
        ? "translate3d(".concat(handleOffset, "px, 0, 0)")
        : "translate3d(0, ".concat(handleOffset, "px, 0)");
  };
  SimpleBarCore.prototype.toggleTrackVisibility = function (axis) {
    if (axis === void 0) {
      axis = "y";
    }
    var track = this.axis[axis].track.el;
    var scrollbar = this.axis[axis].scrollbar.el;
    if (!track || !scrollbar || !this.contentWrapperEl) return;
    if (this.axis[axis].isOverflowing || this.axis[axis].forceVisible) {
      track.style.visibility = "visible";
      this.contentWrapperEl.style[this.axis[axis].overflowAttr] = "scroll";
      this.el.classList.add(
        "".concat(this.classNames.scrollable, "-").concat(axis)
      );
    } else {
      track.style.visibility = "hidden";
      this.contentWrapperEl.style[this.axis[axis].overflowAttr] = "hidden";
      this.el.classList.remove(
        "".concat(this.classNames.scrollable, "-").concat(axis)
      );
    }
    // Even if forceVisible is enabled, scrollbar itself should be hidden
    if (this.axis[axis].isOverflowing) {
      scrollbar.style.display = "block";
    } else {
      scrollbar.style.display = "none";
    }
  };
  SimpleBarCore.prototype.showScrollbar = function (axis) {
    if (axis === void 0) {
      axis = "y";
    }
    if (this.axis[axis].isOverflowing && !this.axis[axis].scrollbar.isVisible) {
      addClasses$2(this.axis[axis].scrollbar.el, this.classNames.visible);
      this.axis[axis].scrollbar.isVisible = true;
    }
  };
  SimpleBarCore.prototype.hideScrollbar = function (axis) {
    if (axis === void 0) {
      axis = "y";
    }
    if (this.isDragging) return;
    if (this.axis[axis].isOverflowing && this.axis[axis].scrollbar.isVisible) {
      removeClasses(this.axis[axis].scrollbar.el, this.classNames.visible);
      this.axis[axis].scrollbar.isVisible = false;
    }
  };
  SimpleBarCore.prototype.hideNativeScrollbar = function () {
    if (!this.offsetEl) return;
    this.offsetEl.style[this.isRtl ? "left" : "right"] =
      this.axis.y.isOverflowing || this.axis.y.forceVisible
        ? "-".concat(this.scrollbarWidth, "px")
        : "0px";
    this.offsetEl.style.bottom =
      this.axis.x.isOverflowing || this.axis.x.forceVisible
        ? "-".concat(this.scrollbarWidth, "px")
        : "0px";
  };
  SimpleBarCore.prototype.onMouseMoveForAxis = function (axis) {
    if (axis === void 0) {
      axis = "y";
    }
    var currentAxis = this.axis[axis];
    if (!currentAxis.track.el || !currentAxis.scrollbar.el) return;
    currentAxis.track.rect = currentAxis.track.el.getBoundingClientRect();
    currentAxis.scrollbar.rect =
      currentAxis.scrollbar.el.getBoundingClientRect();
    if (this.isWithinBounds(currentAxis.track.rect)) {
      this.showScrollbar(axis);
      addClasses$2(currentAxis.track.el, this.classNames.hover);
      if (this.isWithinBounds(currentAxis.scrollbar.rect)) {
        addClasses$2(currentAxis.scrollbar.el, this.classNames.hover);
      } else {
        removeClasses(currentAxis.scrollbar.el, this.classNames.hover);
      }
    } else {
      removeClasses(currentAxis.track.el, this.classNames.hover);
      if (this.options.autoHide) {
        this.hideScrollbar(axis);
      }
    }
  };
  SimpleBarCore.prototype.onMouseLeaveForAxis = function (axis) {
    if (axis === void 0) {
      axis = "y";
    }
    removeClasses(this.axis[axis].track.el, this.classNames.hover);
    removeClasses(this.axis[axis].scrollbar.el, this.classNames.hover);
    if (this.options.autoHide) {
      this.hideScrollbar(axis);
    }
  };
  /**
   * on scrollbar handle drag movement starts
   */
  SimpleBarCore.prototype.onDragStart = function (e, axis) {
    var _a;
    if (axis === void 0) {
      axis = "y";
    }
    this.isDragging = true;
    var elDocument = getElementDocument(this.el);
    var elWindow = getElementWindow(this.el);
    var scrollbar = this.axis[axis].scrollbar;
    // Measure how far the user's mouse is from the top of the scrollbar drag handle.
    var eventOffset = axis === "y" ? e.pageY : e.pageX;
    this.axis[axis].dragOffset =
      eventOffset -
      (((_a = scrollbar.rect) === null || _a === void 0
        ? void 0
        : _a[this.axis[axis].offsetAttr]) || 0);
    this.draggedAxis = axis;
    addClasses$2(this.el, this.classNames.dragging);
    elDocument.addEventListener("mousemove", this.drag, true);
    elDocument.addEventListener("mouseup", this.onEndDrag, true);
    if (this.removePreventClickId === null) {
      elDocument.addEventListener("click", this.preventClick, true);
      elDocument.addEventListener("dblclick", this.preventClick, true);
    } else {
      elWindow.clearTimeout(this.removePreventClickId);
      this.removePreventClickId = null;
    }
  };
  SimpleBarCore.prototype.onTrackClick = function (e, axis) {
    var _this = this;
    var _a, _b, _c, _d;
    if (axis === void 0) {
      axis = "y";
    }
    var currentAxis = this.axis[axis];
    if (
      !this.options.clickOnTrack ||
      !currentAxis.scrollbar.el ||
      !this.contentWrapperEl
    )
      return;
    // Preventing the event's default to trigger click underneath
    e.preventDefault();
    var elWindow = getElementWindow(this.el);
    this.axis[axis].scrollbar.rect =
      currentAxis.scrollbar.el.getBoundingClientRect();
    var scrollbar = this.axis[axis].scrollbar;
    var scrollbarOffset =
      (_b =
        (_a = scrollbar.rect) === null || _a === void 0
          ? void 0
          : _a[this.axis[axis].offsetAttr]) !== null && _b !== void 0
        ? _b
        : 0;
    var hostSize = parseInt(
      (_d =
        (_c = this.elStyles) === null || _c === void 0
          ? void 0
          : _c[this.axis[axis].sizeAttr]) !== null && _d !== void 0
        ? _d
        : "0px",
      10
    );
    var scrolled = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];
    var t =
      axis === "y"
        ? this.mouseY - scrollbarOffset
        : this.mouseX - scrollbarOffset;
    var dir = t < 0 ? -1 : 1;
    var scrollSize = dir === -1 ? scrolled - hostSize : scrolled + hostSize;
    var speed = 40;
    var scrollTo = function () {
      if (!_this.contentWrapperEl) return;
      if (dir === -1) {
        if (scrolled > scrollSize) {
          scrolled -= speed;
          _this.contentWrapperEl[_this.axis[axis].scrollOffsetAttr] = scrolled;
          elWindow.requestAnimationFrame(scrollTo);
        }
      } else {
        if (scrolled < scrollSize) {
          scrolled += speed;
          _this.contentWrapperEl[_this.axis[axis].scrollOffsetAttr] = scrolled;
          elWindow.requestAnimationFrame(scrollTo);
        }
      }
    };
    scrollTo();
  };
  /**
   * Getter for content element
   */
  SimpleBarCore.prototype.getContentElement = function () {
    return this.contentEl;
  };
  /**
   * Getter for original scrolling element
   */
  SimpleBarCore.prototype.getScrollElement = function () {
    return this.contentWrapperEl;
  };
  SimpleBarCore.prototype.removeListeners = function () {
    var elWindow = getElementWindow(this.el);
    // Event listeners
    this.el.removeEventListener("mouseenter", this.onMouseEnter);
    this.el.removeEventListener("pointerdown", this.onPointerEvent, true);
    this.el.removeEventListener("mousemove", this.onMouseMove);
    this.el.removeEventListener("mouseleave", this.onMouseLeave);
    if (this.contentWrapperEl) {
      this.contentWrapperEl.removeEventListener("scroll", this.onScroll);
    }
    elWindow.removeEventListener("resize", this.onWindowResize);
    if (this.mutationObserver) {
      this.mutationObserver.disconnect();
    }
    if (this.resizeObserver) {
      this.resizeObserver.disconnect();
    }
    // Cancel all debounced functions
    this.onMouseMove.cancel();
    this.onWindowResize.cancel();
    this.onStopScrolling.cancel();
    this.onMouseEntered.cancel();
  };
  /**
   * Remove all listeners from DOM nodes
   */
  SimpleBarCore.prototype.unMount = function () {
    this.removeListeners();
  };
  /**
   * Check if mouse is within bounds
   */
  SimpleBarCore.prototype.isWithinBounds = function (bbox) {
    return (
      this.mouseX >= bbox.left &&
      this.mouseX <= bbox.left + bbox.width &&
      this.mouseY >= bbox.top &&
      this.mouseY <= bbox.top + bbox.height
    );
  };
  /**
   * Find element children matches query
   */
  SimpleBarCore.prototype.findChild = function (el, query) {
    var matches =
      el.matches ||
      el.webkitMatchesSelector ||
      el.mozMatchesSelector ||
      el.msMatchesSelector;
    return Array.prototype.filter.call(el.children, function (child) {
      return matches.call(child, query);
    })[0];
  };
  SimpleBarCore.rtlHelpers = null;
  SimpleBarCore.defaultOptions = {
    forceVisible: false,
    clickOnTrack: true,
    scrollbarMinSize: 25,
    scrollbarMaxSize: 0,
    ariaLabel: "scrollable content",
    tabIndex: 0,
    classNames: {
      contentEl: "simplebar-content",
      contentWrapper: "simplebar-content-wrapper",
      offset: "simplebar-offset",
      mask: "simplebar-mask",
      wrapper: "simplebar-wrapper",
      placeholder: "simplebar-placeholder",
      scrollbar: "simplebar-scrollbar",
      track: "simplebar-track",
      heightAutoObserverWrapperEl: "simplebar-height-auto-observer-wrapper",
      heightAutoObserverEl: "simplebar-height-auto-observer",
      visible: "simplebar-visible",
      horizontal: "simplebar-horizontal",
      vertical: "simplebar-vertical",
      hover: "simplebar-hover",
      dragging: "simplebar-dragging",
      scrolling: "simplebar-scrolling",
      scrollable: "simplebar-scrollable",
      mouseEntered: "simplebar-mouse-entered",
    },
    scrollableNode: null,
    contentNode: null,
    autoHide: true,
  };
  /**
   * Static functions
   */
  SimpleBarCore.getOptions = getOptions$2;
  SimpleBarCore.helpers = helpers;
  return SimpleBarCore;
})();

/**
 * simplebar - v6.3.2
 * Scrollbars, simpler.
 * https://grsmto.github.io/simplebar/
 *
 * Made by Adrien Denat from a fork by Jonathan Nicol
 * Under MIT License
 */

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function (d, b) {
  extendStatics =
    Object.setPrototypeOf ||
    ({ __proto__: [] } instanceof Array &&
      function (d, b) {
        d.__proto__ = b;
      }) ||
    function (d, b) {
      for (var p in b)
        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError(
      "Class extends value " + String(b) + " is not a constructor or null"
    );
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype =
    b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
}

var _a = SimpleBarCore.helpers,
  getOptions = _a.getOptions,
  addClasses = _a.addClasses,
  canUseDOM = _a.canUseDOM;
var SimpleBar = /** @class */ (function (_super) {
  __extends(SimpleBar, _super);
  function SimpleBar() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var _this = _super.apply(this, args) || this;
    // // Save a reference to the instance, so we know this DOM node has already been instancied
    SimpleBar.instances.set(args[0], _this);
    return _this;
  }
  SimpleBar.initDOMLoadedElements = function () {
    document.removeEventListener(
      "DOMContentLoaded",
      this.initDOMLoadedElements
    );
    window.removeEventListener("load", this.initDOMLoadedElements);
    Array.prototype.forEach.call(
      document.querySelectorAll("[data-simplebar]"),
      function (el) {
        if (
          el.getAttribute("data-simplebar") !== "init" &&
          !SimpleBar.instances.has(el)
        )
          new SimpleBar(el, getOptions(el.attributes));
      }
    );
  };
  SimpleBar.removeObserver = function () {
    var _a;
    (_a = SimpleBar.globalObserver) === null || _a === void 0
      ? void 0
      : _a.disconnect();
  };
  SimpleBar.prototype.initDOM = function () {
    var _this = this;
    var _a, _b, _c;
    // make sure this element doesn't have the elements yet
    if (
      !Array.prototype.filter.call(this.el.children, function (child) {
        return child.classList.contains(_this.classNames.wrapper);
      }).length
    ) {
      // Prepare DOM
      this.wrapperEl = document.createElement("div");
      this.contentWrapperEl = document.createElement("div");
      this.offsetEl = document.createElement("div");
      this.maskEl = document.createElement("div");
      this.contentEl = document.createElement("div");
      this.placeholderEl = document.createElement("div");
      this.heightAutoObserverWrapperEl = document.createElement("div");
      this.heightAutoObserverEl = document.createElement("div");
      addClasses(this.wrapperEl, this.classNames.wrapper);
      addClasses(this.contentWrapperEl, this.classNames.contentWrapper);
      addClasses(this.offsetEl, this.classNames.offset);
      addClasses(this.maskEl, this.classNames.mask);
      addClasses(this.contentEl, this.classNames.contentEl);
      addClasses(this.placeholderEl, this.classNames.placeholder);
      addClasses(
        this.heightAutoObserverWrapperEl,
        this.classNames.heightAutoObserverWrapperEl
      );
      addClasses(
        this.heightAutoObserverEl,
        this.classNames.heightAutoObserverEl
      );
      while (this.el.firstChild) {
        this.contentEl.appendChild(this.el.firstChild);
      }
      this.contentWrapperEl.appendChild(this.contentEl);
      this.offsetEl.appendChild(this.contentWrapperEl);
      this.maskEl.appendChild(this.offsetEl);
      this.heightAutoObserverWrapperEl.appendChild(this.heightAutoObserverEl);
      this.wrapperEl.appendChild(this.heightAutoObserverWrapperEl);
      this.wrapperEl.appendChild(this.maskEl);
      this.wrapperEl.appendChild(this.placeholderEl);
      this.el.appendChild(this.wrapperEl);
      (_a = this.contentWrapperEl) === null || _a === void 0
        ? void 0
        : _a.setAttribute("tabindex", this.options.tabIndex.toString());
      (_b = this.contentWrapperEl) === null || _b === void 0
        ? void 0
        : _b.setAttribute("role", "region");
      (_c = this.contentWrapperEl) === null || _c === void 0
        ? void 0
        : _c.setAttribute("aria-label", this.options.ariaLabel);
    }
    if (!this.axis.x.track.el || !this.axis.y.track.el) {
      var track = document.createElement("div");
      var scrollbar = document.createElement("div");
      addClasses(track, this.classNames.track);
      addClasses(scrollbar, this.classNames.scrollbar);
      track.appendChild(scrollbar);
      this.axis.x.track.el = track.cloneNode(true);
      addClasses(this.axis.x.track.el, this.classNames.horizontal);
      this.axis.y.track.el = track.cloneNode(true);
      addClasses(this.axis.y.track.el, this.classNames.vertical);
      this.el.appendChild(this.axis.x.track.el);
      this.el.appendChild(this.axis.y.track.el);
    }
    SimpleBarCore.prototype.initDOM.call(this);
    this.el.setAttribute("data-simplebar", "init");
  };
  SimpleBar.prototype.unMount = function () {
    SimpleBarCore.prototype.unMount.call(this);
    SimpleBar.instances["delete"](this.el);
  };
  SimpleBar.initHtmlApi = function () {
    this.initDOMLoadedElements = this.initDOMLoadedElements.bind(this);
    // MutationObserver is IE11+
    if (typeof MutationObserver !== "undefined") {
      // Mutation observer to observe dynamically added elements
      this.globalObserver = new MutationObserver(SimpleBar.handleMutations);
      this.globalObserver.observe(document, { childList: true, subtree: true });
    }
    // Taken from jQuery `ready` function
    // Instantiate elements already present on the page
    if (
      document.readyState === "complete" || // @ts-ignore: IE specific
      (document.readyState !== "loading" && !document.documentElement.doScroll)
    ) {
      // Handle it asynchronously to allow scripts the opportunity to delay init
      window.setTimeout(this.initDOMLoadedElements);
    } else {
      document.addEventListener("DOMContentLoaded", this.initDOMLoadedElements);
      window.addEventListener("load", this.initDOMLoadedElements);
    }
  };
  SimpleBar.handleMutations = function (mutations) {
    mutations.forEach(function (mutation) {
      mutation.addedNodes.forEach(function (addedNode) {
        if (addedNode.nodeType === 1) {
          if (addedNode.hasAttribute("data-simplebar")) {
            !SimpleBar.instances.has(addedNode) &&
              document.documentElement.contains(addedNode) &&
              new SimpleBar(addedNode, getOptions(addedNode.attributes));
          } else {
            addedNode
              .querySelectorAll("[data-simplebar]")
              .forEach(function (el) {
                if (
                  el.getAttribute("data-simplebar") !== "init" &&
                  !SimpleBar.instances.has(el) &&
                  document.documentElement.contains(el)
                )
                  new SimpleBar(el, getOptions(el.attributes));
              });
          }
        }
      });
      mutation.removedNodes.forEach(function (removedNode) {
        var _a;
        if (removedNode.nodeType === 1) {
          if (removedNode.getAttribute("data-simplebar") === "init") {
            !document.documentElement.contains(removedNode) &&
              ((_a = SimpleBar.instances.get(removedNode)) === null ||
              _a === void 0
                ? void 0
                : _a.unMount());
          } else {
            Array.prototype.forEach.call(
              removedNode.querySelectorAll('[data-simplebar="init"]'),
              function (el) {
                var _a;
                !document.documentElement.contains(el) &&
                  ((_a = SimpleBar.instances.get(el)) === null || _a === void 0
                    ? void 0
                    : _a.unMount());
              }
            );
          }
        }
      });
    });
  };
  SimpleBar.instances = new WeakMap();
  return SimpleBar;
})(SimpleBarCore);
/**
 * HTML API
 * Called only in a browser env.
 */
if (canUseDOM) {
  SimpleBar.initHtmlApi();
}

const swiper = "";

const pagination = "";

function _assertThisInitialized$1(self) {
  if (self === void 0) {
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called"
    );
  }
  return self;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

/*!
 * GSAP 3.13.0
 * https://gsap.com
 *
 * @license Copyright 2008-2025, GreenSock. All rights reserved.
 * Subject to the terms at https://gsap.com/standard-license
 * @author: Jack Doyle, jack@greensock.com
 */

/* eslint-disable */
var _config = {
    autoSleep: 120,
    force3D: "auto",
    nullTargetWarn: 1,
    units: {
      lineHeight: "",
    },
  },
  _defaults$1 = {
    duration: 0.5,
    overwrite: false,
    delay: 0,
  },
  _suppressOverwrites$1,
  _reverting$2,
  _context$2,
  _bigNum$1 = 1e8,
  _tinyNum = 1 / _bigNum$1,
  _2PI = Math.PI * 2,
  _HALF_PI = _2PI / 4,
  _gsID = 0,
  _sqrt$1 = Math.sqrt,
  _cos$1 = Math.cos,
  _sin$1 = Math.sin,
  _isString$2 = function _isString(value) {
    return typeof value === "string";
  },
  _isFunction$1 = function _isFunction(value) {
    return typeof value === "function";
  },
  _isNumber$2 = function _isNumber(value) {
    return typeof value === "number";
  },
  _isUndefined$1 = function _isUndefined(value) {
    return typeof value === "undefined";
  },
  _isObject$1 = function _isObject(value) {
    return typeof value === "object";
  },
  _isNotFalse = function _isNotFalse(value) {
    return value !== false;
  },
  _windowExists$2 = function _windowExists() {
    return typeof window !== "undefined";
  },
  _isFuncOrString = function _isFuncOrString(value) {
    return _isFunction$1(value) || _isString$2(value);
  },
  _isTypedArray =
    (typeof ArrayBuffer === "function" && ArrayBuffer.isView) || function () {},
  // note: IE10 has ArrayBuffer, but NOT ArrayBuffer.isView().
  _isArray = Array.isArray,
  _strictNumExp = /(?:-?\.?\d|\.)+/gi,
  //only numbers (including negatives and decimals) but NOT relative values.
  _numExp$1 = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,
  //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
  _numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
  _complexStringNumExp = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,
  //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.
  _relExp = /[+-]=-?[.\d]+/,
  _delimitedValueExp = /[^,'"\[\]\s]+/gi,
  // previously /[#\-+.]*\b[a-z\d\-=+%.]+/gi but didn't catch special characters.
  _unitExp = /^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,
  _globalTimeline,
  _win$4,
  _coreInitted$2,
  _doc$4,
  _globals = {},
  _installScope = {},
  _coreReady,
  _install = function _install(scope) {
    return (_installScope = _merge(scope, _globals)) && gsap$3;
  },
  _missingPlugin = function _missingPlugin(property, value) {
    return console.warn(
      "Invalid property",
      property,
      "set to",
      value,
      "Missing plugin? gsap.registerPlugin()"
    );
  },
  _warn = function _warn(message, suppress) {
    return !suppress && console.warn(message);
  },
  _addGlobal = function _addGlobal(name, obj) {
    return (
      (name &&
        (_globals[name] = obj) &&
        _installScope &&
        (_installScope[name] = obj)) ||
      _globals
    );
  },
  _emptyFunc$1 = function _emptyFunc() {
    return 0;
  },
  _startAtRevertConfig = {
    suppressEvents: true,
    isStart: true,
    kill: false,
  },
  _revertConfigNoKill = {
    suppressEvents: true,
    kill: false,
  },
  _revertConfig = {
    suppressEvents: true,
  },
  _reservedProps = {},
  _lazyTweens = [],
  _lazyLookup = {},
  _lastRenderedFrame,
  _plugins = {},
  _effects = {},
  _nextGCFrame = 30,
  _harnessPlugins = [],
  _callbackNames = "",
  _harness = function _harness(targets) {
    var target = targets[0],
      harnessPlugin,
      i;
    _isObject$1(target) || _isFunction$1(target) || (targets = [targets]);

    if (!(harnessPlugin = (target._gsap || {}).harness)) {
      // find the first target with a harness. We assume targets passed into an animation will be of similar type, meaning the same kind of harness can be used for them all (performance optimization)
      i = _harnessPlugins.length;

      while (i-- && !_harnessPlugins[i].targetTest(target)) {}

      harnessPlugin = _harnessPlugins[i];
    }

    i = targets.length;

    while (i--) {
      (targets[i] &&
        (targets[i]._gsap ||
          (targets[i]._gsap = new GSCache(targets[i], harnessPlugin)))) ||
        targets.splice(i, 1);
    }

    return targets;
  },
  _getCache = function _getCache(target) {
    return target._gsap || _harness(toArray(target))[0]._gsap;
  },
  _getProperty = function _getProperty(target, property, v) {
    return (v = target[property]) && _isFunction$1(v)
      ? target[property]()
      : (_isUndefined$1(v) &&
          target.getAttribute &&
          target.getAttribute(property)) ||
          v;
  },
  _forEachName = function _forEachName(names, func) {
    return (names = names.split(",")).forEach(func) || names;
  },
  //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).
  _round$2 = function _round(value) {
    return Math.round(value * 100000) / 100000 || 0;
  },
  _roundPrecise$1 = function _roundPrecise(value) {
    return Math.round(value * 10000000) / 10000000 || 0;
  },
  // increased precision mostly for timing values.
  _parseRelative = function _parseRelative(start, value) {
    var operator = value.charAt(0),
      end = parseFloat(value.substr(2));
    start = parseFloat(start);
    return operator === "+"
      ? start + end
      : operator === "-"
      ? start - end
      : operator === "*"
      ? start * end
      : start / end;
  },
  _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {
    //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.
    var l = toFind.length,
      i = 0;

    for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l; ) {}

    return i < l;
  },
  _lazyRender = function _lazyRender() {
    var l = _lazyTweens.length,
      a = _lazyTweens.slice(0),
      i,
      tween;

    _lazyLookup = {};
    _lazyTweens.length = 0;

    for (i = 0; i < l; i++) {
      tween = a[i];
      tween &&
        tween._lazy &&
        (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
    }
  },
  _isRevertWorthy = function _isRevertWorthy(animation) {
    return !!(animation._initted || animation._startAt || animation.add);
  },
  _lazySafeRender = function _lazySafeRender(
    animation,
    time,
    suppressEvents,
    force
  ) {
    _lazyTweens.length && !_reverting$2 && _lazyRender();
    animation.render(
      time,
      suppressEvents,
      force || !!(_reverting$2 && time < 0 && _isRevertWorthy(animation))
    );
    _lazyTweens.length && !_reverting$2 && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
  },
  _numericIfPossible = function _numericIfPossible(value) {
    var n = parseFloat(value);
    return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2
      ? n
      : _isString$2(value)
      ? value.trim()
      : value;
  },
  _passThrough$1 = function _passThrough(p) {
    return p;
  },
  _setDefaults$1 = function _setDefaults(obj, defaults) {
    for (var p in defaults) {
      p in obj || (obj[p] = defaults[p]);
    }

    return obj;
  },
  _setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {
    return function (obj, defaults) {
      for (var p in defaults) {
        p in obj ||
          (p === "duration" && excludeDuration) ||
          p === "ease" ||
          (obj[p] = defaults[p]);
      }
    };
  },
  _merge = function _merge(base, toMerge) {
    for (var p in toMerge) {
      base[p] = toMerge[p];
    }

    return base;
  },
  _mergeDeep = function _mergeDeep(base, toMerge) {
    for (var p in toMerge) {
      p !== "__proto__" &&
        p !== "constructor" &&
        p !== "prototype" &&
        (base[p] = _isObject$1(toMerge[p])
          ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p])
          : toMerge[p]);
    }

    return base;
  },
  _copyExcluding = function _copyExcluding(obj, excluding) {
    var copy = {},
      p;

    for (p in obj) {
      p in excluding || (copy[p] = obj[p]);
    }

    return copy;
  },
  _inheritDefaults = function _inheritDefaults(vars) {
    var parent = vars.parent || _globalTimeline,
      func = vars.keyframes
        ? _setKeyframeDefaults(_isArray(vars.keyframes))
        : _setDefaults$1;

    if (_isNotFalse(vars.inherit)) {
      while (parent) {
        func(vars, parent.vars.defaults);
        parent = parent.parent || parent._dp;
      }
    }

    return vars;
  },
  _arraysMatch = function _arraysMatch(a1, a2) {
    var i = a1.length,
      match = i === a2.length;

    while (match && i-- && a1[i] === a2[i]) {}

    return i < 0;
  },
  _addLinkedListItem = function _addLinkedListItem(
    parent,
    child,
    firstProp,
    lastProp,
    sortBy
  ) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }

    if (lastProp === void 0) {
      lastProp = "_last";
    }

    var prev = parent[lastProp],
      t;

    if (sortBy) {
      t = child[sortBy];

      while (prev && prev[sortBy] > t) {
        prev = prev._prev;
      }
    }

    if (prev) {
      child._next = prev._next;
      prev._next = child;
    } else {
      child._next = parent[firstProp];
      parent[firstProp] = child;
    }

    if (child._next) {
      child._next._prev = child;
    } else {
      parent[lastProp] = child;
    }

    child._prev = prev;
    child.parent = child._dp = parent;
    return child;
  },
  _removeLinkedListItem = function _removeLinkedListItem(
    parent,
    child,
    firstProp,
    lastProp
  ) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }

    if (lastProp === void 0) {
      lastProp = "_last";
    }

    var prev = child._prev,
      next = child._next;

    if (prev) {
      prev._next = next;
    } else if (parent[firstProp] === child) {
      parent[firstProp] = next;
    }

    if (next) {
      next._prev = prev;
    } else if (parent[lastProp] === child) {
      parent[lastProp] = prev;
    }

    child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.
  },
  _removeFromParent = function _removeFromParent(
    child,
    onlyIfParentHasAutoRemove
  ) {
    child.parent &&
      (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) &&
      child.parent.remove &&
      child.parent.remove(child);
    child._act = 0;
  },
  _uncache = function _uncache(animation, child) {
    if (
      animation &&
      (!child || child._end > animation._dur || child._start < 0)
    ) {
      // performance optimization: if a child animation is passed in we should only uncache if that child EXTENDS the animation (its end time is beyond the end)
      var a = animation;

      while (a) {
        a._dirty = 1;
        a = a.parent;
      }
    }

    return animation;
  },
  _recacheAncestors = function _recacheAncestors(animation) {
    var parent = animation.parent;

    while (parent && parent.parent) {
      //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.
      parent._dirty = 1;
      parent.totalDuration();
      parent = parent.parent;
    }

    return animation;
  },
  _rewindStartAt = function _rewindStartAt(
    tween,
    totalTime,
    suppressEvents,
    force
  ) {
    return (
      tween._startAt &&
      (_reverting$2
        ? tween._startAt.revert(_revertConfigNoKill)
        : (tween.vars.immediateRender && !tween.vars.autoRevert) ||
          tween._startAt.render(totalTime, true, force))
    );
  },
  _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {
    return (
      !animation || (animation._ts && _hasNoPausedAncestors(animation.parent))
    );
  },
  _elapsedCycleDuration = function _elapsedCycleDuration(animation) {
    return animation._repeat
      ? _animationCycle(
          animation._tTime,
          (animation = animation.duration() + animation._rDelay)
        ) * animation
      : 0;
  },
  // feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.
  _animationCycle = function _animationCycle(tTime, cycleDuration) {
    var whole = Math.floor((tTime = _roundPrecise$1(tTime / cycleDuration)));
    return tTime && whole === tTime ? whole - 1 : whole;
  },
  _parentToChildTotalTime = function _parentToChildTotalTime(
    parentTime,
    child
  ) {
    return (
      (parentTime - child._start) * child._ts +
      (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur)
    );
  },
  _setEnd = function _setEnd(animation) {
    return (animation._end = _roundPrecise$1(
      animation._start +
        (animation._tDur /
          Math.abs(animation._ts || animation._rts || _tinyNum) || 0)
    ));
  },
  _alignPlayhead = function _alignPlayhead(animation, totalTime) {
    // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.
    var parent = animation._dp;

    if (parent && parent.smoothChildTiming && animation._ts) {
      animation._start = _roundPrecise$1(
        parent._time -
          (animation._ts > 0
            ? totalTime / animation._ts
            : ((animation._dirty
                ? animation.totalDuration()
                : animation._tDur) -
                totalTime) /
              -animation._ts)
      );

      _setEnd(animation);

      parent._dirty || _uncache(parent, animation); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
    }

    return animation;
  },
  /*
_totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {
	let cycleDuration = duration + repeatDelay,
		time = _round(clampedTotalTime % cycleDuration);
	if (time > duration) {
		time = duration;
	}
	return (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;
},
*/
  _postAddChecks = function _postAddChecks(timeline, child) {
    var t;

    if (
      child._time ||
      (!child._dur && child._initted) ||
      (child._start < timeline._time && (child._dur || !child.add))
    ) {
      // in case, for example, the _start is moved on a tween that has already rendered, or if it's being inserted into a timeline BEFORE where the playhead is currently. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning. Special case: if it's a timeline (has .add() method) and no duration, we can skip rendering because the user may be populating it AFTER adding it to a parent timeline (unconventional, but possible, and we wouldn't want it to get removed if the parent's autoRemoveChildren is true).
      t = _parentToChildTotalTime(timeline.rawTime(), child);

      if (
        !child._dur ||
        _clamp$1(0, child.totalDuration(), t) - child._tTime > _tinyNum
      ) {
        child.render(t, true);
      }
    } //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.

    if (
      _uncache(timeline, child)._dp &&
      timeline._initted &&
      timeline._time >= timeline._dur &&
      timeline._ts
    ) {
      //in case any of the ancestors had completed but should now be enabled...
      if (timeline._dur < timeline.duration()) {
        t = timeline;

        while (t._dp) {
          t.rawTime() >= 0 && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.

          t = t._dp;
        }
      }

      timeline._zTime = -_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.
    }
  },
  _addToTimeline = function _addToTimeline(
    timeline,
    child,
    position,
    skipChecks
  ) {
    child.parent && _removeFromParent(child);
    child._start = _roundPrecise$1(
      (_isNumber$2(position)
        ? position
        : position || timeline !== _globalTimeline
        ? _parsePosition$1(timeline, position, child)
        : timeline._time) + child._delay
    );
    child._end = _roundPrecise$1(
      child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0)
    );

    _addLinkedListItem(
      timeline,
      child,
      "_first",
      "_last",
      timeline._sort ? "_start" : 0
    );

    _isFromOrFromStart(child) || (timeline._recent = child);
    skipChecks || _postAddChecks(timeline, child);
    timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime); // if the timeline is reversed and the new child makes it longer, we may need to adjust the parent's _start (push it back)

    return timeline;
  },
  _scrollTrigger = function _scrollTrigger(animation, trigger) {
    return (
      (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger)) &&
      _globals.ScrollTrigger.create(trigger, animation)
    );
  },
  _attemptInitTween = function _attemptInitTween(
    tween,
    time,
    force,
    suppressEvents,
    tTime
  ) {
    _initTween(tween, time, tTime);

    if (!tween._initted) {
      return 1;
    }

    if (
      !force &&
      tween._pt &&
      !_reverting$2 &&
      ((tween._dur && tween.vars.lazy !== false) ||
        (!tween._dur && tween.vars.lazy)) &&
      _lastRenderedFrame !== _ticker.frame
    ) {
      _lazyTweens.push(tween);

      tween._lazy = [tTime, suppressEvents];
      return 1;
    }
  },
  _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {
    var parent = _ref.parent;
    return (
      parent &&
      parent._ts &&
      parent._initted &&
      !parent._lock &&
      (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent))
    );
  },
  // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0
  _isFromOrFromStart = function _isFromOrFromStart(_ref2) {
    var data = _ref2.data;
    return data === "isFromStart" || data === "isStart";
  },
  _renderZeroDurationTween = function _renderZeroDurationTween(
    tween,
    totalTime,
    suppressEvents,
    force
  ) {
    var prevRatio = tween.ratio,
      ratio =
        totalTime < 0 ||
        (!totalTime &&
          ((!tween._start &&
            _parentPlayheadIsBeforeStart(tween) &&
            !(!tween._initted && _isFromOrFromStart(tween))) ||
            ((tween._ts < 0 || tween._dp._ts < 0) &&
              !_isFromOrFromStart(tween))))
          ? 0
          : 1,
      // if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0. Edge case: if a from() or fromTo() stagger tween is placed later in a timeline, the "startAt" zero-duration tween could initially render at a time when the parent timeline's playhead is technically BEFORE where this tween is, so make sure that any "from" and "fromTo" startAt tweens are rendered the first time at a ratio of 1.
      repeatDelay = tween._rDelay,
      tTime = 0,
      pt,
      iteration,
      prevIteration;

    if (repeatDelay && tween._repeat) {
      // in case there's a zero-duration tween that has a repeat with a repeatDelay
      tTime = _clamp$1(0, tween._tDur, totalTime);
      iteration = _animationCycle(tTime, repeatDelay);
      tween._yoyo && iteration & 1 && (ratio = 1 - ratio);

      if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {
        // if iteration changed
        prevRatio = 1 - ratio;
        tween.vars.repeatRefresh && tween._initted && tween.invalidate();
      }
    }

    if (
      ratio !== prevRatio ||
      _reverting$2 ||
      force ||
      tween._zTime === _tinyNum ||
      (!totalTime && tween._zTime)
    ) {
      if (
        !tween._initted &&
        _attemptInitTween(tween, totalTime, force, suppressEvents, tTime)
      ) {
        // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
        return;
      }

      prevIteration = tween._zTime;
      tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

      suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.

      tween.ratio = ratio;
      tween._from && (ratio = 1 - ratio);
      tween._time = 0;
      tween._tTime = tTime;
      pt = tween._pt;

      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }

      totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);
      tween._onUpdate && !suppressEvents && _callback$1(tween, "onUpdate");
      tTime &&
        tween._repeat &&
        !suppressEvents &&
        tween.parent &&
        _callback$1(tween, "onRepeat");

      if (
        (totalTime >= tween._tDur || totalTime < 0) &&
        tween.ratio === ratio
      ) {
        ratio && _removeFromParent(tween, 1);

        if (!suppressEvents && !_reverting$2) {
          _callback$1(tween, ratio ? "onComplete" : "onReverseComplete", true);

          tween._prom && tween._prom();
        }
      }
    } else if (!tween._zTime) {
      tween._zTime = totalTime;
    }
  },
  _findNextPauseTween = function _findNextPauseTween(
    animation,
    prevTime,
    time
  ) {
    var child;

    if (time > prevTime) {
      child = animation._first;

      while (child && child._start <= time) {
        if (child.data === "isPause" && child._start > prevTime) {
          return child;
        }

        child = child._next;
      }
    } else {
      child = animation._last;

      while (child && child._start >= time) {
        if (child.data === "isPause" && child._start < prevTime) {
          return child;
        }

        child = child._prev;
      }
    }
  },
  _setDuration = function _setDuration(
    animation,
    duration,
    skipUncache,
    leavePlayhead
  ) {
    var repeat = animation._repeat,
      dur = _roundPrecise$1(duration) || 0,
      totalProgress = animation._tTime / animation._tDur;
    totalProgress &&
      !leavePlayhead &&
      (animation._time *= dur / animation._dur);
    animation._dur = dur;
    animation._tDur = !repeat
      ? dur
      : repeat < 0
      ? 1e10
      : _roundPrecise$1(dur * (repeat + 1) + animation._rDelay * repeat);
    totalProgress > 0 &&
      !leavePlayhead &&
      _alignPlayhead(
        animation,
        (animation._tTime = animation._tDur * totalProgress)
      );
    animation.parent && _setEnd(animation);
    skipUncache || _uncache(animation.parent, animation);
    return animation;
  },
  _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {
    return animation instanceof Timeline
      ? _uncache(animation)
      : _setDuration(animation, animation._dur);
  },
  _zeroPosition = {
    _start: 0,
    endTime: _emptyFunc$1,
    totalDuration: _emptyFunc$1,
  },
  _parsePosition$1 = function _parsePosition(
    animation,
    position,
    percentAnimation
  ) {
    var labels = animation.labels,
      recent = animation._recent || _zeroPosition,
      clippedDuration =
        animation.duration() >= _bigNum$1
          ? recent.endTime(false)
          : animation._dur,
      //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
      i,
      offset,
      isPercent;

    if (_isString$2(position) && (isNaN(position) || position in labels)) {
      //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
      offset = position.charAt(0);
      isPercent = position.substr(-1) === "%";
      i = position.indexOf("=");

      if (offset === "<" || offset === ">") {
        i >= 0 && (position = position.replace(/=/, ""));
        return (
          (offset === "<"
            ? recent._start
            : recent.endTime(recent._repeat >= 0)) +
          (parseFloat(position.substr(1)) || 0) *
            (isPercent
              ? (i < 0 ? recent : percentAnimation).totalDuration() / 100
              : 1)
        );
      }

      if (i < 0) {
        position in labels || (labels[position] = clippedDuration);
        return labels[position];
      }

      offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));

      if (isPercent && percentAnimation) {
        offset =
          (offset / 100) *
          (_isArray(percentAnimation)
            ? percentAnimation[0]
            : percentAnimation
          ).totalDuration();
      }

      return i > 1
        ? _parsePosition(
            animation,
            position.substr(0, i - 1),
            percentAnimation
          ) + offset
        : clippedDuration + offset;
    }

    return position == null ? clippedDuration : +position;
  },
  _createTweenType = function _createTweenType(type, params, timeline) {
    var isLegacy = _isNumber$2(params[1]),
      varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),
      vars = params[varsIndex],
      irVars,
      parent;

    isLegacy && (vars.duration = params[1]);
    vars.parent = timeline;

    if (type) {
      irVars = vars;
      parent = timeline;

      while (parent && !("immediateRender" in irVars)) {
        // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.
        irVars = parent.vars.defaults || {};
        parent = _isNotFalse(parent.vars.inherit) && parent.parent;
      }

      vars.immediateRender = _isNotFalse(irVars.immediateRender);
      type < 2
        ? (vars.runBackwards = 1)
        : (vars.startAt = params[varsIndex - 1]); // "from" vars
    }

    return new Tween(params[0], vars, params[varsIndex + 1]);
  },
  _conditionalReturn = function _conditionalReturn(value, func) {
    return value || value === 0 ? func(value) : func;
  },
  _clamp$1 = function _clamp(min, max, value) {
    return value < min ? min : value > max ? max : value;
  },
  getUnit = function getUnit(value, v) {
    return !_isString$2(value) || !(v = _unitExp.exec(value)) ? "" : v[1];
  },
  // note: protect against padded numbers as strings, like "100.100". That shouldn't return "00" as the unit. If it's numeric, return no unit.
  clamp = function clamp(min, max, value) {
    return _conditionalReturn(value, function (v) {
      return _clamp$1(min, max, v);
    });
  },
  _slice = [].slice,
  _isArrayLike = function _isArrayLike(value, nonEmpty) {
    return (
      value &&
      _isObject$1(value) &&
      "length" in value &&
      ((!nonEmpty && !value.length) ||
        (value.length - 1 in value && _isObject$1(value[0]))) &&
      !value.nodeType &&
      value !== _win$4
    );
  },
  _flatten = function _flatten(ar, leaveStrings, accumulator) {
    if (accumulator === void 0) {
      accumulator = [];
    }

    return (
      ar.forEach(function (value) {
        var _accumulator;

        return (_isString$2(value) && !leaveStrings) || _isArrayLike(value, 1)
          ? (_accumulator = accumulator).push.apply(
              _accumulator,
              toArray(value)
            )
          : accumulator.push(value);
      }) || accumulator
    );
  },
  //takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.
  toArray = function toArray(value, scope, leaveStrings) {
    return _context$2 && !scope && _context$2.selector
      ? _context$2.selector(value)
      : _isString$2(value) && !leaveStrings && (_coreInitted$2 || !_wake())
      ? _slice.call((scope || _doc$4).querySelectorAll(value), 0)
      : _isArray(value)
      ? _flatten(value, leaveStrings)
      : _isArrayLike(value)
      ? _slice.call(value, 0)
      : value
      ? [value]
      : [];
  },
  selector = function selector(value) {
    value = toArray(value)[0] || _warn("Invalid scope") || {};
    return function (v) {
      var el = value.current || value.nativeElement || value;
      return toArray(
        v,
        el.querySelectorAll
          ? el
          : el === value
          ? _warn("Invalid scope") || _doc$4.createElement("div")
          : value
      );
    };
  },
  shuffle = function shuffle(a) {
    return a.sort(function () {
      return 0.5 - Math.random();
    });
  },
  // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = (Math.random() * i) | 0, v = a[--i], a[i] = a[j], a[j] = v); return a;
  //for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following
  distribute = function distribute(v) {
    if (_isFunction$1(v)) {
      return v;
    }

    var vars = _isObject$1(v)
        ? v
        : {
            each: v,
          },
      //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total "amount" that's chunked out among them all.
      ease = _parseEase(vars.ease),
      from = vars.from || 0,
      base = parseFloat(vars.base) || 0,
      cache = {},
      isDecimal = from > 0 && from < 1,
      ratios = isNaN(from) || isDecimal,
      axis = vars.axis,
      ratioX = from,
      ratioY = from;

    if (_isString$2(from)) {
      ratioX = ratioY =
        {
          center: 0.5,
          edges: 0.5,
          end: 1,
        }[from] || 0;
    } else if (!isDecimal && ratios) {
      ratioX = from[0];
      ratioY = from[1];
    }

    return function (i, target, a) {
      var l = (a || vars).length,
        distances = cache[l],
        originX,
        originY,
        x,
        y,
        d,
        j,
        max,
        min,
        wrapAt;

      if (!distances) {
        wrapAt = vars.grid === "auto" ? 0 : (vars.grid || [1, _bigNum$1])[1];

        if (!wrapAt) {
          max = -_bigNum$1;

          while (
            max < (max = a[wrapAt++].getBoundingClientRect().left) &&
            wrapAt < l
          ) {}

          wrapAt < l && wrapAt--;
        }

        distances = cache[l] = [];
        originX = ratios ? Math.min(wrapAt, l) * ratioX - 0.5 : from % wrapAt;
        originY =
          wrapAt === _bigNum$1
            ? 0
            : ratios
            ? (l * ratioY) / wrapAt - 0.5
            : (from / wrapAt) | 0;
        max = 0;
        min = _bigNum$1;

        for (j = 0; j < l; j++) {
          x = (j % wrapAt) - originX;
          y = originY - ((j / wrapAt) | 0);
          distances[j] = d = !axis
            ? _sqrt$1(x * x + y * y)
            : Math.abs(axis === "y" ? y : x);
          d > max && (max = d);
          d < min && (min = d);
        }

        from === "random" && shuffle(distances);
        distances.max = max - min;
        distances.min = min;
        distances.v = l =
          (parseFloat(vars.amount) ||
            parseFloat(vars.each) *
              (wrapAt > l
                ? l - 1
                : !axis
                ? Math.max(wrapAt, l / wrapAt)
                : axis === "y"
                ? l / wrapAt
                : wrapAt) ||
            0) * (from === "edges" ? -1 : 1);
        distances.b = l < 0 ? base - l : base;
        distances.u = getUnit(vars.amount || vars.each) || 0; //unit

        ease = ease && l < 0 ? _invertEase(ease) : ease;
      }

      l = (distances[i] - distances.min) / distances.max || 0;
      return (
        _roundPrecise$1(distances.b + (ease ? ease(l) : l) * distances.v) +
        distances.u
      ); //round in order to work around floating point errors
    };
  },
  _roundModifier = function _roundModifier(v) {
    //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.
    var p = Math.pow(10, ((v + "").split(".")[1] || "").length); //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed())

    return function (raw) {
      var n = _roundPrecise$1(Math.round(parseFloat(raw) / v) * v * p);

      return (n - (n % 1)) / p + (_isNumber$2(raw) ? 0 : getUnit(raw)); // n - n % 1 replaces Math.floor() in order to handle negative values properly. For example, Math.floor(-150.00000000000003) is 151!
    };
  },
  snap = function snap(snapTo, value) {
    var isArray = _isArray(snapTo),
      radius,
      is2D;

    if (!isArray && _isObject$1(snapTo)) {
      radius = isArray = snapTo.radius || _bigNum$1;

      if (snapTo.values) {
        snapTo = toArray(snapTo.values);

        if ((is2D = !_isNumber$2(snapTo[0]))) {
          radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.
        }
      } else {
        snapTo = _roundModifier(snapTo.increment);
      }
    }

    return _conditionalReturn(
      value,
      !isArray
        ? _roundModifier(snapTo)
        : _isFunction$1(snapTo)
        ? function (raw) {
            is2D = snapTo(raw);
            return Math.abs(is2D - raw) <= radius ? is2D : raw;
          }
        : function (raw) {
            var x = parseFloat(is2D ? raw.x : raw),
              y = parseFloat(is2D ? raw.y : 0),
              min = _bigNum$1,
              closest = 0,
              i = snapTo.length,
              dx,
              dy;

            while (i--) {
              if (is2D) {
                dx = snapTo[i].x - x;
                dy = snapTo[i].y - y;
                dx = dx * dx + dy * dy;
              } else {
                dx = Math.abs(snapTo[i] - x);
              }

              if (dx < min) {
                min = dx;
                closest = i;
              }
            }

            closest = !radius || min <= radius ? snapTo[closest] : raw;
            return is2D || closest === raw || _isNumber$2(raw)
              ? closest
              : closest + getUnit(raw);
          }
    );
  },
  random = function random(min, max, roundingIncrement, returnFunction) {
    return _conditionalReturn(
      _isArray(min)
        ? !max
        : roundingIncrement === true
        ? !!(roundingIncrement = 0)
        : !returnFunction,
      function () {
        return _isArray(min)
          ? min[~~(Math.random() * min.length)]
          : (roundingIncrement = roundingIncrement || 1e-5) &&
              (returnFunction =
                roundingIncrement < 1
                  ? Math.pow(10, (roundingIncrement + "").length - 2)
                  : 1) &&
              Math.floor(
                Math.round(
                  (min -
                    roundingIncrement / 2 +
                    Math.random() * (max - min + roundingIncrement * 0.99)) /
                    roundingIncrement
                ) *
                  roundingIncrement *
                  returnFunction
              ) / returnFunction;
      }
    );
  },
  pipe = function pipe() {
    for (
      var _len = arguments.length, functions = new Array(_len), _key = 0;
      _key < _len;
      _key++
    ) {
      functions[_key] = arguments[_key];
    }

    return function (value) {
      return functions.reduce(function (v, f) {
        return f(v);
      }, value);
    };
  },
  unitize = function unitize(func, unit) {
    return function (value) {
      return func(parseFloat(value)) + (unit || getUnit(value));
    };
  },
  normalize = function normalize(min, max, value) {
    return mapRange(min, max, 0, 1, value);
  },
  _wrapArray = function _wrapArray(a, wrapper, value) {
    return _conditionalReturn(value, function (index) {
      return a[~~wrapper(index)];
    });
  },
  wrap = function wrap(min, max, value) {
    // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).
    var range = max - min;
    return _isArray(min)
      ? _wrapArray(min, wrap(0, min.length), max)
      : _conditionalReturn(value, function (value) {
          return ((range + ((value - min) % range)) % range) + min;
        });
  },
  wrapYoyo = function wrapYoyo(min, max, value) {
    var range = max - min,
      total = range * 2;
    return _isArray(min)
      ? _wrapArray(min, wrapYoyo(0, min.length - 1), max)
      : _conditionalReturn(value, function (value) {
          value = (total + ((value - min) % total)) % total || 0;
          return min + (value > range ? total - value : value);
        });
  },
  _replaceRandom = function _replaceRandom(value) {
    //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])
    var prev = 0,
      s = "",
      i,
      nums,
      end,
      isArray;

    while (~(i = value.indexOf("random(", prev))) {
      end = value.indexOf(")", i);
      isArray = value.charAt(i + 7) === "[";
      nums = value
        .substr(i + 7, end - i - 7)
        .match(isArray ? _delimitedValueExp : _strictNumExp);
      s +=
        value.substr(prev, i - prev) +
        random(
          isArray ? nums : +nums[0],
          isArray ? 0 : +nums[1],
          +nums[2] || 1e-5
        );
      prev = end + 1;
    }

    return s + value.substr(prev, value.length - prev);
  },
  mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {
    var inRange = inMax - inMin,
      outRange = outMax - outMin;
    return _conditionalReturn(value, function (value) {
      return outMin + (((value - inMin) / inRange) * outRange || 0);
    });
  },
  interpolate = function interpolate(start, end, progress, mutate) {
    var func = isNaN(start + end)
      ? 0
      : function (p) {
          return (1 - p) * start + p * end;
        };

    if (!func) {
      var isString = _isString$2(start),
        master = {},
        p,
        i,
        interpolators,
        l,
        il;

      progress === true && (mutate = 1) && (progress = null);

      if (isString) {
        start = {
          p: start,
        };
        end = {
          p: end,
        };
      } else if (_isArray(start) && !_isArray(end)) {
        interpolators = [];
        l = start.length;
        il = l - 2;

        for (i = 1; i < l; i++) {
          interpolators.push(interpolate(start[i - 1], start[i])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.
        }

        l--;

        func = function func(p) {
          p *= l;
          var i = Math.min(il, ~~p);
          return interpolators[i](p - i);
        };

        progress = end;
      } else if (!mutate) {
        start = _merge(_isArray(start) ? [] : {}, start);
      }

      if (!interpolators) {
        for (p in end) {
          _addPropTween.call(master, start, p, "get", end[p]);
        }

        func = function func(p) {
          return _renderPropTweens(p, master) || (isString ? start.p : start);
        };
      }
    }

    return _conditionalReturn(progress, func);
  },
  _getLabelInDirection = function _getLabelInDirection(
    timeline,
    fromTime,
    backward
  ) {
    //used for nextLabel() and previousLabel()
    var labels = timeline.labels,
      min = _bigNum$1,
      p,
      distance,
      label;

    for (p in labels) {
      distance = labels[p] - fromTime;

      if (
        distance < 0 === !!backward &&
        distance &&
        min > (distance = Math.abs(distance))
      ) {
        label = p;
        min = distance;
      }
    }

    return label;
  },
  _callback$1 = function _callback(animation, type, executeLazyFirst) {
    var v = animation.vars,
      callback = v[type],
      prevContext = _context$2,
      context = animation._ctx,
      params,
      scope,
      result;

    if (!callback) {
      return;
    }

    params = v[type + "Params"];
    scope = v.callbackScope || animation;
    executeLazyFirst && _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.

    context && (_context$2 = context);
    result = params ? callback.apply(scope, params) : callback.call(scope);
    _context$2 = prevContext;
    return result;
  },
  _interrupt = function _interrupt(animation) {
    _removeFromParent(animation);

    animation.scrollTrigger && animation.scrollTrigger.kill(!!_reverting$2);
    animation.progress() < 1 && _callback$1(animation, "onInterrupt");
    return animation;
  },
  _quickTween,
  _registerPluginQueue = [],
  _createPlugin = function _createPlugin(config) {
    if (!config) return;
    config = (!config.name && config["default"]) || config; // UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.

    if (_windowExists$2() || config.headless) {
      // edge case: some build tools may pass in a null/undefined value
      var name = config.name,
        isFunc = _isFunction$1(config),
        Plugin =
          name && !isFunc && config.init
            ? function () {
                this._props = [];
              }
            : config,
        //in case someone passes in an object that's not a plugin, like CustomEase
        instanceDefaults = {
          init: _emptyFunc$1,
          render: _renderPropTweens,
          add: _addPropTween,
          kill: _killPropTweensOf,
          modifier: _addPluginModifier,
          rawVars: 0,
        },
        statics = {
          targetTest: 0,
          get: 0,
          getSetter: _getSetter,
          aliases: {},
          register: 0,
        };

      _wake();

      if (config !== Plugin) {
        if (_plugins[name]) {
          return;
        }

        _setDefaults$1(
          Plugin,
          _setDefaults$1(_copyExcluding(config, instanceDefaults), statics)
        ); //static methods

        _merge(
          Plugin.prototype,
          _merge(instanceDefaults, _copyExcluding(config, statics))
        ); //instance methods

        _plugins[(Plugin.prop = name)] = Plugin;

        if (config.targetTest) {
          _harnessPlugins.push(Plugin);

          _reservedProps[name] = 1;
        }

        name =
          (name === "css"
            ? "CSS"
            : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin"; //for the global name. "motionPath" should become MotionPathPlugin
      }

      _addGlobal(name, Plugin);

      config.register && config.register(gsap$3, Plugin, PropTween$1);
    } else {
      _registerPluginQueue.push(config);
    }
  },
  /*
   * --------------------------------------------------------------------------------------
   * COLORS
   * --------------------------------------------------------------------------------------
   */
  _255 = 255,
  _colorLookup = {
    aqua: [0, _255, _255],
    lime: [0, _255, 0],
    silver: [192, 192, 192],
    black: [0, 0, 0],
    maroon: [128, 0, 0],
    teal: [0, 128, 128],
    blue: [0, 0, _255],
    navy: [0, 0, 128],
    white: [_255, _255, _255],
    olive: [128, 128, 0],
    yellow: [_255, _255, 0],
    orange: [_255, 165, 0],
    gray: [128, 128, 128],
    purple: [128, 0, 128],
    green: [0, 128, 0],
    red: [_255, 0, 0],
    pink: [_255, 192, 203],
    cyan: [0, _255, _255],
    transparent: [_255, _255, _255, 0],
  },
  // possible future idea to replace the hard-coded color name values - put this in the ticker.wake() where we set the _doc:
  // let ctx = _doc.createElement("canvas").getContext("2d");
  // _forEachName("aqua,lime,silver,black,maroon,teal,blue,navy,white,olive,yellow,orange,gray,purple,green,red,pink,cyan", color => {ctx.fillStyle = color; _colorLookup[color] = splitColor(ctx.fillStyle)});
  _hue = function _hue(h, m1, m2) {
    h += h < 0 ? 1 : h > 1 ? -1 : 0;
    return (
      ((h * 6 < 1
        ? m1 + (m2 - m1) * h * 6
        : h < 0.5
        ? m2
        : h * 3 < 2
        ? m1 + (m2 - m1) * (2 / 3 - h) * 6
        : m1) *
        _255 +
        0.5) |
      0
    );
  },
  splitColor = function splitColor(v, toHSL, forceAlpha) {
    var a = !v
        ? _colorLookup.black
        : _isNumber$2(v)
        ? [v >> 16, (v >> 8) & _255, v & _255]
        : 0,
      r,
      g,
      b,
      h,
      s,
      l,
      max,
      min,
      d,
      wasHSL;

    if (!a) {
      if (v.substr(-1) === ",") {
        //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
        v = v.substr(0, v.length - 1);
      }

      if (_colorLookup[v]) {
        a = _colorLookup[v];
      } else if (v.charAt(0) === "#") {
        if (v.length < 6) {
          //for shorthand like #9F0 or #9F0F (could have alpha)
          r = v.charAt(1);
          g = v.charAt(2);
          b = v.charAt(3);
          v =
            "#" +
            r +
            r +
            g +
            g +
            b +
            b +
            (v.length === 5 ? v.charAt(4) + v.charAt(4) : "");
        }

        if (v.length === 9) {
          // hex with alpha, like #fd5e53ff
          a = parseInt(v.substr(1, 6), 16);
          return [
            a >> 16,
            (a >> 8) & _255,
            a & _255,
            parseInt(v.substr(7), 16) / 255,
          ];
        }

        v = parseInt(v.substr(1), 16);
        a = [v >> 16, (v >> 8) & _255, v & _255];
      } else if (v.substr(0, 3) === "hsl") {
        a = wasHSL = v.match(_strictNumExp);

        if (!toHSL) {
          h = (+a[0] % 360) / 360;
          s = +a[1] / 100;
          l = +a[2] / 100;
          g = l <= 0.5 ? l * (s + 1) : l + s - l * s;
          r = l * 2 - g;
          a.length > 3 && (a[3] *= 1); //cast as number

          a[0] = _hue(h + 1 / 3, r, g);
          a[1] = _hue(h, r, g);
          a[2] = _hue(h - 1 / 3, r, g);
        } else if (~v.indexOf("=")) {
          //if relative values are found, just return the raw strings with the relative prefixes in place.
          a = v.match(_numExp$1);
          forceAlpha && a.length < 4 && (a[3] = 1);
          return a;
        }
      } else {
        a = v.match(_strictNumExp) || _colorLookup.transparent;
      }

      a = a.map(Number);
    }

    if (toHSL && !wasHSL) {
      r = a[0] / _255;
      g = a[1] / _255;
      b = a[2] / _255;
      max = Math.max(r, g, b);
      min = Math.min(r, g, b);
      l = (max + min) / 2;

      if (max === min) {
        h = s = 0;
      } else {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        h =
          max === r
            ? (g - b) / d + (g < b ? 6 : 0)
            : max === g
            ? (b - r) / d + 2
            : (r - g) / d + 4;
        h *= 60;
      }

      a[0] = ~~(h + 0.5);
      a[1] = ~~(s * 100 + 0.5);
      a[2] = ~~(l * 100 + 0.5);
    }

    forceAlpha && a.length < 4 && (a[3] = 1);
    return a;
  },
  _colorOrderData = function _colorOrderData(v) {
    // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a "c" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()
    var values = [],
      c = [],
      i = -1;
    v.split(_colorExp).forEach(function (v) {
      var a = v.match(_numWithUnitExp) || [];
      values.push.apply(values, a);
      c.push((i += a.length + 1));
    });
    values.c = c;
    return values;
  },
  _formatColors = function _formatColors(s, toHSL, orderMatchData) {
    var result = "",
      colors = (s + result).match(_colorExp),
      type = toHSL ? "hsla(" : "rgba(",
      i = 0,
      c,
      shell,
      d,
      l;

    if (!colors) {
      return s;
    }

    colors = colors.map(function (color) {
      return (
        (color = splitColor(color, toHSL, 1)) &&
        type +
          (toHSL
            ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3]
            : color.join(",")) +
          ")"
      );
    });

    if (orderMatchData) {
      d = _colorOrderData(s);
      c = orderMatchData.c;

      if (c.join(result) !== d.c.join(result)) {
        shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
        l = shell.length - 1;

        for (; i < l; i++) {
          result +=
            shell[i] +
            (~c.indexOf(i)
              ? colors.shift() || type + "0,0,0,0)"
              : (d.length
                  ? d
                  : colors.length
                  ? colors
                  : orderMatchData
                ).shift());
        }
      }
    }

    if (!shell) {
      shell = s.split(_colorExp);
      l = shell.length - 1;

      for (; i < l; i++) {
        result += shell[i] + colors[i];
      }
    }

    return result + shell[l];
  },
  _colorExp = (function () {
    var s =
        "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b",
      //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,
      p;

    for (p in _colorLookup) {
      s += "|" + p + "\\b";
    }

    return new RegExp(s + ")", "gi");
  })(),
  _hslExp = /hsl[a]?\(/,
  _colorStringFilter = function _colorStringFilter(a) {
    var combined = a.join(" "),
      toHSL;
    _colorExp.lastIndex = 0;

    if (_colorExp.test(combined)) {
      toHSL = _hslExp.test(combined);
      a[1] = _formatColors(a[1], toHSL);
      a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.

      return true;
    }
  },
  /*
   * --------------------------------------------------------------------------------------
   * TICKER
   * --------------------------------------------------------------------------------------
   */
  _tickerActive,
  _ticker = (function () {
    var _getTime = Date.now,
      _lagThreshold = 500,
      _adjustedLag = 33,
      _startTime = _getTime(),
      _lastUpdate = _startTime,
      _gap = 1000 / 240,
      _nextTime = _gap,
      _listeners = [],
      _id,
      _req,
      _raf,
      _self,
      _delta,
      _i,
      _tick = function _tick(v) {
        var elapsed = _getTime() - _lastUpdate,
          manual = v === true,
          overlap,
          dispatch,
          time,
          frame;

        (elapsed > _lagThreshold || elapsed < 0) &&
          (_startTime += elapsed - _adjustedLag);
        _lastUpdate += elapsed;
        time = _lastUpdate - _startTime;
        overlap = time - _nextTime;

        if (overlap > 0 || manual) {
          frame = ++_self.frame;
          _delta = time - _self.time * 1000;
          _self.time = time = time / 1000;
          _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);
          dispatch = 1;
        }

        manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.

        if (dispatch) {
          for (_i = 0; _i < _listeners.length; _i++) {
            // use _i and check _listeners.length instead of a variable because a listener could get removed during the loop, and if that happens to an element less than the current index, it'd throw things off in the loop.
            _listeners[_i](time, _delta, frame, v);
          }
        }
      };

    _self = {
      time: 0,
      frame: 0,
      tick: function tick() {
        _tick(true);
      },
      deltaRatio: function deltaRatio(fps) {
        return _delta / (1000 / (fps || 60));
      },
      wake: function wake() {
        if (_coreReady) {
          if (!_coreInitted$2 && _windowExists$2()) {
            _win$4 = _coreInitted$2 = window;
            _doc$4 = _win$4.document || {};
            _globals.gsap = gsap$3;
            (_win$4.gsapVersions || (_win$4.gsapVersions = [])).push(
              gsap$3.version
            );

            _install(
              _installScope ||
                _win$4.GreenSockGlobals ||
                (!_win$4.gsap && _win$4) ||
                {}
            );

            _registerPluginQueue.forEach(_createPlugin);
          }

          _raf =
            typeof requestAnimationFrame !== "undefined" &&
            requestAnimationFrame;
          _id && _self.sleep();

          _req =
            _raf ||
            function (f) {
              return setTimeout(f, (_nextTime - _self.time * 1000 + 1) | 0);
            };

          _tickerActive = 1;

          _tick(2);
        }
      },
      sleep: function sleep() {
        (_raf ? cancelAnimationFrame : clearTimeout)(_id);
        _tickerActive = 0;
        _req = _emptyFunc$1;
      },
      lagSmoothing: function lagSmoothing(threshold, adjustedLag) {
        _lagThreshold = threshold || Infinity; // zero should be interpreted as basically unlimited

        _adjustedLag = Math.min(adjustedLag || 33, _lagThreshold);
      },
      fps: function fps(_fps) {
        _gap = 1000 / (_fps || 240);
        _nextTime = _self.time * 1000 + _gap;
      },
      add: function add(callback, once, prioritize) {
        var func = once
          ? function (t, d, f, v) {
              callback(t, d, f, v);

              _self.remove(func);
            }
          : callback;

        _self.remove(callback);

        _listeners[prioritize ? "unshift" : "push"](func);

        _wake();

        return func;
      },
      remove: function remove(callback, i) {
        ~(i = _listeners.indexOf(callback)) &&
          _listeners.splice(i, 1) &&
          _i >= i &&
          _i--;
      },
      _listeners: _listeners,
    };
    return _self;
  })(),
  _wake = function _wake() {
    return !_tickerActive && _ticker.wake();
  },
  //also ensures the core classes are initialized.

  /*
   * -------------------------------------------------
   * EASING
   * -------------------------------------------------
   */
  _easeMap = {},
  _customEaseExp = /^[\d.\-M][\d.\-,\s]/,
  _quotesExp = /["']/g,
  _parseObjectInString = function _parseObjectInString(value) {
    //takes a string like "{wiggles:10, type:anticipate})" and turns it into a real object. Notice it ends in ")" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.
    var obj = {},
      split = value.substr(1, value.length - 3).split(":"),
      key = split[0],
      i = 1,
      l = split.length,
      index,
      val,
      parsedVal;

    for (; i < l; i++) {
      val = split[i];
      index = i !== l - 1 ? val.lastIndexOf(",") : val.length;
      parsedVal = val.substr(0, index);
      obj[key] = isNaN(parsedVal)
        ? parsedVal.replace(_quotesExp, "").trim()
        : +parsedVal;
      key = val.substr(index + 1).trim();
    }

    return obj;
  },
  _valueInParentheses = function _valueInParentheses(value) {
    var open = value.indexOf("(") + 1,
      close = value.indexOf(")"),
      nested = value.indexOf("(", open);
    return value.substring(
      open,
      ~nested && nested < close ? value.indexOf(")", close + 1) : close
    );
  },
  _configEaseFromString = function _configEaseFromString(name) {
    //name can be a string like "elastic.out(1,0.5)", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).
    var split = (name + "").split("("),
      ease = _easeMap[split[0]];
    return ease && split.length > 1 && ease.config
      ? ease.config.apply(
          null,
          ~name.indexOf("{")
            ? [_parseObjectInString(split[1])]
            : _valueInParentheses(name).split(",").map(_numericIfPossible)
        )
      : _easeMap._CE && _customEaseExp.test(name)
      ? _easeMap._CE("", name)
      : ease;
  },
  _invertEase = function _invertEase(ease) {
    return function (p) {
      return 1 - ease(1 - p);
    };
  },
  // allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.
  _propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {
    var child = timeline._first,
      ease;

    while (child) {
      if (child instanceof Timeline) {
        _propagateYoyoEase(child, isYoyo);
      } else if (
        child.vars.yoyoEase &&
        (!child._yoyo || !child._repeat) &&
        child._yoyo !== isYoyo
      ) {
        if (child.timeline) {
          _propagateYoyoEase(child.timeline, isYoyo);
        } else {
          ease = child._ease;
          child._ease = child._yEase;
          child._yEase = ease;
          child._yoyo = isYoyo;
        }
      }

      child = child._next;
    }
  },
  _parseEase = function _parseEase(ease, defaultEase) {
    return !ease
      ? defaultEase
      : (_isFunction$1(ease)
          ? ease
          : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;
  },
  _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {
    if (easeOut === void 0) {
      easeOut = function easeOut(p) {
        return 1 - easeIn(1 - p);
      };
    }

    if (easeInOut === void 0) {
      easeInOut = function easeInOut(p) {
        return p < 0.5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;
      };
    }

    var ease = {
        easeIn: easeIn,
        easeOut: easeOut,
        easeInOut: easeInOut,
      },
      lowercaseName;

    _forEachName(names, function (name) {
      _easeMap[name] = _globals[name] = ease;
      _easeMap[(lowercaseName = name.toLowerCase())] = easeOut;

      for (var p in ease) {
        _easeMap[
          lowercaseName +
            (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")
        ] = _easeMap[name + "." + p] = ease[p];
      }
    });

    return ease;
  },
  _easeInOutFromOut = function _easeInOutFromOut(easeOut) {
    return function (p) {
      return p < 0.5
        ? (1 - easeOut(1 - p * 2)) / 2
        : 0.5 + easeOut((p - 0.5) * 2) / 2;
    };
  },
  _configElastic = function _configElastic(type, amplitude, period) {
    var p1 = amplitude >= 1 ? amplitude : 1,
      //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
      p2 = (period || (type ? 0.3 : 0.45)) / (amplitude < 1 ? amplitude : 1),
      p3 = (p2 / _2PI) * (Math.asin(1 / p1) || 0),
      easeOut = function easeOut(p) {
        return p === 1
          ? 1
          : p1 * Math.pow(2, -10 * p) * _sin$1((p - p3) * p2) + 1;
      },
      ease =
        type === "out"
          ? easeOut
          : type === "in"
          ? function (p) {
              return 1 - easeOut(1 - p);
            }
          : _easeInOutFromOut(easeOut);

    p2 = _2PI / p2; //precalculate to optimize

    ease.config = function (amplitude, period) {
      return _configElastic(type, amplitude, period);
    };

    return ease;
  },
  _configBack = function _configBack(type, overshoot) {
    if (overshoot === void 0) {
      overshoot = 1.70158;
    }

    var easeOut = function easeOut(p) {
        return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;
      },
      ease =
        type === "out"
          ? easeOut
          : type === "in"
          ? function (p) {
              return 1 - easeOut(1 - p);
            }
          : _easeInOutFromOut(easeOut);

    ease.config = function (overshoot) {
      return _configBack(type, overshoot);
    };

    return ease;
  }; // a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
// _weightedEase = ratio => {
// 	let y = 0.5 + ratio / 2;
// 	return p => (2 * (1 - p) * p * y + p * p);
// },
// a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
// _weightedEaseStrong = ratio => {
// 	ratio = .5 + ratio / 2;
// 	let o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),
// 		b = ratio - o,
// 		c = ratio + o;
// 	return p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;
// };

_forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", function (name, i) {
  var power = i < 5 ? i + 1 : i;

  _insertEase(
    name + ",Power" + (power - 1),
    i
      ? function (p) {
          return Math.pow(p, power);
        }
      : function (p) {
          return p;
        },
    function (p) {
      return 1 - Math.pow(1 - p, power);
    },
    function (p) {
      return p < 0.5
        ? Math.pow(p * 2, power) / 2
        : 1 - Math.pow((1 - p) * 2, power) / 2;
    }
  );
});

_easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;

_insertEase(
  "Elastic",
  _configElastic("in"),
  _configElastic("out"),
  _configElastic()
);

(function (n, c) {
  var n1 = 1 / c,
    n2 = 2 * n1,
    n3 = 2.5 * n1,
    easeOut = function easeOut(p) {
      return p < n1
        ? n * p * p
        : p < n2
        ? n * Math.pow(p - 1.5 / c, 2) + 0.75
        : p < n3
        ? n * (p -= 2.25 / c) * p + 0.9375
        : n * Math.pow(p - 2.625 / c, 2) + 0.984375;
    };

  _insertEase(
    "Bounce",
    function (p) {
      return 1 - easeOut(1 - p);
    },
    easeOut
  );
})(7.5625, 2.75);

_insertEase("Expo", function (p) {
  return Math.pow(2, 10 * (p - 1)) * p + p * p * p * p * p * p * (1 - p);
}); // previously 2 ** (10 * (p - 1)) but that doesn't end up with the value quite at the right spot so we do a blended ease to ensure it lands where it should perfectly.

_insertEase("Circ", function (p) {
  return -(_sqrt$1(1 - p * p) - 1);
});

_insertEase("Sine", function (p) {
  return p === 1 ? 1 : -_cos$1(p * _HALF_PI) + 1;
});

_insertEase("Back", _configBack("in"), _configBack("out"), _configBack());

_easeMap.SteppedEase =
  _easeMap.steps =
  _globals.SteppedEase =
    {
      config: function config(steps, immediateStart) {
        if (steps === void 0) {
          steps = 1;
        }

        var p1 = 1 / steps,
          p2 = steps + (immediateStart ? 0 : 1),
          p3 = immediateStart ? 1 : 0,
          max = 1 - _tinyNum;
        return function (p) {
          return (((p2 * _clamp$1(0, max, p)) | 0) + p3) * p1;
        };
      },
    };
_defaults$1.ease = _easeMap["quad.out"];

_forEachName(
  "onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",
  function (name) {
    return (_callbackNames += name + "," + name + "Params,");
  }
);
/*
 * --------------------------------------------------------------------------------------
 * CACHE
 * --------------------------------------------------------------------------------------
 */

var GSCache = function GSCache(target, harness) {
  this.id = _gsID++;
  target._gsap = this;
  this.target = target;
  this.harness = harness;
  this.get = harness ? harness.get : _getProperty;
  this.set = harness ? harness.getSetter : _getSetter;
};
/*
 * --------------------------------------------------------------------------------------
 * ANIMATION
 * --------------------------------------------------------------------------------------
 */

var Animation = /*#__PURE__*/ (function () {
  function Animation(vars) {
    this.vars = vars;
    this._delay = +vars.delay || 0;

    if ((this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0)) {
      // TODO: repeat: Infinity on a timeline's children must flag that timeline internally and affect its totalDuration, otherwise it'll stop in the negative direction when reaching the start.
      this._rDelay = vars.repeatDelay || 0;
      this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
    }

    this._ts = 1;

    _setDuration(this, +vars.duration, 1, 1);

    this.data = vars.data;

    if (_context$2) {
      this._ctx = _context$2;

      _context$2.data.push(this);
    }

    _tickerActive || _ticker.wake();
  }

  var _proto = Animation.prototype;

  _proto.delay = function delay(value) {
    if (value || value === 0) {
      this.parent &&
        this.parent.smoothChildTiming &&
        this.startTime(this._start + value - this._delay);
      this._delay = value;
      return this;
    }

    return this._delay;
  };

  _proto.duration = function duration(value) {
    return arguments.length
      ? this.totalDuration(
          this._repeat > 0
            ? value + (value + this._rDelay) * this._repeat
            : value
        )
      : this.totalDuration() && this._dur;
  };

  _proto.totalDuration = function totalDuration(value) {
    if (!arguments.length) {
      return this._tDur;
    }

    this._dirty = 0;
    return _setDuration(
      this,
      this._repeat < 0
        ? value
        : (value - this._repeat * this._rDelay) / (this._repeat + 1)
    );
  };

  _proto.totalTime = function totalTime(_totalTime, suppressEvents) {
    _wake();

    if (!arguments.length) {
      return this._tTime;
    }

    var parent = this._dp;

    if (parent && parent.smoothChildTiming && this._ts) {
      _alignPlayhead(this, _totalTime);

      !parent._dp || parent.parent || _postAddChecks(parent, this); // edge case: if this is a child of a timeline that already completed, for example, we must re-activate the parent.
      //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.

      while (parent && parent.parent) {
        if (
          parent.parent._time !==
          parent._start +
            (parent._ts >= 0
              ? parent._tTime / parent._ts
              : (parent.totalDuration() - parent._tTime) / -parent._ts)
        ) {
          parent.totalTime(parent._tTime, true);
        }

        parent = parent.parent;
      }

      if (
        !this.parent &&
        this._dp.autoRemoveChildren &&
        ((this._ts > 0 && _totalTime < this._tDur) ||
          (this._ts < 0 && _totalTime > 0) ||
          (!this._tDur && !_totalTime))
      ) {
        //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.
        _addToTimeline(this._dp, this, this._start - this._delay);
      }
    }

    if (
      this._tTime !== _totalTime ||
      (!this._dur && !suppressEvents) ||
      (this._initted && Math.abs(this._zTime) === _tinyNum) ||
      (!_totalTime && !this._initted && (this.add || this._ptLookup))
    ) {
      // check for _ptLookup on a Tween instance to ensure it has actually finished being instantiated, otherwise if this.reverse() gets called in the Animation constructor, it could trigger a render() here even though the _targets weren't populated, thus when _init() is called there won't be any PropTweens (it'll act like the tween is non-functional)
      this._ts || (this._pTime = _totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause
      //if (!this._lock) { // avoid endless recursion (not sure we need this yet or if it's worth the performance hit)
      //   this._lock = 1;

      _lazySafeRender(this, _totalTime, suppressEvents); //   this._lock = 0;
      //}
    }

    return this;
  };

  _proto.time = function time(value, suppressEvents) {
    return arguments.length
      ? this.totalTime(
          Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) %
            (this._dur + this._rDelay) || (value ? this._dur : 0),
          suppressEvents
        )
      : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!
  };

  _proto.totalProgress = function totalProgress(value, suppressEvents) {
    return arguments.length
      ? this.totalTime(this.totalDuration() * value, suppressEvents)
      : this.totalDuration()
      ? Math.min(1, this._tTime / this._tDur)
      : this.rawTime() >= 0 && this._initted
      ? 1
      : 0;
  };

  _proto.progress = function progress(value, suppressEvents) {
    return arguments.length
      ? this.totalTime(
          this.duration() *
            (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) +
            _elapsedCycleDuration(this),
          suppressEvents
        )
      : this.duration()
      ? Math.min(1, this._time / this._dur)
      : this.rawTime() > 0
      ? 1
      : 0;
  };

  _proto.iteration = function iteration(value, suppressEvents) {
    var cycleDuration = this.duration() + this._rDelay;

    return arguments.length
      ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents)
      : this._repeat
      ? _animationCycle(this._tTime, cycleDuration) + 1
      : 1;
  }; // potential future addition:
  // isPlayingBackwards() {
  // 	let animation = this,
  // 		orientation = 1; // 1 = forward, -1 = backward
  // 	while (animation) {
  // 		orientation *= animation.reversed() || (animation.repeat() && !(animation.iteration() & 1)) ? -1 : 1;
  // 		animation = animation.parent;
  // 	}
  // 	return orientation < 0;
  // }

  _proto.timeScale = function timeScale(value, suppressEvents) {
    if (!arguments.length) {
      return this._rts === -_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.
    }

    if (this._rts === value) {
      return this;
    }

    var tTime =
      this.parent && this._ts
        ? _parentToChildTotalTime(this.parent._time, this)
        : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.
    // future addition? Up side: fast and minimal file size. Down side: only works on this animation; if a timeline is reversed, for example, its childrens' onReverse wouldn't get called.
    //(+value < 0 && this._rts >= 0) && _callback(this, "onReverse", true);
    // prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.

    this._rts = +value || 0;
    this._ts = this._ps || value === -_tinyNum ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.

    this.totalTime(
      _clamp$1(-Math.abs(this._delay), this.totalDuration(), tTime),
      suppressEvents !== false
    );

    _setEnd(this); // if parent.smoothChildTiming was false, the end time didn't get updated in the _alignPlayhead() method, so do it here.

    return _recacheAncestors(this);
  };

  _proto.paused = function paused(value) {
    if (!arguments.length) {
      return this._ps;
    } // possible future addition - if an animation is removed from its parent and then .restart() or .play() or .resume() is called, perhaps we should force it back into the globalTimeline but be careful because what if it's already at its end? We don't want it to just persist forever and not get released for GC.
    // !this.parent && !value && this._tTime < this._tDur && this !== _globalTimeline && _globalTimeline.add(this);

    if (this._ps !== value) {
      this._ps = value;

      if (value) {
        this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.

        this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the "real" timeScale as _rts (recorded time scale)
      } else {
        _wake();

        this._ts = this._rts; //only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.

        this.totalTime(
          this.parent && !this.parent.smoothChildTiming
            ? this.rawTime()
            : this._tTime || this._pTime,
          this.progress() === 1 &&
            Math.abs(this._zTime) !== _tinyNum &&
            (this._tTime -= _tinyNum)
        ); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.
      }
    }

    return this;
  };

  _proto.startTime = function startTime(value) {
    if (arguments.length) {
      this._start = value;
      var parent = this.parent || this._dp;
      parent &&
        (parent._sort || !this.parent) &&
        _addToTimeline(parent, this, value - this._delay);
      return this;
    }

    return this._start;
  };

  _proto.endTime = function endTime(includeRepeats) {
    return (
      this._start +
      (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) /
        Math.abs(this._ts || 1)
    );
  };

  _proto.rawTime = function rawTime(wrapRepeats) {
    var parent = this.parent || this._dp; // _dp = detached parent

    return !parent
      ? this._tTime
      : wrapRepeats &&
        (!this._ts || (this._repeat && this._time && this.totalProgress() < 1))
      ? this._tTime % (this._dur + this._rDelay)
      : !this._ts
      ? this._tTime
      : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
  };

  _proto.revert = function revert(config) {
    if (config === void 0) {
      config = _revertConfig;
    }

    var prevIsReverting = _reverting$2;
    _reverting$2 = config;

    if (_isRevertWorthy(this)) {
      this.timeline && this.timeline.revert(config);
      this.totalTime(-0.01, config.suppressEvents);
    }

    this.data !== "nested" && config.kill !== false && this.kill();
    _reverting$2 = prevIsReverting;
    return this;
  };

  _proto.globalTime = function globalTime(rawTime) {
    var animation = this,
      time = arguments.length ? rawTime : animation.rawTime();

    while (animation) {
      time = animation._start + time / (Math.abs(animation._ts) || 1);
      animation = animation._dp;
    }

    return !this.parent && this._sat ? this._sat.globalTime(rawTime) : time; // the _startAt tweens for .fromTo() and .from() that have immediateRender should always be FIRST in the timeline (important for context.revert()). "_sat" stands for _startAtTween, referring to the parent tween that created the _startAt. We must discern if that tween had immediateRender so that we can know whether or not to prioritize it in revert().
  };

  _proto.repeat = function repeat(value) {
    if (arguments.length) {
      this._repeat = value === Infinity ? -2 : value;
      return _onUpdateTotalDuration(this);
    }

    return this._repeat === -2 ? Infinity : this._repeat;
  };

  _proto.repeatDelay = function repeatDelay(value) {
    if (arguments.length) {
      var time = this._time;
      this._rDelay = value;

      _onUpdateTotalDuration(this);

      return time ? this.time(time) : this;
    }

    return this._rDelay;
  };

  _proto.yoyo = function yoyo(value) {
    if (arguments.length) {
      this._yoyo = value;
      return this;
    }

    return this._yoyo;
  };

  _proto.seek = function seek(position, suppressEvents) {
    return this.totalTime(
      _parsePosition$1(this, position),
      _isNotFalse(suppressEvents)
    );
  };

  _proto.restart = function restart(includeDelay, suppressEvents) {
    this.play().totalTime(
      includeDelay ? -this._delay : 0,
      _isNotFalse(suppressEvents)
    );
    this._dur || (this._zTime = -_tinyNum); // ensures onComplete fires on a zero-duration animation that gets restarted.

    return this;
  };

  _proto.play = function play(from, suppressEvents) {
    from != null && this.seek(from, suppressEvents);
    return this.reversed(false).paused(false);
  };

  _proto.reverse = function reverse(from, suppressEvents) {
    from != null && this.seek(from || this.totalDuration(), suppressEvents);
    return this.reversed(true).paused(false);
  };

  _proto.pause = function pause(atTime, suppressEvents) {
    atTime != null && this.seek(atTime, suppressEvents);
    return this.paused(true);
  };

  _proto.resume = function resume() {
    return this.paused(false);
  };

  _proto.reversed = function reversed(value) {
    if (arguments.length) {
      !!value !== this.reversed() &&
        this.timeScale(-this._rts || (value ? -_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.

      return this;
    }

    return this._rts < 0;
  };

  _proto.invalidate = function invalidate() {
    this._initted = this._act = 0;
    this._zTime = -_tinyNum;
    return this;
  };

  _proto.isActive = function isActive() {
    var parent = this.parent || this._dp,
      start = this._start,
      rawTime;
    return !!(
      !parent ||
      (this._ts &&
        this._initted &&
        parent.isActive() &&
        (rawTime = parent.rawTime(true)) >= start &&
        rawTime < this.endTime(true) - _tinyNum)
    );
  };

  _proto.eventCallback = function eventCallback(type, callback, params) {
    var vars = this.vars;

    if (arguments.length > 1) {
      if (!callback) {
        delete vars[type];
      } else {
        vars[type] = callback;
        params && (vars[type + "Params"] = params);
        type === "onUpdate" && (this._onUpdate = callback);
      }

      return this;
    }

    return vars[type];
  };

  _proto.then = function then(onFulfilled) {
    var self = this;
    return new Promise(function (resolve) {
      var f = _isFunction$1(onFulfilled) ? onFulfilled : _passThrough$1,
        _resolve = function _resolve() {
          var _then = self.then;
          self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)

          _isFunction$1(f) &&
            (f = f(self)) &&
            (f.then || f === self) &&
            (self.then = _then);
          resolve(f);
          self.then = _then;
        };

      if (
        (self._initted && self.totalProgress() === 1 && self._ts >= 0) ||
        (!self._tTime && self._ts < 0)
      ) {
        _resolve();
      } else {
        self._prom = _resolve;
      }
    });
  };

  _proto.kill = function kill() {
    _interrupt(this);
  };

  return Animation;
})();

_setDefaults$1(Animation.prototype, {
  _time: 0,
  _start: 0,
  _end: 0,
  _tTime: 0,
  _tDur: 0,
  _dirty: 0,
  _repeat: 0,
  _yoyo: false,
  parent: null,
  _initted: false,
  _rDelay: 0,
  _ts: 1,
  _dp: 0,
  ratio: 0,
  _zTime: -_tinyNum,
  _prom: 0,
  _ps: false,
  _rts: 1,
});
/*
 * -------------------------------------------------
 * TIMELINE
 * -------------------------------------------------
 */

var Timeline = /*#__PURE__*/ (function (_Animation) {
  _inheritsLoose(Timeline, _Animation);

  function Timeline(vars, position) {
    var _this;

    if (vars === void 0) {
      vars = {};
    }

    _this = _Animation.call(this, vars) || this;
    _this.labels = {};
    _this.smoothChildTiming = !!vars.smoothChildTiming;
    _this.autoRemoveChildren = !!vars.autoRemoveChildren;
    _this._sort = _isNotFalse(vars.sortChildren);
    _globalTimeline &&
      _addToTimeline(
        vars.parent || _globalTimeline,
        _assertThisInitialized$1(_this),
        position
      );
    vars.reversed && _this.reverse();
    vars.paused && _this.paused(true);
    vars.scrollTrigger &&
      _scrollTrigger(_assertThisInitialized$1(_this), vars.scrollTrigger);
    return _this;
  }

  var _proto2 = Timeline.prototype;

  _proto2.to = function to(targets, vars, position) {
    _createTweenType(0, arguments, this);

    return this;
  };

  _proto2.from = function from(targets, vars, position) {
    _createTweenType(1, arguments, this);

    return this;
  };

  _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {
    _createTweenType(2, arguments, this);

    return this;
  };

  _proto2.set = function set(targets, vars, position) {
    vars.duration = 0;
    vars.parent = this;
    _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
    vars.immediateRender = !!vars.immediateRender;
    new Tween(targets, vars, _parsePosition$1(this, position), 1);
    return this;
  };

  _proto2.call = function call(callback, params, position) {
    return _addToTimeline(
      this,
      Tween.delayedCall(0, callback, params),
      position
    );
  }; //ONLY for backward compatibility! Maybe delete?

  _proto2.staggerTo = function staggerTo(
    targets,
    duration,
    vars,
    stagger,
    position,
    onCompleteAll,
    onCompleteAllParams
  ) {
    vars.duration = duration;
    vars.stagger = vars.stagger || stagger;
    vars.onComplete = onCompleteAll;
    vars.onCompleteParams = onCompleteAllParams;
    vars.parent = this;
    new Tween(targets, vars, _parsePosition$1(this, position));
    return this;
  };

  _proto2.staggerFrom = function staggerFrom(
    targets,
    duration,
    vars,
    stagger,
    position,
    onCompleteAll,
    onCompleteAllParams
  ) {
    vars.runBackwards = 1;
    _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);
    return this.staggerTo(
      targets,
      duration,
      vars,
      stagger,
      position,
      onCompleteAll,
      onCompleteAllParams
    );
  };

  _proto2.staggerFromTo = function staggerFromTo(
    targets,
    duration,
    fromVars,
    toVars,
    stagger,
    position,
    onCompleteAll,
    onCompleteAllParams
  ) {
    toVars.startAt = fromVars;
    _inheritDefaults(toVars).immediateRender = _isNotFalse(
      toVars.immediateRender
    );
    return this.staggerTo(
      targets,
      duration,
      toVars,
      stagger,
      position,
      onCompleteAll,
      onCompleteAllParams
    );
  };

  _proto2.render = function render(totalTime, suppressEvents, force) {
    var prevTime = this._time,
      tDur = this._dirty ? this.totalDuration() : this._tDur,
      dur = this._dur,
      tTime = totalTime <= 0 ? 0 : _roundPrecise$1(totalTime),
      // if a paused timeline is resumed (or its _start is updated for another reason...which rounds it), that could result in the playhead shifting a **tiny** amount and a zero-duration child at that spot may get rendered at a different ratio, like its totalTime in render() may be 1e-17 instead of 0, for example.
      crossingStart =
        this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),
      time,
      child,
      next,
      iteration,
      cycleDuration,
      prevPaused,
      pauseTween,
      timeScale,
      prevStart,
      prevIteration,
      yoyo,
      isYoyo;
    this !== _globalTimeline &&
      tTime > tDur &&
      totalTime >= 0 &&
      (tTime = tDur);

    if (tTime !== this._tTime || force || crossingStart) {
      if (prevTime !== this._time && dur) {
        //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
        tTime += this._time - prevTime;
        totalTime += this._time - prevTime;
      }

      time = tTime;
      prevStart = this._start;
      timeScale = this._ts;
      prevPaused = !timeScale;

      if (crossingStart) {
        dur || (prevTime = this._zTime); //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

        (totalTime || !suppressEvents) && (this._zTime = totalTime);
      }

      if (this._repeat) {
        //adjust the time for repeats and yoyos
        yoyo = this._yoyo;
        cycleDuration = dur + this._rDelay;

        if (this._repeat < -1 && totalTime < 0) {
          return this.totalTime(
            cycleDuration * 100 + totalTime,
            suppressEvents,
            force
          );
        }

        time = _roundPrecise$1(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

        if (tTime === tDur) {
          // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
          iteration = this._repeat;
          time = dur;
        } else {
          prevIteration = _roundPrecise$1(tTime / cycleDuration); // full decimal version of iterations, not the previous iteration (we're reusing prevIteration variable for efficiency)

          iteration = ~~prevIteration;

          if (iteration && iteration === prevIteration) {
            time = dur;
            iteration--;
          }

          time > dur && (time = dur);
        }

        prevIteration = _animationCycle(this._tTime, cycleDuration);
        !prevTime &&
          this._tTime &&
          prevIteration !== iteration &&
          this._tTime - prevIteration * cycleDuration - this._dur <= 0 &&
          (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://gsap.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005 also, this._tTime - prevIteration * cycleDuration - this._dur <= 0 just checks to make sure it wasn't previously in the "repeatDelay" portion

        if (yoyo && iteration & 1) {
          time = dur - time;
          isYoyo = 1;
        }
        /*
        make sure children at the end/beginning of the timeline are rendered properly. If, for example,
        a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
        would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
        could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
        we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
        ensure that zero-duration tweens at the very beginning or end of the Timeline work.
        */

        if (iteration !== prevIteration && !this._lock) {
          var rewinding = yoyo && prevIteration & 1,
            doesWrap = rewinding === (yoyo && iteration & 1);
          iteration < prevIteration && (rewinding = !rewinding);
          prevTime = rewinding ? 0 : tTime % dur ? dur : tTime; // if the playhead is landing exactly at the end of an iteration, use that totalTime rather than only the duration, otherwise it'll skip the 2nd render since it's effectively at the same time.

          this._lock = 1;
          this.render(
            prevTime ||
              (isYoyo ? 0 : _roundPrecise$1(iteration * cycleDuration)),
            suppressEvents,
            !dur
          )._lock = 0;
          this._tTime = tTime; // if a user gets the iteration() inside the onRepeat, for example, it should be accurate.

          !suppressEvents && this.parent && _callback$1(this, "onRepeat");
          this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);

          if (
            (prevTime && prevTime !== this._time) ||
            prevPaused !== !this._ts ||
            (this.vars.onRepeat && !this.parent && !this._act)
          ) {
            // if prevTime is 0 and we render at the very end, _time will be the end, thus won't match. So in this edge case, prevTime won't match _time but that's okay. If it gets killed in the onRepeat, eject as well.
            return this;
          }

          dur = this._dur; // in case the duration changed in the onRepeat

          tDur = this._tDur;

          if (doesWrap) {
            this._lock = 2;
            prevTime = rewinding ? dur : -0.0001;
            this.render(prevTime, true);
            this.vars.repeatRefresh && !isYoyo && this.invalidate();
          }

          this._lock = 0;

          if (!this._ts && !prevPaused) {
            return this;
          } //in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.

          _propagateYoyoEase(this, isYoyo);
        }
      }

      if (this._hasPause && !this._forcing && this._lock < 2) {
        pauseTween = _findNextPauseTween(
          this,
          _roundPrecise$1(prevTime),
          _roundPrecise$1(time)
        );

        if (pauseTween) {
          tTime -= time - (time = pauseTween._start);
        }
      }

      this._tTime = tTime;
      this._time = time;
      this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

      if (!this._initted) {
        this._onUpdate = this.vars.onUpdate;
        this._initted = 1;
        this._zTime = totalTime;
        prevTime = 0; // upon init, the playhead should always go forward; someone could invalidate() a completed timeline and then if they restart(), that would make child tweens render in reverse order which could lock in the wrong starting values if they build on each other, like tl.to(obj, {x: 100}).to(obj, {x: 0}).
      }

      if (!prevTime && tTime && !suppressEvents && !prevIteration) {
        _callback$1(this, "onStart");

        if (this._tTime !== tTime) {
          // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
          return this;
        }
      }

      if (time >= prevTime && totalTime >= 0) {
        child = this._first;

        while (child) {
          next = child._next;

          if (
            (child._act || time >= child._start) &&
            child._ts &&
            pauseTween !== child
          ) {
            if (child.parent !== this) {
              // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
              return this.render(totalTime, suppressEvents, force);
            }

            child.render(
              child._ts > 0
                ? (time - child._start) * child._ts
                : (child._dirty ? child.totalDuration() : child._tDur) +
                    (time - child._start) * child._ts,
              suppressEvents,
              force
            );

            if (time !== this._time || (!this._ts && !prevPaused)) {
              //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
              pauseTween = 0;
              next && (tTime += this._zTime = -_tinyNum); // it didn't finish rendering, so flag zTime as negative so that the next time render() is called it'll be forced (to render any remaining children)

              break;
            }
          }

          child = next;
        }
      } else {
        child = this._last;
        var adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.

        while (child) {
          next = child._prev;

          if (
            (child._act || adjustedTime <= child._end) &&
            child._ts &&
            pauseTween !== child
          ) {
            if (child.parent !== this) {
              // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
              return this.render(totalTime, suppressEvents, force);
            }

            child.render(
              child._ts > 0
                ? (adjustedTime - child._start) * child._ts
                : (child._dirty ? child.totalDuration() : child._tDur) +
                    (adjustedTime - child._start) * child._ts,
              suppressEvents,
              force || (_reverting$2 && _isRevertWorthy(child))
            ); // if reverting, we should always force renders of initted tweens (but remember that .fromTo() or .from() may have a _startAt but not _initted yet). If, for example, a .fromTo() tween with a stagger (which creates an internal timeline) gets reverted BEFORE some of its child tweens render for the first time, it may not properly trigger them to revert.

            if (time !== this._time || (!this._ts && !prevPaused)) {
              //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
              pauseTween = 0;
              next &&
                (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)

              break;
            }
          }

          child = next;
        }
      }

      if (pauseTween && !suppressEvents) {
        this.pause();
        pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime =
          time >= prevTime ? 1 : -1;

        if (this._ts) {
          //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).
          this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.

          _setEnd(this);

          return this.render(totalTime, suppressEvents, force);
        }
      }

      this._onUpdate && !suppressEvents && _callback$1(this, "onUpdate", true);
      if (
        (tTime === tDur && this._tTime >= this.totalDuration()) ||
        (!tTime && prevTime)
      )
        if (
          prevStart === this._start ||
          Math.abs(timeScale) !== Math.abs(this._ts)
        )
          if (!this._lock) {
            // remember, a child's callback may alter this timeline's playhead or timeScale which is why we need to add some of these checks.
            (totalTime || !dur) &&
              ((tTime === tDur && this._ts > 0) || (!tTime && this._ts < 0)) &&
              _removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

            if (
              !suppressEvents &&
              !(totalTime < 0 && !prevTime) &&
              (tTime || prevTime || !tDur)
            ) {
              _callback$1(
                this,
                tTime === tDur && totalTime >= 0
                  ? "onComplete"
                  : "onReverseComplete",
                true
              );

              this._prom &&
                !(tTime < tDur && this.timeScale() > 0) &&
                this._prom();
            }
          }
    }

    return this;
  };

  _proto2.add = function add(child, position) {
    var _this2 = this;

    _isNumber$2(position) ||
      (position = _parsePosition$1(this, position, child));

    if (!(child instanceof Animation)) {
      if (_isArray(child)) {
        child.forEach(function (obj) {
          return _this2.add(obj, position);
        });
        return this;
      }

      if (_isString$2(child)) {
        return this.addLabel(child, position);
      }

      if (_isFunction$1(child)) {
        child = Tween.delayedCall(0, child);
      } else {
        return this;
      }
    }

    return this !== child ? _addToTimeline(this, child, position) : this; //don't allow a timeline to be added to itself as a child!
  };

  _proto2.getChildren = function getChildren(
    nested,
    tweens,
    timelines,
    ignoreBeforeTime
  ) {
    if (nested === void 0) {
      nested = true;
    }

    if (tweens === void 0) {
      tweens = true;
    }

    if (timelines === void 0) {
      timelines = true;
    }

    if (ignoreBeforeTime === void 0) {
      ignoreBeforeTime = -_bigNum$1;
    }

    var a = [],
      child = this._first;

    while (child) {
      if (child._start >= ignoreBeforeTime) {
        if (child instanceof Tween) {
          tweens && a.push(child);
        } else {
          timelines && a.push(child);
          nested && a.push.apply(a, child.getChildren(true, tweens, timelines));
        }
      }

      child = child._next;
    }

    return a;
  };

  _proto2.getById = function getById(id) {
    var animations = this.getChildren(1, 1, 1),
      i = animations.length;

    while (i--) {
      if (animations[i].vars.id === id) {
        return animations[i];
      }
    }
  };

  _proto2.remove = function remove(child) {
    if (_isString$2(child)) {
      return this.removeLabel(child);
    }

    if (_isFunction$1(child)) {
      return this.killTweensOf(child);
    }

    child.parent === this && _removeLinkedListItem(this, child);

    if (child === this._recent) {
      this._recent = this._last;
    }

    return _uncache(this);
  };

  _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {
    if (!arguments.length) {
      return this._tTime;
    }

    this._forcing = 1;

    if (!this._dp && this._ts) {
      //special case for the global timeline (or any other that has no parent or detached parent).
      this._start = _roundPrecise$1(
        _ticker.time -
          (this._ts > 0
            ? _totalTime2 / this._ts
            : (this.totalDuration() - _totalTime2) / -this._ts)
      );
    }

    _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);

    this._forcing = 0;
    return this;
  };

  _proto2.addLabel = function addLabel(label, position) {
    this.labels[label] = _parsePosition$1(this, position);
    return this;
  };

  _proto2.removeLabel = function removeLabel(label) {
    delete this.labels[label];
    return this;
  };

  _proto2.addPause = function addPause(position, callback, params) {
    var t = Tween.delayedCall(0, callback || _emptyFunc$1, params);
    t.data = "isPause";
    this._hasPause = 1;
    return _addToTimeline(this, t, _parsePosition$1(this, position));
  };

  _proto2.removePause = function removePause(position) {
    var child = this._first;
    position = _parsePosition$1(this, position);

    while (child) {
      if (child._start === position && child.data === "isPause") {
        _removeFromParent(child);
      }

      child = child._next;
    }
  };

  _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {
    var tweens = this.getTweensOf(targets, onlyActive),
      i = tweens.length;

    while (i--) {
      _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);
    }

    return this;
  };

  _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {
    var a = [],
      parsedTargets = toArray(targets),
      child = this._first,
      isGlobalTime = _isNumber$2(onlyActive),
      // a number is interpreted as a global time. If the animation spans
      children;

    while (child) {
      if (child instanceof Tween) {
        if (
          _arrayContainsAny(child._targets, parsedTargets) &&
          (isGlobalTime
            ? (!_overwritingTween || (child._initted && child._ts)) &&
              child.globalTime(0) <= onlyActive &&
              child.globalTime(child.totalDuration()) > onlyActive
            : !onlyActive || child.isActive())
        ) {
          // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.
          a.push(child);
        }
      } else if (
        (children = child.getTweensOf(parsedTargets, onlyActive)).length
      ) {
        a.push.apply(a, children);
      }

      child = child._next;
    }

    return a;
  }; // potential future feature - targets() on timelines
  // targets() {
  // 	let result = [];
  // 	this.getChildren(true, true, false).forEach(t => result.push(...t.targets()));
  // 	return result.filter((v, i) => result.indexOf(v) === i);
  // }

  _proto2.tweenTo = function tweenTo(position, vars) {
    vars = vars || {};

    var tl = this,
      endTime = _parsePosition$1(tl, position),
      _vars = vars,
      startAt = _vars.startAt,
      _onStart = _vars.onStart,
      onStartParams = _vars.onStartParams,
      immediateRender = _vars.immediateRender,
      initted,
      tween = Tween.to(
        tl,
        _setDefaults$1(
          {
            ease: vars.ease || "none",
            lazy: false,
            immediateRender: false,
            time: endTime,
            overwrite: "auto",
            duration:
              vars.duration ||
              Math.abs(
                (endTime -
                  (startAt && "time" in startAt ? startAt.time : tl._time)) /
                  tl.timeScale()
              ) ||
              _tinyNum,
            onStart: function onStart() {
              tl.pause();

              if (!initted) {
                var duration =
                  vars.duration ||
                  Math.abs(
                    (endTime -
                      (startAt && "time" in startAt
                        ? startAt.time
                        : tl._time)) /
                      tl.timeScale()
                  );
                tween._dur !== duration &&
                  _setDuration(tween, duration, 0, 1).render(
                    tween._time,
                    true,
                    true
                  );
                initted = 1;
              }

              _onStart && _onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.
            },
          },
          vars
        )
      );

    return immediateRender ? tween.render(0) : tween;
  };

  _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {
    return this.tweenTo(
      toPosition,
      _setDefaults$1(
        {
          startAt: {
            time: _parsePosition$1(this, fromPosition),
          },
        },
        vars
      )
    );
  };

  _proto2.recent = function recent() {
    return this._recent;
  };

  _proto2.nextLabel = function nextLabel(afterTime) {
    if (afterTime === void 0) {
      afterTime = this._time;
    }

    return _getLabelInDirection(this, _parsePosition$1(this, afterTime));
  };

  _proto2.previousLabel = function previousLabel(beforeTime) {
    if (beforeTime === void 0) {
      beforeTime = this._time;
    }

    return _getLabelInDirection(this, _parsePosition$1(this, beforeTime), 1);
  };

  _proto2.currentLabel = function currentLabel(value) {
    return arguments.length
      ? this.seek(value, true)
      : this.previousLabel(this._time + _tinyNum);
  };

  _proto2.shiftChildren = function shiftChildren(
    amount,
    adjustLabels,
    ignoreBeforeTime
  ) {
    if (ignoreBeforeTime === void 0) {
      ignoreBeforeTime = 0;
    }

    var child = this._first,
      labels = this.labels,
      p;

    while (child) {
      if (child._start >= ignoreBeforeTime) {
        child._start += amount;
        child._end += amount;
      }

      child = child._next;
    }

    if (adjustLabels) {
      for (p in labels) {
        if (labels[p] >= ignoreBeforeTime) {
          labels[p] += amount;
        }
      }
    }

    return _uncache(this);
  };

  _proto2.invalidate = function invalidate(soft) {
    var child = this._first;
    this._lock = 0;

    while (child) {
      child.invalidate(soft);
      child = child._next;
    }

    return _Animation.prototype.invalidate.call(this, soft);
  };

  _proto2.clear = function clear(includeLabels) {
    if (includeLabels === void 0) {
      includeLabels = true;
    }

    var child = this._first,
      next;

    while (child) {
      next = child._next;
      this.remove(child);
      child = next;
    }

    this._dp && (this._time = this._tTime = this._pTime = 0);
    includeLabels && (this.labels = {});
    return _uncache(this);
  };

  _proto2.totalDuration = function totalDuration(value) {
    var max = 0,
      self = this,
      child = self._last,
      prevStart = _bigNum$1,
      prev,
      start,
      parent;

    if (arguments.length) {
      return self.timeScale(
        (self._repeat < 0 ? self.duration() : self.totalDuration()) /
          (self.reversed() ? -value : value)
      );
    }

    if (self._dirty) {
      parent = self.parent;

      while (child) {
        prev = child._prev; //record it here in case the tween changes position in the sequence...

        child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.

        start = child._start;

        if (start > prevStart && self._sort && child._ts && !self._lock) {
          //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
          self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().

          _addToTimeline(self, child, start - child._delay, 1)._lock = 0;
        } else {
          prevStart = start;
        }

        if (start < 0 && child._ts) {
          //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
          max -= start;

          if ((!parent && !self._dp) || (parent && parent.smoothChildTiming)) {
            self._start += start / self._ts;
            self._time -= start;
            self._tTime -= start;
          }

          self.shiftChildren(-start, false, -1e999);
          prevStart = 0;
        }

        child._end > max && child._ts && (max = child._end);
        child = prev;
      }

      _setDuration(
        self,
        self === _globalTimeline && self._time > max ? self._time : max,
        1,
        1
      );

      self._dirty = 0;
    }

    return self._tDur;
  };

  Timeline.updateRoot = function updateRoot(time) {
    if (_globalTimeline._ts) {
      _lazySafeRender(
        _globalTimeline,
        _parentToChildTotalTime(time, _globalTimeline)
      );

      _lastRenderedFrame = _ticker.frame;
    }

    if (_ticker.frame >= _nextGCFrame) {
      _nextGCFrame += _config.autoSleep || 120;
      var child = _globalTimeline._first;
      if (!child || !child._ts)
        if (_config.autoSleep && _ticker._listeners.length < 2) {
          while (child && !child._ts) {
            child = child._next;
          }

          child || _ticker.sleep();
        }
    }
  };

  return Timeline;
})(Animation);

_setDefaults$1(Timeline.prototype, {
  _lock: 0,
  _hasPause: 0,
  _forcing: 0,
});

var _addComplexStringPropTween = function _addComplexStringPropTween(
    target,
    prop,
    start,
    end,
    setter,
    stringFilter,
    funcParam
  ) {
    //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
    var pt = new PropTween$1(
        this._pt,
        target,
        prop,
        0,
        1,
        _renderComplexString,
        null,
        setter
      ),
      index = 0,
      matchIndex = 0,
      result,
      startNums,
      color,
      endNum,
      chunk,
      startNum,
      hasRandom,
      a;
    pt.b = start;
    pt.e = end;
    start += ""; //ensure values are strings

    end += "";

    if ((hasRandom = ~end.indexOf("random("))) {
      end = _replaceRandom(end);
    }

    if (stringFilter) {
      a = [start, end];
      stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.

      start = a[0];
      end = a[1];
    }

    startNums = start.match(_complexStringNumExp) || [];

    while ((result = _complexStringNumExp.exec(end))) {
      endNum = result[0];
      chunk = end.substring(index, result.index);

      if (color) {
        color = (color + 1) % 5;
      } else if (chunk.substr(-5) === "rgba(") {
        color = 1;
      }

      if (endNum !== startNums[matchIndex++]) {
        startNum = parseFloat(startNums[matchIndex - 1]) || 0; //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.

        pt._pt = {
          _next: pt._pt,
          p: chunk || matchIndex === 1 ? chunk : ",",
          //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
          s: startNum,
          c:
            endNum.charAt(1) === "="
              ? _parseRelative(startNum, endNum) - startNum
              : parseFloat(endNum) - startNum,
          m: color && color < 4 ? Math.round : 0,
        };
        index = _complexStringNumExp.lastIndex;
      }
    }

    pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)

    pt.fp = funcParam;

    if (_relExp.test(end) || hasRandom) {
      pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
    }

    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.

    return pt;
  },
  _addPropTween = function _addPropTween(
    target,
    prop,
    start,
    end,
    index,
    targets,
    modifier,
    stringFilter,
    funcParam,
    optional
  ) {
    _isFunction$1(end) && (end = end(index || 0, target, targets));
    var currentValue = target[prop],
      parsedStart =
        start !== "get"
          ? start
          : !_isFunction$1(currentValue)
          ? currentValue
          : funcParam
          ? target[
              prop.indexOf("set") ||
              !_isFunction$1(target["get" + prop.substr(3)])
                ? prop
                : "get" + prop.substr(3)
            ](funcParam)
          : target[prop](),
      setter = !_isFunction$1(currentValue)
        ? _setterPlain
        : funcParam
        ? _setterFuncWithParam
        : _setterFunc,
      pt;

    if (_isString$2(end)) {
      if (~end.indexOf("random(")) {
        end = _replaceRandom(end);
      }

      if (end.charAt(1) === "=") {
        pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);

        if (pt || pt === 0) {
          // to avoid isNaN, like if someone passes in a value like "!= whatever"
          end = pt;
        }
      }
    }

    if (!optional || parsedStart !== end || _forceAllPropTweens) {
      if (!isNaN(parsedStart * end) && end !== "") {
        // fun fact: any number multiplied by "" is evaluated as the number 0!
        pt = new PropTween$1(
          this._pt,
          target,
          prop,
          +parsedStart || 0,
          end - (parsedStart || 0),
          typeof currentValue === "boolean" ? _renderBoolean : _renderPlain,
          0,
          setter
        );
        funcParam && (pt.fp = funcParam);
        modifier && pt.modifier(modifier, this, target);
        return (this._pt = pt);
      }

      !currentValue && !(prop in target) && _missingPlugin(prop, end);
      return _addComplexStringPropTween.call(
        this,
        target,
        prop,
        parsedStart,
        end,
        setter,
        stringFilter || _config.stringFilter,
        funcParam
      );
    }
  },
  //creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with "random()" in them. It does NOT process relative values.
  _processVars = function _processVars(vars, index, target, targets, tween) {
    _isFunction$1(vars) &&
      (vars = _parseFuncOrString(vars, tween, index, target, targets));

    if (
      !_isObject$1(vars) ||
      (vars.style && vars.nodeType) ||
      _isArray(vars) ||
      _isTypedArray(vars)
    ) {
      return _isString$2(vars)
        ? _parseFuncOrString(vars, tween, index, target, targets)
        : vars;
    }

    var copy = {},
      p;

    for (p in vars) {
      copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);
    }

    return copy;
  },
  _checkPlugin = function _checkPlugin(
    property,
    vars,
    tween,
    index,
    target,
    targets
  ) {
    var plugin, pt, ptLookup, i;

    if (
      _plugins[property] &&
      (plugin = new _plugins[property]()).init(
        target,
        plugin.rawVars
          ? vars[property]
          : _processVars(vars[property], index, target, targets, tween),
        tween,
        index,
        targets
      ) !== false
    ) {
      tween._pt = pt = new PropTween$1(
        tween._pt,
        target,
        property,
        0,
        1,
        plugin.render,
        plugin,
        0,
        plugin.priority
      );

      if (tween !== _quickTween) {
        ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.

        i = plugin._props.length;

        while (i--) {
          ptLookup[plugin._props[i]] = pt;
        }
      }
    }

    return plugin;
  },
  _overwritingTween,
  //store a reference temporarily so we can avoid overwriting itself.
  _forceAllPropTweens,
  _initTween = function _initTween(tween, time, tTime) {
    var vars = tween.vars,
      ease = vars.ease,
      startAt = vars.startAt,
      immediateRender = vars.immediateRender,
      lazy = vars.lazy,
      onUpdate = vars.onUpdate,
      runBackwards = vars.runBackwards,
      yoyoEase = vars.yoyoEase,
      keyframes = vars.keyframes,
      autoRevert = vars.autoRevert,
      dur = tween._dur,
      prevStartAt = tween._startAt,
      targets = tween._targets,
      parent = tween.parent,
      fullTargets =
        parent && parent.data === "nested" ? parent.vars.targets : targets,
      autoOverwrite = tween._overwrite === "auto" && !_suppressOverwrites$1,
      tl = tween.timeline,
      cleanVars,
      i,
      p,
      pt,
      target,
      hasPriority,
      gsData,
      harness,
      plugin,
      ptLookup,
      index,
      harnessVars,
      overwritten;
    tl && (!keyframes || !ease) && (ease = "none");
    tween._ease = _parseEase(ease, _defaults$1.ease);
    tween._yEase = yoyoEase
      ? _invertEase(
          _parseEase(yoyoEase === true ? ease : yoyoEase, _defaults$1.ease)
        )
      : 0;

    if (yoyoEase && tween._yoyo && !tween._repeat) {
      //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.
      yoyoEase = tween._yEase;
      tween._yEase = tween._ease;
      tween._ease = yoyoEase;
    }

    tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.

    if (!tl || (keyframes && !vars.stagger)) {
      //if there's an internal timeline, skip all the parsing because we passed that task down the chain.
      harness = targets[0] ? _getCache(targets[0]).harness : 0;
      harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an "x" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.

      cleanVars = _copyExcluding(vars, _reservedProps);

      if (prevStartAt) {
        prevStartAt._zTime < 0 && prevStartAt.progress(1); // in case it's a lazy startAt that hasn't rendered yet.

        time < 0 && runBackwards && immediateRender && !autoRevert
          ? prevStartAt.render(-1, true)
          : prevStartAt.revert(
              runBackwards && dur ? _revertConfigNoKill : _startAtRevertConfig
            ); // if it's a "startAt" (not "from()" or runBackwards: true), we only need to do a shallow revert (keep transforms cached in CSSPlugin)
        // don't just _removeFromParent(prevStartAt.render(-1, true)) because that'll leave inline styles. We're creating a new _startAt for "startAt" tweens that re-capture things to ensure that if the pre-tween values changed since the tween was created, they're recorded.

        prevStartAt._lazy = 0;
      }

      if (startAt) {
        _removeFromParent(
          (tween._startAt = Tween.set(
            targets,
            _setDefaults$1(
              {
                data: "isStart",
                overwrite: false,
                parent: parent,
                immediateRender: true,
                lazy: !prevStartAt && _isNotFalse(lazy),
                startAt: null,
                delay: 0,
                onUpdate:
                  onUpdate &&
                  function () {
                    return _callback$1(tween, "onUpdate");
                  },
                stagger: 0,
              },
              startAt
            )
          ))
        ); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);

        tween._startAt._dp = 0; // don't allow it to get put back into root timeline! Like when revert() is called and totalTime() gets set.

        tween._startAt._sat = tween; // used in globalTime(). _sat stands for _startAtTween

        time < 0 &&
          (_reverting$2 || (!immediateRender && !autoRevert)) &&
          tween._startAt.revert(_revertConfigNoKill); // rare edge case, like if a render is forced in the negative direction of a non-initted tween.

        if (immediateRender) {
          if (dur && time <= 0 && tTime <= 0) {
            // check tTime here because in the case of a yoyo tween whose playhead gets pushed to the end like tween.progress(1), we should allow it through so that the onComplete gets fired properly.
            time && (tween._zTime = time);
            return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
          }
        }
      } else if (runBackwards && dur) {
        //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
        if (!prevStartAt) {
          time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0

          p = _setDefaults$1(
            {
              overwrite: false,
              data: "isFromStart",
              //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
              lazy: immediateRender && !prevStartAt && _isNotFalse(lazy),
              immediateRender: immediateRender,
              //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
              stagger: 0,
              parent: parent, //ensures that nested tweens that had a stagger are handled properly, like gsap.from(".class", {y: gsap.utils.wrap([-100,100]), stagger: 0.5})
            },
            cleanVars
          );
          harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})

          _removeFromParent((tween._startAt = Tween.set(targets, p)));

          tween._startAt._dp = 0; // don't allow it to get put back into root timeline!

          tween._startAt._sat = tween; // used in globalTime()

          time < 0 &&
            (_reverting$2
              ? tween._startAt.revert(_revertConfigNoKill)
              : tween._startAt.render(-1, true));
          tween._zTime = time;

          if (!immediateRender) {
            _initTween(tween._startAt, _tinyNum, _tinyNum); //ensures that the initial values are recorded
          } else if (!time) {
            return;
          }
        }
      }

      tween._pt = tween._ptCache = 0;
      lazy = (dur && _isNotFalse(lazy)) || (lazy && !dur);

      for (i = 0; i < targets.length; i++) {
        target = targets[i];
        gsData = target._gsap || _harness(targets)[i]._gsap;
        tween._ptLookup[i] = ptLookup = {};
        _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)

        index = fullTargets === targets ? i : fullTargets.indexOf(target);

        if (
          harness &&
          (plugin = new harness()).init(
            target,
            harnessVars || cleanVars,
            tween,
            index,
            fullTargets
          ) !== false
        ) {
          tween._pt = pt = new PropTween$1(
            tween._pt,
            target,
            plugin.name,
            0,
            1,
            plugin.render,
            plugin,
            0,
            plugin.priority
          );

          plugin._props.forEach(function (name) {
            ptLookup[name] = pt;
          });

          plugin.priority && (hasPriority = 1);
        }

        if (!harness || harnessVars) {
          for (p in cleanVars) {
            if (
              _plugins[p] &&
              (plugin = _checkPlugin(
                p,
                cleanVars,
                tween,
                index,
                target,
                fullTargets
              ))
            ) {
              plugin.priority && (hasPriority = 1);
            } else {
              ptLookup[p] = pt = _addPropTween.call(
                tween,
                target,
                p,
                "get",
                cleanVars[p],
                index,
                fullTargets,
                0,
                vars.stringFilter
              );
            }
          }
        }

        tween._op && tween._op[i] && tween.kill(target, tween._op[i]);

        if (autoOverwrite && tween._pt) {
          _overwritingTween = tween;

          _globalTimeline.killTweensOf(
            target,
            ptLookup,
            tween.globalTime(time)
          ); // make sure the overwriting doesn't overwrite THIS tween!!!

          overwritten = !tween.parent;
          _overwritingTween = 0;
        }

        tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
      }

      hasPriority && _sortPropTweensByPriority(tween);
      tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.
    }

    tween._onUpdate = onUpdate;
    tween._initted = (!tween._op || tween._pt) && !overwritten; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.

    keyframes && time <= 0 && tl.render(_bigNum$1, true, true); // if there's a 0% keyframe, it'll render in the "before" state for any staggered/delayed animations thus when the following tween initializes, it'll use the "before" state instead of the "after" state as the initial values.
  },
  _updatePropTweens = function _updatePropTweens(
    tween,
    property,
    value,
    start,
    startIsRelative,
    ratio,
    time,
    skipRecursion
  ) {
    var ptCache = ((tween._pt && tween._ptCache) || (tween._ptCache = {}))[
        property
      ],
      pt,
      rootPT,
      lookup,
      i;

    if (!ptCache) {
      ptCache = tween._ptCache[property] = [];
      lookup = tween._ptLookup;
      i = tween._targets.length;

      while (i--) {
        pt = lookup[i][property];

        if (pt && pt.d && pt.d._pt) {
          // it's a plugin, so find the nested PropTween
          pt = pt.d._pt;

          while (pt && pt.p !== property && pt.fp !== property) {
            // "fp" is functionParam for things like setting CSS variables which require .setProperty("--var-name", value)
            pt = pt._next;
          }
        }

        if (!pt) {
          // there is no PropTween associated with that property, so we must FORCE one to be created and ditch out of this
          // if the tween has other properties that already rendered at new positions, we'd normally have to rewind to put them back like tween.render(0, true) before forcing an _initTween(), but that can create another edge case like tweening a timeline's progress would trigger onUpdates to fire which could move other things around. It's better to just inform users that .resetTo() should ONLY be used for tweens that already have that property. For example, you can't gsap.to(...{ y: 0 }) and then tween.restTo("x", 200) for example.
          _forceAllPropTweens = 1; // otherwise, when we _addPropTween() and it finds no change between the start and end values, it skips creating a PropTween (for efficiency...why tween when there's no difference?) but in this case we NEED that PropTween created so we can edit it.

          tween.vars[property] = "+=0";

          _initTween(tween, time);

          _forceAllPropTweens = 0;
          return skipRecursion
            ? _warn(property + " not eligible for reset")
            : 1; // if someone tries to do a quickTo() on a special property like borderRadius which must get split into 4 different properties, that's not eligible for .resetTo().
        }

        ptCache.push(pt);
      }
    }

    i = ptCache.length;

    while (i--) {
      rootPT = ptCache[i];
      pt = rootPT._pt || rootPT; // complex values may have nested PropTweens. We only accommodate the FIRST value.

      pt.s =
        (start || start === 0) && !startIsRelative
          ? start
          : pt.s + (start || 0) + ratio * pt.c;
      pt.c = value - pt.s;
      rootPT.e && (rootPT.e = _round$2(value) + getUnit(rootPT.e)); // mainly for CSSPlugin (end value)

      rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b)); // (beginning value)
    }
  },
  _addAliasesToVars = function _addAliasesToVars(targets, vars) {
    var harness = targets[0] ? _getCache(targets[0]).harness : 0,
      propertyAliases = harness && harness.aliases,
      copy,
      p,
      i,
      aliases;

    if (!propertyAliases) {
      return vars;
    }

    copy = _merge({}, vars);

    for (p in propertyAliases) {
      if (p in copy) {
        aliases = propertyAliases[p].split(",");
        i = aliases.length;

        while (i--) {
          copy[aliases[i]] = copy[p];
        }
      }
    }

    return copy;
  },
  // parses multiple formats, like {"0%": {x: 100}, {"50%": {x: -20}} and { x: {"0%": 100, "50%": -20} }, and an "ease" can be set on any object. We populate an "allProps" object with an Array for each property, like {x: [{}, {}], y:[{}, {}]} with data for each property tween. The objects have a "t" (time), "v", (value), and "e" (ease) property. This allows us to piece together a timeline later.
  _parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {
    var ease = obj.ease || easeEach || "power1.inOut",
      p,
      a;

    if (_isArray(obj)) {
      a = allProps[prop] || (allProps[prop] = []); // t = time (out of 100), v = value, e = ease

      obj.forEach(function (value, i) {
        return a.push({
          t: (i / (obj.length - 1)) * 100,
          v: value,
          e: ease,
        });
      });
    } else {
      for (p in obj) {
        a = allProps[p] || (allProps[p] = []);
        p === "ease" ||
          a.push({
            t: parseFloat(prop),
            v: obj[p],
            e: ease,
          });
      }
    }
  },
  _parseFuncOrString = function _parseFuncOrString(
    value,
    tween,
    i,
    target,
    targets
  ) {
    return _isFunction$1(value)
      ? value.call(tween, i, target, targets)
      : _isString$2(value) && ~value.indexOf("random(")
      ? _replaceRandom(value)
      : value;
  },
  _staggerTweenProps =
    _callbackNames +
    "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",
  _staggerPropsToSkip = {};

_forEachName(
  _staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger",
  function (name) {
    return (_staggerPropsToSkip[name] = 1);
  }
);
/*
 * --------------------------------------------------------------------------------------
 * TWEEN
 * --------------------------------------------------------------------------------------
 */

var Tween = /*#__PURE__*/ (function (_Animation2) {
  _inheritsLoose(Tween, _Animation2);

  function Tween(targets, vars, position, skipInherit) {
    var _this3;

    if (typeof vars === "number") {
      position.duration = vars;
      vars = position;
      position = null;
    }

    _this3 =
      _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) ||
      this;
    var _this3$vars = _this3.vars,
      duration = _this3$vars.duration,
      delay = _this3$vars.delay,
      immediateRender = _this3$vars.immediateRender,
      stagger = _this3$vars.stagger,
      overwrite = _this3$vars.overwrite,
      keyframes = _this3$vars.keyframes,
      defaults = _this3$vars.defaults,
      scrollTrigger = _this3$vars.scrollTrigger,
      yoyoEase = _this3$vars.yoyoEase,
      parent = vars.parent || _globalTimeline,
      parsedTargets = (
        _isArray(targets) || _isTypedArray(targets)
          ? _isNumber$2(targets[0])
          : "length" in vars
      )
        ? [targets]
        : toArray(targets),
      tl,
      i,
      copy,
      l,
      p,
      curTarget,
      staggerFunc,
      staggerVarsToMerge;
    _this3._targets = parsedTargets.length
      ? _harness(parsedTargets)
      : _warn(
          "GSAP target " + targets + " not found. https://gsap.com",
          !_config.nullTargetWarn
        ) || [];
    _this3._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property

    _this3._overwrite = overwrite;

    if (
      keyframes ||
      stagger ||
      _isFuncOrString(duration) ||
      _isFuncOrString(delay)
    ) {
      vars = _this3.vars;
      tl = _this3.timeline = new Timeline({
        data: "nested",
        defaults: defaults || {},
        targets:
          parent && parent.data === "nested"
            ? parent.vars.targets
            : parsedTargets,
      }); // we need to store the targets because for staggers and keyframes, we end up creating an individual tween for each but function-based values need to know the index and the whole Array of targets.

      tl.kill();
      tl.parent = tl._dp = _assertThisInitialized$1(_this3);
      tl._start = 0;

      if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
        l = parsedTargets.length;
        staggerFunc = stagger && distribute(stagger);

        if (_isObject$1(stagger)) {
          //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.
          for (p in stagger) {
            if (~_staggerTweenProps.indexOf(p)) {
              staggerVarsToMerge || (staggerVarsToMerge = {});
              staggerVarsToMerge[p] = stagger[p];
            }
          }
        }

        for (i = 0; i < l; i++) {
          copy = _copyExcluding(vars, _staggerPropsToSkip);
          copy.stagger = 0;
          yoyoEase && (copy.yoyoEase = yoyoEase);
          staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
          curTarget = parsedTargets[i]; //don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.

          copy.duration = +_parseFuncOrString(
            duration,
            _assertThisInitialized$1(_this3),
            i,
            curTarget,
            parsedTargets
          );
          copy.delay =
            (+_parseFuncOrString(
              delay,
              _assertThisInitialized$1(_this3),
              i,
              curTarget,
              parsedTargets
            ) || 0) - _this3._delay;

          if (!stagger && l === 1 && copy.delay) {
            // if someone does delay:"random(1, 5)", repeat:-1, for example, the delay shouldn't be inside the repeat.
            _this3._delay = delay = copy.delay;
            _this3._start += delay;
            copy.delay = 0;
          }

          tl.to(
            curTarget,
            copy,
            staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0
          );
          tl._ease = _easeMap.none;
        }

        tl.duration() ? (duration = delay = 0) : (_this3.timeline = 0); // if the timeline's duration is 0, we don't need a timeline internally!
      } else if (keyframes) {
        _inheritDefaults(
          _setDefaults$1(tl.vars.defaults, {
            ease: "none",
          })
        );

        tl._ease = _parseEase(keyframes.ease || vars.ease || "none");
        var time = 0,
          a,
          kf,
          v;

        if (_isArray(keyframes)) {
          keyframes.forEach(function (frame) {
            return tl.to(parsedTargets, frame, ">");
          });
          tl.duration(); // to ensure tl._dur is cached because we tap into it for performance purposes in the render() method.
        } else {
          copy = {};

          for (p in keyframes) {
            p === "ease" ||
              p === "easeEach" ||
              _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);
          }

          for (p in copy) {
            a = copy[p].sort(function (a, b) {
              return a.t - b.t;
            });
            time = 0;

            for (i = 0; i < a.length; i++) {
              kf = a[i];
              v = {
                ease: kf.e,
                duration: ((kf.t - (i ? a[i - 1].t : 0)) / 100) * duration,
              };
              v[p] = kf.v;
              tl.to(parsedTargets, v, time);
              time += v.duration;
            }
          }

          tl.duration() < duration &&
            tl.to(
              {},
              {
                duration: duration - tl.duration(),
              }
            ); // in case keyframes didn't go to 100%
        }
      }

      duration || _this3.duration((duration = tl.duration()));
    } else {
      _this3.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)
    }

    if (overwrite === true && !_suppressOverwrites$1) {
      _overwritingTween = _assertThisInitialized$1(_this3);

      _globalTimeline.killTweensOf(parsedTargets);

      _overwritingTween = 0;
    }

    _addToTimeline(parent, _assertThisInitialized$1(_this3), position);

    vars.reversed && _this3.reverse();
    vars.paused && _this3.paused(true);

    if (
      immediateRender ||
      (!duration &&
        !keyframes &&
        _this3._start === _roundPrecise$1(parent._time) &&
        _isNotFalse(immediateRender) &&
        _hasNoPausedAncestors(_assertThisInitialized$1(_this3)) &&
        parent.data !== "nested")
    ) {
      _this3._tTime = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)

      _this3.render(Math.max(0, -delay) || 0); //in case delay is negative
    }

    scrollTrigger &&
      _scrollTrigger(_assertThisInitialized$1(_this3), scrollTrigger);
    return _this3;
  }

  var _proto3 = Tween.prototype;

  _proto3.render = function render(totalTime, suppressEvents, force) {
    var prevTime = this._time,
      tDur = this._tDur,
      dur = this._dur,
      isNegative = totalTime < 0,
      tTime =
        totalTime > tDur - _tinyNum && !isNegative
          ? tDur
          : totalTime < _tinyNum
          ? 0
          : totalTime,
      time,
      pt,
      iteration,
      cycleDuration,
      prevIteration,
      isYoyo,
      ratio,
      timeline,
      yoyoEase;

    if (!dur) {
      _renderZeroDurationTween(this, totalTime, suppressEvents, force);
    } else if (
      tTime !== this._tTime ||
      !totalTime ||
      force ||
      (!this._initted && this._tTime) ||
      (this._startAt && this._zTime < 0 !== isNegative) ||
      this._lazy
    ) {
      // this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)
      time = tTime;
      timeline = this.timeline;

      if (this._repeat) {
        //adjust the time for repeats and yoyos
        cycleDuration = dur + this._rDelay;

        if (this._repeat < -1 && isNegative) {
          return this.totalTime(
            cycleDuration * 100 + totalTime,
            suppressEvents,
            force
          );
        }

        time = _roundPrecise$1(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

        if (tTime === tDur) {
          // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
          iteration = this._repeat;
          time = dur;
        } else {
          prevIteration = _roundPrecise$1(tTime / cycleDuration); // full decimal version of iterations, not the previous iteration (we're reusing prevIteration variable for efficiency)

          iteration = ~~prevIteration;

          if (iteration && iteration === prevIteration) {
            time = dur;
            iteration--;
          } else if (time > dur) {
            time = dur;
          }
        }

        isYoyo = this._yoyo && iteration & 1;

        if (isYoyo) {
          yoyoEase = this._yEase;
          time = dur - time;
        }

        prevIteration = _animationCycle(this._tTime, cycleDuration);

        if (
          time === prevTime &&
          !force &&
          this._initted &&
          iteration === prevIteration
        ) {
          //could be during the repeatDelay part. No need to render and fire callbacks.
          this._tTime = tTime;
          return this;
        }

        if (iteration !== prevIteration) {
          timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo); //repeatRefresh functionality

          if (
            this.vars.repeatRefresh &&
            !isYoyo &&
            !this._lock &&
            time !== cycleDuration &&
            this._initted
          ) {
            // this._time will === cycleDuration when we render at EXACTLY the end of an iteration. Without this condition, it'd often do the repeatRefresh render TWICE (again on the very next tick).
            this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.

            this.render(
              _roundPrecise$1(cycleDuration * iteration),
              true
            ).invalidate()._lock = 0;
          }
        }
      }

      if (!this._initted) {
        if (
          _attemptInitTween(
            this,
            isNegative ? totalTime : time,
            force,
            suppressEvents,
            tTime
          )
        ) {
          this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.

          return this;
        }

        if (
          prevTime !== this._time &&
          !(force && this.vars.repeatRefresh && iteration !== prevIteration)
        ) {
          // rare edge case - during initialization, an onUpdate in the _startAt (.fromTo()) might force this tween to render at a different spot in which case we should ditch this render() call so that it doesn't revert the values. But we also don't want to dump if we're doing a repeatRefresh render!
          return this;
        }

        if (dur !== this._dur) {
          // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.
          return this.render(totalTime, suppressEvents, force);
        }
      }

      this._tTime = tTime;
      this._time = time;

      if (!this._act && this._ts) {
        this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

        this._lazy = 0;
      }

      this.ratio = ratio = (yoyoEase || this._ease)(time / dur);

      if (this._from) {
        this.ratio = ratio = 1 - ratio;
      }

      if (!prevTime && tTime && !suppressEvents && !prevIteration) {
        _callback$1(this, "onStart");

        if (this._tTime !== tTime) {
          // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
          return this;
        }
      }

      pt = this._pt;

      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }

      (timeline &&
        timeline.render(
          totalTime < 0
            ? totalTime
            : timeline._dur * timeline._ease(time / this._dur),
          suppressEvents,
          force
        )) ||
        (this._startAt && (this._zTime = totalTime));

      if (this._onUpdate && !suppressEvents) {
        isNegative && _rewindStartAt(this, totalTime, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.

        _callback$1(this, "onUpdate");
      }

      this._repeat &&
        iteration !== prevIteration &&
        this.vars.onRepeat &&
        !suppressEvents &&
        this.parent &&
        _callback$1(this, "onRepeat");

      if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
        isNegative &&
          !this._onUpdate &&
          _rewindStartAt(this, totalTime, true, true);
        (totalTime || !dur) &&
          ((tTime === this._tDur && this._ts > 0) ||
            (!tTime && this._ts < 0)) &&
          _removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

        if (
          !suppressEvents &&
          !(isNegative && !prevTime) &&
          (tTime || prevTime || isYoyo)
        ) {
          // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();
          _callback$1(
            this,
            tTime === tDur ? "onComplete" : "onReverseComplete",
            true
          );

          this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
        }
      }
    }

    return this;
  };

  _proto3.targets = function targets() {
    return this._targets;
  };

  _proto3.invalidate = function invalidate(soft) {
    // "soft" gives us a way to clear out everything EXCEPT the recorded pre-"from" portion of from() tweens. Otherwise, for example, if you tween.progress(1).render(0, true true).invalidate(), the "from" values would persist and then on the next render, the from() tweens would initialize and the current value would match the "from" values, thus animate from the same value to the same value (no animation). We tap into this in ScrollTrigger's refresh() where we must push a tween to completion and then back again but honor its init state in case the tween is dependent on another tween further up on the page.
    (!soft || !this.vars.runBackwards) && (this._startAt = 0);
    this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;
    this._ptLookup = [];
    this.timeline && this.timeline.invalidate(soft);
    return _Animation2.prototype.invalidate.call(this, soft);
  };

  _proto3.resetTo = function resetTo(
    property,
    value,
    start,
    startIsRelative,
    skipRecursion
  ) {
    _tickerActive || _ticker.wake();
    this._ts || this.play();
    var time = Math.min(this._dur, (this._dp._time - this._start) * this._ts),
      ratio;
    this._initted || _initTween(this, time);
    ratio = this._ease(time / this._dur); // don't just get tween.ratio because it may not have rendered yet.
    // possible future addition to allow an object with multiple values to update, like tween.resetTo({x: 100, y: 200}); At this point, it doesn't seem worth the added kb given the fact that most users will likely opt for the convenient gsap.quickTo() way of interacting with this method.
    // if (_isObject(property)) { // performance optimization
    // 	for (p in property) {
    // 		if (_updatePropTweens(this, p, property[p], value ? value[p] : null, start, ratio, time)) {
    // 			return this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
    // 		}
    // 	}
    // } else {

    if (
      _updatePropTweens(
        this,
        property,
        value,
        start,
        startIsRelative,
        ratio,
        time,
        skipRecursion
      )
    ) {
      return this.resetTo(property, value, start, startIsRelative, 1); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
    } //}

    _alignPlayhead(this, 0);

    this.parent ||
      _addLinkedListItem(
        this._dp,
        this,
        "_first",
        "_last",
        this._dp._sort ? "_start" : 0
      );
    return this.render(0);
  };

  _proto3.kill = function kill(targets, vars) {
    if (vars === void 0) {
      vars = "all";
    }

    if (!targets && (!vars || vars === "all")) {
      this._lazy = this._pt = 0;
      this.parent
        ? _interrupt(this)
        : this.scrollTrigger && this.scrollTrigger.kill(!!_reverting$2);
      return this;
    }

    if (this.timeline) {
      var tDur = this.timeline.totalDuration();
      this.timeline.killTweensOf(
        targets,
        vars,
        _overwritingTween && _overwritingTween.vars.overwrite !== true
      )._first || _interrupt(this); // if nothing is left tweening, interrupt.

      this.parent &&
        tDur !== this.timeline.totalDuration() &&
        _setDuration(this, (this._dur * this.timeline._tDur) / tDur, 0, 1); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.

      return this;
    }

    var parsedTargets = this._targets,
      killingTargets = targets ? toArray(targets) : parsedTargets,
      propTweenLookup = this._ptLookup,
      firstPT = this._pt,
      overwrittenProps,
      curLookup,
      curOverwriteProps,
      props,
      p,
      pt,
      i;

    if (
      (!vars || vars === "all") &&
      _arraysMatch(parsedTargets, killingTargets)
    ) {
      vars === "all" && (this._pt = 0);
      return _interrupt(this);
    }

    overwrittenProps = this._op = this._op || [];

    if (vars !== "all") {
      //so people can pass in a comma-delimited list of property names
      if (_isString$2(vars)) {
        p = {};

        _forEachName(vars, function (name) {
          return (p[name] = 1);
        });

        vars = p;
      }

      vars = _addAliasesToVars(parsedTargets, vars);
    }

    i = parsedTargets.length;

    while (i--) {
      if (~killingTargets.indexOf(parsedTargets[i])) {
        curLookup = propTweenLookup[i];

        if (vars === "all") {
          overwrittenProps[i] = vars;
          props = curLookup;
          curOverwriteProps = {};
        } else {
          curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};
          props = vars;
        }

        for (p in props) {
          pt = curLookup && curLookup[p];

          if (pt) {
            if (!("kill" in pt.d) || pt.d.kill(p) === true) {
              _removeLinkedListItem(this, pt, "_pt");
            }

            delete curLookup[p];
          }

          if (curOverwriteProps !== "all") {
            curOverwriteProps[p] = 1;
          }
        }
      }
    }

    this._initted && !this._pt && firstPT && _interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.

    return this;
  };

  Tween.to = function to(targets, vars) {
    return new Tween(targets, vars, arguments[2]);
  };

  Tween.from = function from(targets, vars) {
    return _createTweenType(1, arguments);
  };

  Tween.delayedCall = function delayedCall(delay, callback, params, scope) {
    return new Tween(callback, 0, {
      immediateRender: false,
      lazy: false,
      overwrite: false,
      delay: delay,
      onComplete: callback,
      onReverseComplete: callback,
      onCompleteParams: params,
      onReverseCompleteParams: params,
      callbackScope: scope,
    }); // we must use onReverseComplete too for things like timeline.add(() => {...}) which should be triggered in BOTH directions (forward and reverse)
  };

  Tween.fromTo = function fromTo(targets, fromVars, toVars) {
    return _createTweenType(2, arguments);
  };

  Tween.set = function set(targets, vars) {
    vars.duration = 0;
    vars.repeatDelay || (vars.repeat = 0);
    return new Tween(targets, vars);
  };

  Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {
    return _globalTimeline.killTweensOf(targets, props, onlyActive);
  };

  return Tween;
})(Animation);

_setDefaults$1(Tween.prototype, {
  _targets: [],
  _lazy: 0,
  _startAt: 0,
  _op: 0,
  _onInit: 0,
}); //add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)
// _forEachName("to,from,fromTo,set,call,add,addLabel,addPause", name => {
// 	Tween.prototype[name] = function() {
// 		let tl = new Timeline();
// 		return _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));
// 	}
// });
//for backward compatibility. Leverage the timeline calls.

_forEachName("staggerTo,staggerFrom,staggerFromTo", function (name) {
  Tween[name] = function () {
    var tl = new Timeline(),
      params = _slice.call(arguments, 0);

    params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
    return tl[name].apply(tl, params);
  };
});
/*
 * --------------------------------------------------------------------------------------
 * PROPTWEEN
 * --------------------------------------------------------------------------------------
 */

var _setterPlain = function _setterPlain(target, property, value) {
    return (target[property] = value);
  },
  _setterFunc = function _setterFunc(target, property, value) {
    return target[property](value);
  },
  _setterFuncWithParam = function _setterFuncWithParam(
    target,
    property,
    value,
    data
  ) {
    return target[property](data.fp, value);
  },
  _setterAttribute = function _setterAttribute(target, property, value) {
    return target.setAttribute(property, value);
  },
  _getSetter = function _getSetter(target, property) {
    return _isFunction$1(target[property])
      ? _setterFunc
      : _isUndefined$1(target[property]) && target.setAttribute
      ? _setterAttribute
      : _setterPlain;
  },
  _renderPlain = function _renderPlain(ratio, data) {
    return data.set(
      data.t,
      data.p,
      Math.round((data.s + data.c * ratio) * 1000000) / 1000000,
      data
    );
  },
  _renderBoolean = function _renderBoolean(ratio, data) {
    return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);
  },
  _renderComplexString = function _renderComplexString(ratio, data) {
    var pt = data._pt,
      s = "";

    if (!ratio && data.b) {
      //b = beginning string
      s = data.b;
    } else if (ratio === 1 && data.e) {
      //e = ending string
      s = data.e;
    } else {
      while (pt) {
        s =
          pt.p +
          (pt.m
            ? pt.m(pt.s + pt.c * ratio)
            : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) +
          s; //we use the "p" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.

        pt = pt._next;
      }

      s += data.c; //we use the "c" of the PropTween to store the final chunk of non-numeric text.
    }

    data.set(data.t, data.p, s, data);
  },
  _renderPropTweens = function _renderPropTweens(ratio, data) {
    var pt = data._pt;

    while (pt) {
      pt.r(ratio, pt.d);
      pt = pt._next;
    }
  },
  _addPluginModifier = function _addPluginModifier(
    modifier,
    tween,
    target,
    property
  ) {
    var pt = this._pt,
      next;

    while (pt) {
      next = pt._next;
      pt.p === property && pt.modifier(modifier, tween, target);
      pt = next;
    }
  },
  _killPropTweensOf = function _killPropTweensOf(property) {
    var pt = this._pt,
      hasNonDependentRemaining,
      next;

    while (pt) {
      next = pt._next;

      if ((pt.p === property && !pt.op) || pt.op === property) {
        _removeLinkedListItem(this, pt, "_pt");
      } else if (!pt.dep) {
        hasNonDependentRemaining = 1;
      }

      pt = next;
    }

    return !hasNonDependentRemaining;
  },
  _setterWithModifier = function _setterWithModifier(
    target,
    property,
    value,
    data
  ) {
    data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
  },
  _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {
    var pt = parent._pt,
      next,
      pt2,
      first,
      last; //sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)

    while (pt) {
      next = pt._next;
      pt2 = first;

      while (pt2 && pt2.pr > pt.pr) {
        pt2 = pt2._next;
      }

      if ((pt._prev = pt2 ? pt2._prev : last)) {
        pt._prev._next = pt;
      } else {
        first = pt;
      }

      if ((pt._next = pt2)) {
        pt2._prev = pt;
      } else {
        last = pt;
      }

      pt = next;
    }

    parent._pt = first;
  }; //PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)

var PropTween$1 = /*#__PURE__*/ (function () {
  function PropTween(
    next,
    target,
    prop,
    start,
    change,
    renderer,
    data,
    setter,
    priority
  ) {
    this.t = target;
    this.s = start;
    this.c = change;
    this.p = prop;
    this.r = renderer || _renderPlain;
    this.d = data || this;
    this.set = setter || _setterPlain;
    this.pr = priority || 0;
    this._next = next;

    if (next) {
      next._prev = this;
    }
  }

  var _proto4 = PropTween.prototype;

  _proto4.modifier = function modifier(func, tween, target) {
    this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)

    this.set = _setterWithModifier;
    this.m = func;
    this.mt = target; //modifier target

    this.tween = tween;
  };

  return PropTween;
})(); //Initialization tasks

_forEachName(
  _callbackNames +
    "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",
  function (name) {
    return (_reservedProps[name] = 1);
  }
);

_globals.TweenMax = _globals.TweenLite = Tween;
_globals.TimelineLite = _globals.TimelineMax = Timeline;
_globalTimeline = new Timeline({
  sortChildren: false,
  defaults: _defaults$1,
  autoRemoveChildren: true,
  id: "root",
  smoothChildTiming: true,
});
_config.stringFilter = _colorStringFilter;

var _media = [],
  _listeners$1 = {},
  _emptyArray$1 = [],
  _lastMediaTime = 0,
  _contextID = 0,
  _dispatch$1 = function _dispatch(type) {
    return (_listeners$1[type] || _emptyArray$1).map(function (f) {
      return f();
    });
  },
  _onMediaChange = function _onMediaChange() {
    var time = Date.now(),
      matches = [];

    if (time - _lastMediaTime > 2) {
      _dispatch$1("matchMediaInit");

      _media.forEach(function (c) {
        var queries = c.queries,
          conditions = c.conditions,
          match,
          p,
          anyMatch,
          toggled;

        for (p in queries) {
          match = _win$4.matchMedia(queries[p]).matches; // Firefox doesn't update the "matches" property of the MediaQueryList object correctly - it only does so as it calls its change handler - so we must re-create a media query here to ensure it's accurate.

          match && (anyMatch = 1);

          if (match !== conditions[p]) {
            conditions[p] = match;
            toggled = 1;
          }
        }

        if (toggled) {
          c.revert();
          anyMatch && matches.push(c);
        }
      });

      _dispatch$1("matchMediaRevert");

      matches.forEach(function (c) {
        return c.onMatch(c, function (func) {
          return c.add(null, func);
        });
      });
      _lastMediaTime = time;

      _dispatch$1("matchMedia");
    }
  };

var Context = /*#__PURE__*/ (function () {
  function Context(func, scope) {
    this.selector = scope && selector(scope);
    this.data = [];
    this._r = []; // returned/cleanup functions

    this.isReverted = false;
    this.id = _contextID++; // to work around issues that frameworks like Vue cause by making things into Proxies which make it impossible to do something like _media.indexOf(this) because "this" would no longer refer to the Context instance itself - it'd refer to a Proxy! We needed a way to identify the context uniquely

    func && this.add(func);
  }

  var _proto5 = Context.prototype;

  _proto5.add = function add(name, func, scope) {
    // possible future addition if we need the ability to add() an animation to a context and for whatever reason cannot create that animation inside of a context.add(() => {...}) function.
    // if (name && _isFunction(name.revert)) {
    // 	this.data.push(name);
    // 	return (name._ctx = this);
    // }
    if (_isFunction$1(name)) {
      scope = func;
      func = name;
      name = _isFunction$1;
    }

    var self = this,
      f = function f() {
        var prev = _context$2,
          prevSelector = self.selector,
          result;
        prev && prev !== self && prev.data.push(self);
        scope && (self.selector = selector(scope));
        _context$2 = self;
        result = func.apply(self, arguments);
        _isFunction$1(result) && self._r.push(result);
        _context$2 = prev;
        self.selector = prevSelector;
        self.isReverted = false;
        return result;
      };

    self.last = f;
    return name === _isFunction$1
      ? f(self, function (func) {
          return self.add(null, func);
        })
      : name
      ? (self[name] = f)
      : f;
  };

  _proto5.ignore = function ignore(func) {
    var prev = _context$2;
    _context$2 = null;
    func(this);
    _context$2 = prev;
  };

  _proto5.getTweens = function getTweens() {
    var a = [];
    this.data.forEach(function (e) {
      return e instanceof Context
        ? a.push.apply(a, e.getTweens())
        : e instanceof Tween &&
            !(e.parent && e.parent.data === "nested") &&
            a.push(e);
    });
    return a;
  };

  _proto5.clear = function clear() {
    this._r.length = this.data.length = 0;
  };

  _proto5.kill = function kill(revert, matchMedia) {
    var _this4 = this;

    if (revert) {
      (function () {
        var tweens = _this4.getTweens(),
          i = _this4.data.length,
          t;

        while (i--) {
          // Flip plugin tweens are very different in that they should actually be pushed to their end. The plugin replaces the timeline's .revert() method to do exactly that. But we also need to remove any of those nested tweens inside the flip timeline so that they don't get individually reverted.
          t = _this4.data[i];

          if (t.data === "isFlip") {
            t.revert();
            t.getChildren(true, true, false).forEach(function (tween) {
              return tweens.splice(tweens.indexOf(tween), 1);
            });
          }
        } // save as an object so that we can cache the globalTime for each tween to optimize performance during the sort

        tweens
          .map(function (t) {
            return {
              g:
                t._dur || t._delay || (t._sat && !t._sat.vars.immediateRender)
                  ? t.globalTime(0)
                  : -Infinity,
              t: t,
            };
          })
          .sort(function (a, b) {
            return b.g - a.g || -Infinity;
          })
          .forEach(function (o) {
            return o.t.revert(revert);
          }); // note: all of the _startAt tweens should be reverted in reverse order that they were created, and they'll all have the same globalTime (-1) so the " || -1" in the sort keeps the order properly.

        i = _this4.data.length;

        while (i--) {
          // make sure we loop backwards so that, for example, SplitTexts that were created later on the same element get reverted first
          t = _this4.data[i];

          if (t instanceof Timeline) {
            if (t.data !== "nested") {
              t.scrollTrigger && t.scrollTrigger.revert();
              t.kill(); // don't revert() the timeline because that's duplicating efforts since we already reverted all the tweens
            }
          } else {
            !(t instanceof Tween) && t.revert && t.revert(revert);
          }
        }

        _this4._r.forEach(function (f) {
          return f(revert, _this4);
        });

        _this4.isReverted = true;
      })();
    } else {
      this.data.forEach(function (e) {
        return e.kill && e.kill();
      });
    }

    this.clear();

    if (matchMedia) {
      var i = _media.length;

      while (i--) {
        // previously, we checked _media.indexOf(this), but some frameworks like Vue enforce Proxy objects that make it impossible to get the proper result that way, so we must use a unique ID number instead.
        _media[i].id === this.id && _media.splice(i, 1);
      }
    }
  }; // killWithCleanup() {
  // 	this.kill();
  // 	this._r.forEach(f => f(false, this));
  // }

  _proto5.revert = function revert(config) {
    this.kill(config || {});
  };

  return Context;
})();

var MatchMedia = /*#__PURE__*/ (function () {
  function MatchMedia(scope) {
    this.contexts = [];
    this.scope = scope;
    _context$2 && _context$2.data.push(this);
  }

  var _proto6 = MatchMedia.prototype;

  _proto6.add = function add(conditions, func, scope) {
    _isObject$1(conditions) ||
      (conditions = {
        matches: conditions,
      });
    var context = new Context(0, scope || this.scope),
      cond = (context.conditions = {}),
      mq,
      p,
      active;
    _context$2 && !context.selector && (context.selector = _context$2.selector); // in case a context is created inside a context. Like a gsap.matchMedia() that's inside a scoped gsap.context()

    this.contexts.push(context);
    func = context.add("onMatch", func);
    context.queries = conditions;

    for (p in conditions) {
      if (p === "all") {
        active = 1;
      } else {
        mq = _win$4.matchMedia(conditions[p]);

        if (mq) {
          _media.indexOf(context) < 0 && _media.push(context);
          (cond[p] = mq.matches) && (active = 1);
          mq.addListener
            ? mq.addListener(_onMediaChange)
            : mq.addEventListener("change", _onMediaChange);
        }
      }
    }

    active &&
      func(context, function (f) {
        return context.add(null, f);
      });
    return this;
  }; // refresh() {
  // 	let time = _lastMediaTime,
  // 		media = _media;
  // 	_lastMediaTime = -1;
  // 	_media = this.contexts;
  // 	_onMediaChange();
  // 	_lastMediaTime = time;
  // 	_media = media;
  // }

  _proto6.revert = function revert(config) {
    this.kill(config || {});
  };

  _proto6.kill = function kill(revert) {
    this.contexts.forEach(function (c) {
      return c.kill(revert, true);
    });
  };

  return MatchMedia;
})();
/*
 * --------------------------------------------------------------------------------------
 * GSAP
 * --------------------------------------------------------------------------------------
 */

var _gsap = {
  registerPlugin: function registerPlugin() {
    for (
      var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
      _key2 < _len2;
      _key2++
    ) {
      args[_key2] = arguments[_key2];
    }

    args.forEach(function (config) {
      return _createPlugin(config);
    });
  },
  timeline: function timeline(vars) {
    return new Timeline(vars);
  },
  getTweensOf: function getTweensOf(targets, onlyActive) {
    return _globalTimeline.getTweensOf(targets, onlyActive);
  },
  getProperty: function getProperty(target, property, unit, uncache) {
    _isString$2(target) && (target = toArray(target)[0]); //in case selector text or an array is passed in

    var getter = _getCache(target || {}).get,
      format = unit ? _passThrough$1 : _numericIfPossible;

    unit === "native" && (unit = "");
    return !target
      ? target
      : !property
      ? function (property, unit, uncache) {
          return format(
            ((_plugins[property] && _plugins[property].get) || getter)(
              target,
              property,
              unit,
              uncache
            )
          );
        }
      : format(
          ((_plugins[property] && _plugins[property].get) || getter)(
            target,
            property,
            unit,
            uncache
          )
        );
  },
  quickSetter: function quickSetter(target, property, unit) {
    target = toArray(target);

    if (target.length > 1) {
      var setters = target.map(function (t) {
          return gsap$3.quickSetter(t, property, unit);
        }),
        l = setters.length;
      return function (value) {
        var i = l;

        while (i--) {
          setters[i](value);
        }
      };
    }

    target = target[0] || {};

    var Plugin = _plugins[property],
      cache = _getCache(target),
      p =
        (cache.harness && (cache.harness.aliases || {})[property]) || property,
      // in case it's an alias, like "rotate" for "rotation".
      setter = Plugin
        ? function (value) {
            var p = new Plugin();
            _quickTween._pt = 0;
            p.init(target, unit ? value + unit : value, _quickTween, 0, [
              target,
            ]);
            p.render(1, p);
            _quickTween._pt && _renderPropTweens(1, _quickTween);
          }
        : cache.set(target, p);

    return Plugin
      ? setter
      : function (value) {
          return setter(target, p, unit ? value + unit : value, cache, 1);
        };
  },
  quickTo: function quickTo(target, property, vars) {
    var _setDefaults2;

    var tween = gsap$3.to(
        target,
        _setDefaults$1(
          ((_setDefaults2 = {}),
          (_setDefaults2[property] = "+=0.1"),
          (_setDefaults2.paused = true),
          (_setDefaults2.stagger = 0),
          _setDefaults2),
          vars || {}
        )
      ),
      func = function func(value, start, startIsRelative) {
        return tween.resetTo(property, value, start, startIsRelative);
      };

    func.tween = tween;
    return func;
  },
  isTweening: function isTweening(targets) {
    return _globalTimeline.getTweensOf(targets, true).length > 0;
  },
  defaults: function defaults(value) {
    value &&
      value.ease &&
      (value.ease = _parseEase(value.ease, _defaults$1.ease));
    return _mergeDeep(_defaults$1, value || {});
  },
  config: function config(value) {
    return _mergeDeep(_config, value || {});
  },
  registerEffect: function registerEffect(_ref3) {
    var name = _ref3.name,
      effect = _ref3.effect,
      plugins = _ref3.plugins,
      defaults = _ref3.defaults,
      extendTimeline = _ref3.extendTimeline;
    (plugins || "").split(",").forEach(function (pluginName) {
      return (
        pluginName &&
        !_plugins[pluginName] &&
        !_globals[pluginName] &&
        _warn(name + " effect requires " + pluginName + " plugin.")
      );
    });

    _effects[name] = function (targets, vars, tl) {
      return effect(toArray(targets), _setDefaults$1(vars || {}, defaults), tl);
    };

    if (extendTimeline) {
      Timeline.prototype[name] = function (targets, vars, position) {
        return this.add(
          _effects[name](
            targets,
            _isObject$1(vars) ? vars : (position = vars) && {},
            this
          ),
          position
        );
      };
    }
  },
  registerEase: function registerEase(name, ease) {
    _easeMap[name] = _parseEase(ease);
  },
  parseEase: function parseEase(ease, defaultEase) {
    return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
  },
  getById: function getById(id) {
    return _globalTimeline.getById(id);
  },
  exportRoot: function exportRoot(vars, includeDelayedCalls) {
    if (vars === void 0) {
      vars = {};
    }

    var tl = new Timeline(vars),
      child,
      next;
    tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);

    _globalTimeline.remove(tl);

    tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).

    tl._time = tl._tTime = _globalTimeline._time;
    child = _globalTimeline._first;

    while (child) {
      next = child._next;

      if (
        includeDelayedCalls ||
        !(
          !child._dur &&
          child instanceof Tween &&
          child.vars.onComplete === child._targets[0]
        )
      ) {
        _addToTimeline(tl, child, child._start - child._delay);
      }

      child = next;
    }

    _addToTimeline(_globalTimeline, tl, 0);

    return tl;
  },
  context: function context(func, scope) {
    return func ? new Context(func, scope) : _context$2;
  },
  matchMedia: function matchMedia(scope) {
    return new MatchMedia(scope);
  },
  matchMediaRefresh: function matchMediaRefresh() {
    return (
      _media.forEach(function (c) {
        var cond = c.conditions,
          found,
          p;

        for (p in cond) {
          if (cond[p]) {
            cond[p] = false;
            found = 1;
          }
        }

        found && c.revert();
      }) || _onMediaChange()
    );
  },
  addEventListener: function addEventListener(type, callback) {
    var a = _listeners$1[type] || (_listeners$1[type] = []);
    ~a.indexOf(callback) || a.push(callback);
  },
  removeEventListener: function removeEventListener(type, callback) {
    var a = _listeners$1[type],
      i = a && a.indexOf(callback);
    i >= 0 && a.splice(i, 1);
  },
  utils: {
    wrap: wrap,
    wrapYoyo: wrapYoyo,
    distribute: distribute,
    random: random,
    snap: snap,
    normalize: normalize,
    getUnit: getUnit,
    clamp: clamp,
    splitColor: splitColor,
    toArray: toArray,
    selector: selector,
    mapRange: mapRange,
    pipe: pipe,
    unitize: unitize,
    interpolate: interpolate,
    shuffle: shuffle,
  },
  install: _install,
  effects: _effects,
  ticker: _ticker,
  updateRoot: Timeline.updateRoot,
  plugins: _plugins,
  globalTimeline: _globalTimeline,
  core: {
    PropTween: PropTween$1,
    globals: _addGlobal,
    Tween: Tween,
    Timeline: Timeline,
    Animation: Animation,
    getCache: _getCache,
    _removeLinkedListItem: _removeLinkedListItem,
    reverting: function reverting() {
      return _reverting$2;
    },
    context: function context(toAdd) {
      if (toAdd && _context$2) {
        _context$2.data.push(toAdd);

        toAdd._ctx = _context$2;
      }

      return _context$2;
    },
    suppressOverwrites: function suppressOverwrites(value) {
      return (_suppressOverwrites$1 = value);
    },
  },
};

_forEachName("to,from,fromTo,delayedCall,set,killTweensOf", function (name) {
  return (_gsap[name] = Tween[name]);
});

_ticker.add(Timeline.updateRoot);

_quickTween = _gsap.to(
  {},
  {
    duration: 0,
  }
); // ---- EXTRA PLUGINS --------------------------------------------------------

var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {
    var pt = plugin._pt;

    while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
      pt = pt._next;
    }

    return pt;
  },
  _addModifiers = function _addModifiers(tween, modifiers) {
    var targets = tween._targets,
      p,
      i,
      pt;

    for (p in modifiers) {
      i = targets.length;

      while (i--) {
        pt = tween._ptLookup[i][p];

        if (pt && (pt = pt.d)) {
          if (pt._pt) {
            // is a plugin
            pt = _getPluginPropTween(pt, p);
          }

          pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);
        }
      }
    }
  },
  _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {
    return {
      name: name,
      headless: 1,
      rawVars: 1,
      //don't pre-process function-based values or "random()" strings.
      init: function init(target, vars, tween) {
        tween._onInit = function (tween) {
          var temp, p;

          if (_isString$2(vars)) {
            temp = {};

            _forEachName(vars, function (name) {
              return (temp[name] = 1);
            }); //if the user passes in a comma-delimited list of property names to roundProps, like "x,y", we round to whole numbers.

            vars = temp;
          }

          if (modifier) {
            temp = {};

            for (p in vars) {
              temp[p] = modifier(vars[p]);
            }

            vars = temp;
          }

          _addModifiers(tween, vars);
        };
      },
    };
  }; //register core plugins

var gsap$3 =
  _gsap.registerPlugin(
    {
      name: "attr",
      init: function init(target, vars, tween, index, targets) {
        var p, pt, v;
        this.tween = tween;

        for (p in vars) {
          v = target.getAttribute(p) || "";
          pt = this.add(
            target,
            "setAttribute",
            (v || 0) + "",
            vars[p],
            index,
            targets,
            0,
            0,
            p
          );
          pt.op = p;
          pt.b = v; // record the beginning value so we can revert()

          this._props.push(p);
        }
      },
      render: function render(ratio, data) {
        var pt = data._pt;

        while (pt) {
          _reverting$2 ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d); // if reverting, go back to the original (pt.b)

          pt = pt._next;
        }
      },
    },
    {
      name: "endArray",
      headless: 1,
      init: function init(target, value) {
        var i = value.length;

        while (i--) {
          this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);
        }
      },
    },
    _buildModifierPlugin("roundProps", _roundModifier),
    _buildModifierPlugin("modifiers"),
    _buildModifierPlugin("snap", snap)
  ) || _gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.

Tween.version = Timeline.version = gsap$3.version = "3.13.0";
_coreReady = 1;
_windowExists$2() && _wake();
_easeMap.Power0;
_easeMap.Power1;
_easeMap.Power2;
_easeMap.Power3;
_easeMap.Power4;
_easeMap.Linear;
_easeMap.Quad;
_easeMap.Cubic;
_easeMap.Quart;
_easeMap.Quint;
_easeMap.Strong;
_easeMap.Elastic;
_easeMap.Back;
_easeMap.SteppedEase;
_easeMap.Bounce;
_easeMap.Sine;
_easeMap.Expo;
_easeMap.Circ;

/*!
 * CSSPlugin 3.13.0
 * https://gsap.com
 *
 * Copyright 2008-2025, GreenSock. All rights reserved.
 * Subject to the terms at https://gsap.com/standard-license
 * @author: Jack Doyle, jack@greensock.com
 */

var _win$3,
  _doc$3,
  _docElement$1,
  _pluginInitted,
  _tempDiv,
  _recentSetterPlugin,
  _reverting$1,
  _windowExists$1 = function _windowExists() {
    return typeof window !== "undefined";
  },
  _transformProps = {},
  _RAD2DEG$1 = 180 / Math.PI,
  _DEG2RAD$2 = Math.PI / 180,
  _atan2$1 = Math.atan2,
  _bigNum = 1e8,
  _capsExp$1 = /([A-Z])/g,
  _horizontalExp = /(left|right|width|margin|padding|x)/i,
  _complexExp = /[\s,\(]\S/,
  _propertyAliases = {
    autoAlpha: "opacity,visibility",
    scale: "scaleX,scaleY",
    alpha: "opacity",
  },
  _renderCSSProp = function _renderCSSProp(ratio, data) {
    return data.set(
      data.t,
      data.p,
      Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u,
      data
    );
  },
  _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {
    return data.set(
      data.t,
      data.p,
      ratio === 1
        ? data.e
        : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u,
      data
    );
  },
  _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(
    ratio,
    data
  ) {
    return data.set(
      data.t,
      data.p,
      ratio
        ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u
        : data.b,
      data
    );
  },
  //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)
  _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {
    var value = data.s + data.c * ratio;
    data.set(
      data.t,
      data.p,
      ~~(value + (value < 0 ? -0.5 : 0.5)) + data.u,
      data
    );
  },
  _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {
    return data.set(data.t, data.p, ratio ? data.e : data.b, data);
  },
  _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(
    ratio,
    data
  ) {
    return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);
  },
  _setterCSSStyle = function _setterCSSStyle(target, property, value) {
    return (target.style[property] = value);
  },
  _setterCSSProp = function _setterCSSProp(target, property, value) {
    return target.style.setProperty(property, value);
  },
  _setterTransform = function _setterTransform(target, property, value) {
    return (target._gsap[property] = value);
  },
  _setterScale = function _setterScale(target, property, value) {
    return (target._gsap.scaleX = target._gsap.scaleY = value);
  },
  _setterScaleWithRender = function _setterScaleWithRender(
    target,
    property,
    value,
    data,
    ratio
  ) {
    var cache = target._gsap;
    cache.scaleX = cache.scaleY = value;
    cache.renderTransform(ratio, cache);
  },
  _setterTransformWithRender = function _setterTransformWithRender(
    target,
    property,
    value,
    data,
    ratio
  ) {
    var cache = target._gsap;
    cache[property] = value;
    cache.renderTransform(ratio, cache);
  },
  _transformProp$2 = "transform",
  _transformOriginProp$1 = _transformProp$2 + "Origin",
  _saveStyle = function _saveStyle(property, isNotCSS) {
    var _this = this;

    var target = this.target,
      style = target.style,
      cache = target._gsap;

    if (property in _transformProps && style) {
      this.tfm = this.tfm || {};

      if (property !== "transform") {
        property = _propertyAliases[property] || property;
        ~property.indexOf(",")
          ? property.split(",").forEach(function (a) {
              return (_this.tfm[a] = _get$1(target, a));
            })
          : (this.tfm[property] = cache.x
              ? cache[property]
              : _get$1(target, property)); // note: scale would map to "scaleX,scaleY", thus we loop and apply them both.

        property === _transformOriginProp$1 &&
          (this.tfm.zOrigin = cache.zOrigin);
      } else {
        return _propertyAliases.transform.split(",").forEach(function (p) {
          return _saveStyle.call(_this, p, isNotCSS);
        });
      }

      if (this.props.indexOf(_transformProp$2) >= 0) {
        return;
      }

      if (cache.svg) {
        this.svgo = target.getAttribute("data-svg-origin");
        this.props.push(_transformOriginProp$1, isNotCSS, "");
      }

      property = _transformProp$2;
    }

    (style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);
  },
  _removeIndependentTransforms = function _removeIndependentTransforms(style) {
    if (style.translate) {
      style.removeProperty("translate");
      style.removeProperty("scale");
      style.removeProperty("rotate");
    }
  },
  _revertStyle = function _revertStyle() {
    var props = this.props,
      target = this.target,
      style = target.style,
      cache = target._gsap,
      i,
      p;

    for (i = 0; i < props.length; i += 3) {
      // stored like this: property, isNotCSS, value
      if (!props[i + 1]) {
        props[i + 2]
          ? (style[props[i]] = props[i + 2])
          : style.removeProperty(
              props[i].substr(0, 2) === "--"
                ? props[i]
                : props[i].replace(_capsExp$1, "-$1").toLowerCase()
            );
      } else if (props[i + 1] === 2) {
        // non-CSS value (function-based)
        target[props[i]](props[i + 2]);
      } else {
        // non-CSS value (not function-based)
        target[props[i]] = props[i + 2];
      }
    }

    if (this.tfm) {
      for (p in this.tfm) {
        cache[p] = this.tfm[p];
      }

      if (cache.svg) {
        cache.renderTransform();
        target.setAttribute("data-svg-origin", this.svgo || "");
      }

      i = _reverting$1();

      if ((!i || !i.isStart) && !style[_transformProp$2]) {
        _removeIndependentTransforms(style);

        if (cache.zOrigin && style[_transformOriginProp$1]) {
          style[_transformOriginProp$1] += " " + cache.zOrigin + "px"; // since we're uncaching, we must put the zOrigin back into the transformOrigin so that we can pull it out accurately when we parse again. Otherwise, we'd lose the z portion of the origin since we extract it to protect from Safari bugs.

          cache.zOrigin = 0;
          cache.renderTransform();
        }

        cache.uncache = 1; // if it's a startAt that's being reverted in the _initTween() of the core, we don't need to uncache transforms. This is purely a performance optimization.
      }
    }
  },
  _getStyleSaver$1 = function _getStyleSaver(target, properties) {
    var saver = {
      target: target,
      props: [],
      revert: _revertStyle,
      save: _saveStyle,
    };
    target._gsap || gsap$3.core.getCache(target); // just make sure there's a _gsap cache defined because we read from it in _saveStyle() and it's more efficient to just check it here once.

    properties &&
      target.style &&
      target.nodeType &&
      properties.split(",").forEach(function (p) {
        return saver.save(p);
      }); // make sure it's a DOM node too.

    return saver;
  },
  _supports3D,
  _createElement = function _createElement(type, ns) {
    var e = _doc$3.createElementNS
      ? _doc$3.createElementNS(
          (ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"),
          type
        )
      : _doc$3.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.

    return e && e.style ? e : _doc$3.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://gsap.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
  },
  _getComputedProperty = function _getComputedProperty(
    target,
    property,
    skipPrefixFallback
  ) {
    var cs = getComputedStyle(target);
    return (
      cs[property] ||
      cs.getPropertyValue(property.replace(_capsExp$1, "-$1").toLowerCase()) ||
      cs.getPropertyValue(property) ||
      (!skipPrefixFallback &&
        _getComputedProperty(
          target,
          _checkPropPrefix(property) || property,
          1
        )) ||
      ""
    ); //css variables may not need caps swapped out for dashes and lowercase.
  },
  _prefixes = "O,Moz,ms,Ms,Webkit".split(","),
  _checkPropPrefix = function _checkPropPrefix(
    property,
    element,
    preferPrefix
  ) {
    var e = element || _tempDiv,
      s = e.style,
      i = 5;

    if (property in s && !preferPrefix) {
      return property;
    }

    property = property.charAt(0).toUpperCase() + property.substr(1);

    while (i-- && !(_prefixes[i] + property in s)) {}

    return i < 0
      ? null
      : (i === 3 ? "ms" : i >= 0 ? _prefixes[i] : "") + property;
  },
  _initCore$1 = function _initCore() {
    if (_windowExists$1() && window.document) {
      _win$3 = window;
      _doc$3 = _win$3.document;
      _docElement$1 = _doc$3.documentElement;
      _tempDiv = _createElement("div") || {
        style: {},
      };
      _createElement("div");
      _transformProp$2 = _checkPropPrefix(_transformProp$2);
      _transformOriginProp$1 = _transformProp$2 + "Origin";
      _tempDiv.style.cssText =
        "border-width:0;line-height:0;position:absolute;padding:0"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.

      _supports3D = !!_checkPropPrefix("perspective");
      _reverting$1 = gsap$3.core.reverting;
      _pluginInitted = 1;
    }
  },
  _getReparentedCloneBBox = function _getReparentedCloneBBox(target) {
    //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
    var owner = target.ownerSVGElement,
      svg = _createElement(
        "svg",
        (owner && owner.getAttribute("xmlns")) || "http://www.w3.org/2000/svg"
      ),
      clone = target.cloneNode(true),
      bbox;

    clone.style.display = "block";
    svg.appendChild(clone);

    _docElement$1.appendChild(svg);

    try {
      bbox = clone.getBBox();
    } catch (e) {}

    svg.removeChild(clone);

    _docElement$1.removeChild(svg);

    return bbox;
  },
  _getAttributeFallbacks = function _getAttributeFallbacks(
    target,
    attributesArray
  ) {
    var i = attributesArray.length;

    while (i--) {
      if (target.hasAttribute(attributesArray[i])) {
        return target.getAttribute(attributesArray[i]);
      }
    }
  },
  _getBBox = function _getBBox(target) {
    var bounds, cloned;

    try {
      bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
    } catch (error) {
      bounds = _getReparentedCloneBBox(target);
      cloned = 1;
    }

    (bounds && (bounds.width || bounds.height)) ||
      cloned ||
      (bounds = _getReparentedCloneBBox(target)); //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.

    return bounds && !bounds.width && !bounds.x && !bounds.y
      ? {
          x: +_getAttributeFallbacks(target, ["x", "cx", "x1"]) || 0,
          y: +_getAttributeFallbacks(target, ["y", "cy", "y1"]) || 0,
          width: 0,
          height: 0,
        }
      : bounds;
  },
  _isSVG = function _isSVG(e) {
    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));
  },
  //reports if the element is an SVG on which getBBox() actually works
  _removeProperty = function _removeProperty(target, property) {
    if (property) {
      var style = target.style,
        first2Chars;

      if (property in _transformProps && property !== _transformOriginProp$1) {
        property = _transformProp$2;
      }

      if (style.removeProperty) {
        first2Chars = property.substr(0, 2);

        if (first2Chars === "ms" || property.substr(0, 6) === "webkit") {
          //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
          property = "-" + property;
        }

        style.removeProperty(
          first2Chars === "--"
            ? property
            : property.replace(_capsExp$1, "-$1").toLowerCase()
        );
      } else {
        //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
        style.removeAttribute(property);
      }
    }
  },
  _addNonTweeningPT = function _addNonTweeningPT(
    plugin,
    target,
    property,
    beginning,
    end,
    onlySetAtEnd
  ) {
    var pt = new PropTween$1(
      plugin._pt,
      target,
      property,
      0,
      1,
      onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue
    );
    plugin._pt = pt;
    pt.b = beginning;
    pt.e = end;

    plugin._props.push(property);

    return pt;
  },
  _nonConvertibleUnits = {
    deg: 1,
    rad: 1,
    turn: 1,
  },
  _nonStandardLayouts = {
    grid: 1,
    flex: 1,
  },
  //takes a single value like 20px and converts it to the unit specified, like "%", returning only the numeric amount.
  _convertToUnit = function _convertToUnit(target, property, value, unit) {
    var curValue = parseFloat(value) || 0,
      curUnit = (value + "").trim().substr((curValue + "").length) || "px",
      // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()
      style = _tempDiv.style,
      horizontal = _horizontalExp.test(property),
      isRootSVG = target.tagName.toLowerCase() === "svg",
      measureProperty =
        (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"),
      amount = 100,
      toPixels = unit === "px",
      toPercent = unit === "%",
      px,
      parent,
      cache,
      isSVG;

    if (
      unit === curUnit ||
      !curValue ||
      _nonConvertibleUnits[unit] ||
      _nonConvertibleUnits[curUnit]
    ) {
      return curValue;
    }

    curUnit !== "px" &&
      !toPixels &&
      (curValue = _convertToUnit(target, property, value, "px"));
    isSVG = target.getCTM && _isSVG(target);

    if (
      (toPercent || curUnit === "%") &&
      (_transformProps[property] || ~property.indexOf("adius"))
    ) {
      px = isSVG
        ? target.getBBox()[horizontal ? "width" : "height"]
        : target[measureProperty];
      return _round$2(
        toPercent ? (curValue / px) * amount : (curValue / 100) * px
      );
    }

    style[horizontal ? "width" : "height"] =
      amount + (toPixels ? curUnit : unit);
    parent =
      (unit !== "rem" && ~property.indexOf("adius")) ||
      (unit === "em" && target.appendChild && !isRootSVG)
        ? target
        : target.parentNode;

    if (isSVG) {
      parent = (target.ownerSVGElement || {}).parentNode;
    }

    if (!parent || parent === _doc$3 || !parent.appendChild) {
      parent = _doc$3.body;
    }

    cache = parent._gsap;

    if (
      cache &&
      toPercent &&
      cache.width &&
      horizontal &&
      cache.time === _ticker.time &&
      !cache.uncache
    ) {
      return _round$2((curValue / cache.width) * amount);
    } else {
      if (toPercent && (property === "height" || property === "width")) {
        // if we're dealing with width/height that's inside a container with padding and/or it's a flexbox/grid container, we must apply it to the target itself rather than the _tempDiv in order to ensure complete accuracy, factoring in the parent's padding.
        var v = target.style[property];
        target.style[property] = amount + unit;
        px = target[measureProperty];
        v ? (target.style[property] = v) : _removeProperty(target, property);
      } else {
        (toPercent || curUnit === "%") &&
          !_nonStandardLayouts[_getComputedProperty(parent, "display")] &&
          (style.position = _getComputedProperty(target, "position"));
        parent === target && (style.position = "static"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.

        parent.appendChild(_tempDiv);
        px = _tempDiv[measureProperty];
        parent.removeChild(_tempDiv);
        style.position = "absolute";
      }

      if (horizontal && toPercent) {
        cache = _getCache(parent);
        cache.time = _ticker.time;
        cache.width = parent[measureProperty];
      }
    }

    return _round$2(
      toPixels
        ? (px * curValue) / amount
        : px && curValue
        ? (amount / px) * curValue
        : 0
    );
  },
  _get$1 = function _get(target, property, unit, uncache) {
    var value;
    _pluginInitted || _initCore$1();

    if (property in _propertyAliases && property !== "transform") {
      property = _propertyAliases[property];

      if (~property.indexOf(",")) {
        property = property.split(",")[0];
      }
    }

    if (_transformProps[property] && property !== "transform") {
      value = _parseTransform(target, uncache);
      value =
        property !== "transformOrigin"
          ? value[property]
          : value.svg
          ? value.origin
          : _firstTwoOnly(
              _getComputedProperty(target, _transformOriginProp$1)
            ) +
            " " +
            value.zOrigin +
            "px";
    } else {
      value = target.style[property];

      if (
        !value ||
        value === "auto" ||
        uncache ||
        ~(value + "").indexOf("calc(")
      ) {
        value =
          (_specialProps[property] &&
            _specialProps[property](target, property, unit)) ||
          _getComputedProperty(target, property) ||
          _getProperty(target, property) ||
          (property === "opacity" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius
      }
    }

    return unit && !~(value + "").trim().indexOf(" ")
      ? _convertToUnit(target, property, value, unit) + unit
      : value;
  },
  _tweenComplexCSSString = function _tweenComplexCSSString(
    target,
    prop,
    start,
    end
  ) {
    // note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
    if (!start || start === "none") {
      // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style ("clipPath" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as "none" whereas WebkitClipPath reports accurately like "ellipse(100% 0% at 50% 0%)", so in this case we must SWITCH to using the prefixed property instead. See https://gsap.com/forums/topic/18310-clippath-doesnt-work-on-ios/
      var p = _checkPropPrefix(prop, target, 1),
        s = p && _getComputedProperty(target, p, 1);

      if (s && s !== start) {
        prop = p;
        start = s;
      } else if (prop === "borderColor") {
        start = _getComputedProperty(target, "borderTopColor"); // Firefox bug: always reports "borderColor" as "", so we must fall back to borderTopColor. See https://gsap.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/
      }
    }

    var pt = new PropTween$1(
        this._pt,
        target.style,
        prop,
        0,
        1,
        _renderComplexString
      ),
      index = 0,
      matchIndex = 0,
      a,
      result,
      startValues,
      startNum,
      color,
      startValue,
      endValue,
      endNum,
      chunk,
      endUnit,
      startUnit,
      endValues;
    pt.b = start;
    pt.e = end;
    start += ""; // ensure values are strings

    end += "";

    if (end.substring(0, 6) === "var(--") {
      end = _getComputedProperty(target, end.substring(4, end.indexOf(")")));
    }

    if (end === "auto") {
      startValue = target.style[prop];
      target.style[prop] = end;
      end = _getComputedProperty(target, prop) || end;
      startValue
        ? (target.style[prop] = startValue)
        : _removeProperty(target, prop);
    }

    a = [start, end];

    _colorStringFilter(a); // pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().

    start = a[0];
    end = a[1];
    startValues = start.match(_numWithUnitExp) || [];
    endValues = end.match(_numWithUnitExp) || [];

    if (endValues.length) {
      while ((result = _numWithUnitExp.exec(end))) {
        endValue = result[0];
        chunk = end.substring(index, result.index);

        if (color) {
          color = (color + 1) % 5;
        } else if (
          chunk.substr(-5) === "rgba(" ||
          chunk.substr(-5) === "hsla("
        ) {
          color = 1;
        }

        if (endValue !== (startValue = startValues[matchIndex++] || "")) {
          startNum = parseFloat(startValue) || 0;
          startUnit = startValue.substr((startNum + "").length);
          endValue.charAt(1) === "=" &&
            (endValue = _parseRelative(startNum, endValue) + startUnit);
          endNum = parseFloat(endValue);
          endUnit = endValue.substr((endNum + "").length);
          index = _numWithUnitExp.lastIndex - endUnit.length;

          if (!endUnit) {
            //if something like "perspective:300" is passed in and we must add a unit to the end
            endUnit = endUnit || _config.units[prop] || startUnit;

            if (index === end.length) {
              end += endUnit;
              pt.e += endUnit;
            }
          }

          if (startUnit !== endUnit) {
            startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;
          } // these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.

          pt._pt = {
            _next: pt._pt,
            p: chunk || matchIndex === 1 ? chunk : ",",
            //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
            s: startNum,
            c: endNum - startNum,
            m: (color && color < 4) || prop === "zIndex" ? Math.round : 0,
          };
        }
      }

      pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
    } else {
      pt.r =
        prop === "display" && end === "none"
          ? _renderNonTweeningValueOnlyAtEnd
          : _renderNonTweeningValue;
    }

    _relExp.test(end) && (pt.e = 0); //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).

    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus "this" would refer to the plugin.

    return pt;
  },
  _keywordToPercent = {
    top: "0%",
    bottom: "100%",
    left: "0%",
    right: "100%",
    center: "50%",
  },
  _convertKeywordsToPercentages = function _convertKeywordsToPercentages(
    value
  ) {
    var split = value.split(" "),
      x = split[0],
      y = split[1] || "50%";

    if (x === "top" || x === "bottom" || y === "left" || y === "right") {
      //the user provided them in the wrong order, so flip them
      value = x;
      x = y;
      y = value;
    }

    split[0] = _keywordToPercent[x] || x;
    split[1] = _keywordToPercent[y] || y;
    return split.join(" ");
  },
  _renderClearProps = function _renderClearProps(ratio, data) {
    if (data.tween && data.tween._time === data.tween._dur) {
      var target = data.t,
        style = target.style,
        props = data.u,
        cache = target._gsap,
        prop,
        clearTransforms,
        i;

      if (props === "all" || props === true) {
        style.cssText = "";
        clearTransforms = 1;
      } else {
        props = props.split(",");
        i = props.length;

        while (--i > -1) {
          prop = props[i];

          if (_transformProps[prop]) {
            clearTransforms = 1;
            prop =
              prop === "transformOrigin"
                ? _transformOriginProp$1
                : _transformProp$2;
          }

          _removeProperty(target, prop);
        }
      }

      if (clearTransforms) {
        _removeProperty(target, _transformProp$2);

        if (cache) {
          cache.svg && target.removeAttribute("transform");
          style.scale = style.rotate = style.translate = "none";

          _parseTransform(target, 1); // force all the cached values back to "normal"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.

          cache.uncache = 1;

          _removeIndependentTransforms(style);
        }
      }
    }
  },
  // note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.
  _specialProps = {
    clearProps: function clearProps(plugin, target, property, endValue, tween) {
      if (tween.data !== "isFromStart") {
        var pt = (plugin._pt = new PropTween$1(
          plugin._pt,
          target,
          property,
          0,
          0,
          _renderClearProps
        ));
        pt.u = endValue;
        pt.pr = -10;
        pt.tween = tween;

        plugin._props.push(property);

        return 1;
      }
    },
    /* className feature (about 0.4kb gzipped).
  , className(plugin, target, property, endValue, tween) {
  	let _renderClassName = (ratio, data) => {
  			data.css.render(ratio, data.css);
  			if (!ratio || ratio === 1) {
  				let inline = data.rmv,
  					target = data.t,
  					p;
  				target.setAttribute("class", ratio ? data.e : data.b);
  				for (p in inline) {
  					_removeProperty(target, p);
  				}
  			}
  		},
  		_getAllStyles = (target) => {
  			let styles = {},
  				computed = getComputedStyle(target),
  				p;
  			for (p in computed) {
  				if (isNaN(p) && p !== "cssText" && p !== "length") {
  					styles[p] = computed[p];
  				}
  			}
  			_setDefaults(styles, _parseTransform(target, 1));
  			return styles;
  		},
  		startClassList = target.getAttribute("class"),
  		style = target.style,
  		cssText = style.cssText,
  		cache = target._gsap,
  		classPT = cache.classPT,
  		inlineToRemoveAtEnd = {},
  		data = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== "=") ? endValue : startClassList.replace(new RegExp("(?:\\s|^)" + endValue.substr(2) + "(?![\\w-])"), "") + ((endValue.charAt(0) === "+") ? " " + endValue.substr(2) : "")},
  		changingVars = {},
  		startVars = _getAllStyles(target),
  		transformRelated = /(transform|perspective)/i,
  		endVars, p;
  	if (classPT) {
  		classPT.r(1, classPT.d);
  		_removeLinkedListItem(classPT.d.plugin, classPT, "_pt");
  	}
  	target.setAttribute("class", data.e);
  	endVars = _getAllStyles(target, true);
  	target.setAttribute("class", startClassList);
  	for (p in endVars) {
  		if (endVars[p] !== startVars[p] && !transformRelated.test(p)) {
  			changingVars[p] = endVars[p];
  			if (!style[p] && style[p] !== "0") {
  				inlineToRemoveAtEnd[p] = 1;
  			}
  		}
  	}
  	cache.classPT = plugin._pt = new PropTween(plugin._pt, target, "className", 0, 0, _renderClassName, data, 0, -11);
  	if (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://gsap.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.
  		style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
  	}
  	_parseTransform(target, true); //to clear the caching of transforms
  	data.css = new gsap.plugins.css();
  	data.css.init(target, changingVars, tween);
  	plugin._props.push(...data.css._props);
  	return 1;
  }
  */
  },
  /*
   * --------------------------------------------------------------------------------------
   * TRANSFORMS
   * --------------------------------------------------------------------------------------
   */
  _identity2DMatrix = [1, 0, 0, 1, 0, 0],
  _rotationalProperties = {},
  _isNullTransform = function _isNullTransform(value) {
    return value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value;
  },
  _getComputedTransformMatrixAsArray =
    function _getComputedTransformMatrixAsArray(target) {
      var matrixString = _getComputedProperty(target, _transformProp$2);

      return _isNullTransform(matrixString)
        ? _identity2DMatrix
        : matrixString.substr(7).match(_numExp$1).map(_round$2);
    },
  _getMatrix = function _getMatrix(target, force2D) {
    var cache = target._gsap || _getCache(target),
      style = target.style,
      matrix = _getComputedTransformMatrixAsArray(target),
      parent,
      nextSibling,
      temp,
      addedToDOM;

    if (cache.svg && target.getAttribute("transform")) {
      temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like "translate(50,60) rotate(135,0,0)" are parsed because it mashes it into a matrix.

      matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
      return matrix.join(",") === "1,0,0,1,0,0" ? _identity2DMatrix : matrix;
    } else if (
      matrix === _identity2DMatrix &&
      !target.offsetParent &&
      target !== _docElement$1 &&
      !cache.svg
    ) {
      //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397
      //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
      temp = style.display;
      style.display = "block";
      parent = target.parentNode;

      if (
        !parent ||
        (!target.offsetParent && !target.getBoundingClientRect().width)
      ) {
        // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375. Note: position: fixed elements report a null offsetParent but they could also be invisible because they're in an ancestor with display: none, so we check getBoundingClientRect(). We only want to alter the DOM if we absolutely have to because it can cause iframe content to reload, like a Vimeo video.
        addedToDOM = 1; //flag

        nextSibling = target.nextElementSibling;

        _docElement$1.appendChild(target); //we must add it to the DOM in order to get values properly
      }

      matrix = _getComputedTransformMatrixAsArray(target);
      temp ? (style.display = temp) : _removeProperty(target, "display");

      if (addedToDOM) {
        nextSibling
          ? parent.insertBefore(target, nextSibling)
          : parent
          ? parent.appendChild(target)
          : _docElement$1.removeChild(target);
      }
    }

    return force2D && matrix.length > 6
      ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]]
      : matrix;
  },
  _applySVGOrigin = function _applySVGOrigin(
    target,
    origin,
    originIsAbsolute,
    smooth,
    matrixArray,
    pluginToAddPropTweensTo
  ) {
    var cache = target._gsap,
      matrix = matrixArray || _getMatrix(target, true),
      xOriginOld = cache.xOrigin || 0,
      yOriginOld = cache.yOrigin || 0,
      xOffsetOld = cache.xOffset || 0,
      yOffsetOld = cache.yOffset || 0,
      a = matrix[0],
      b = matrix[1],
      c = matrix[2],
      d = matrix[3],
      tx = matrix[4],
      ty = matrix[5],
      originSplit = origin.split(" "),
      xOrigin = parseFloat(originSplit[0]) || 0,
      yOrigin = parseFloat(originSplit[1]) || 0,
      bounds,
      determinant,
      x,
      y;

    if (!originIsAbsolute) {
      bounds = _getBBox(target);
      xOrigin =
        bounds.x +
        (~originSplit[0].indexOf("%")
          ? (xOrigin / 100) * bounds.width
          : xOrigin);
      yOrigin =
        bounds.y +
        (~(originSplit[1] || originSplit[0]).indexOf("%")
          ? (yOrigin / 100) * bounds.height
          : yOrigin); // if (!("xOrigin" in cache) && (xOrigin || yOrigin)) { // added in 3.12.3, reverted in 3.12.4; requires more exploration
      // 	xOrigin -= bounds.x;
      // 	yOrigin -= bounds.y;
      // }
    } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {
      //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
      x =
        xOrigin * (d / determinant) +
        yOrigin * (-c / determinant) +
        (c * ty - d * tx) / determinant;
      y =
        xOrigin * (-b / determinant) +
        yOrigin * (a / determinant) -
        (a * ty - b * tx) / determinant;
      xOrigin = x;
      yOrigin = y; // theory: we only had to do this for smoothing and it assumes that the previous one was not originIsAbsolute.
    }

    if (smooth || (smooth !== false && cache.smooth)) {
      tx = xOrigin - xOriginOld;
      ty = yOrigin - yOriginOld;
      cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
      cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
    } else {
      cache.xOffset = cache.yOffset = 0;
    }

    cache.xOrigin = xOrigin;
    cache.yOrigin = yOrigin;
    cache.smooth = !!smooth;
    cache.origin = origin;
    cache.originIsAbsolute = !!originIsAbsolute;
    target.style[_transformOriginProp$1] = "0px 0px"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).

    if (pluginToAddPropTweensTo) {
      _addNonTweeningPT(
        pluginToAddPropTweensTo,
        cache,
        "xOrigin",
        xOriginOld,
        xOrigin
      );

      _addNonTweeningPT(
        pluginToAddPropTweensTo,
        cache,
        "yOrigin",
        yOriginOld,
        yOrigin
      );

      _addNonTweeningPT(
        pluginToAddPropTweensTo,
        cache,
        "xOffset",
        xOffsetOld,
        cache.xOffset
      );

      _addNonTweeningPT(
        pluginToAddPropTweensTo,
        cache,
        "yOffset",
        yOffsetOld,
        cache.yOffset
      );
    }

    target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
  },
  _parseTransform = function _parseTransform(target, uncache) {
    var cache = target._gsap || new GSCache(target);

    if ("x" in cache && !uncache && !cache.uncache) {
      return cache;
    }

    var style = target.style,
      invertedScaleX = cache.scaleX < 0,
      px = "px",
      deg = "deg",
      cs = getComputedStyle(target),
      origin = _getComputedProperty(target, _transformOriginProp$1) || "0",
      x,
      y,
      z,
      scaleX,
      scaleY,
      rotation,
      rotationX,
      rotationY,
      skewX,
      skewY,
      perspective,
      xOrigin,
      yOrigin,
      matrix,
      angle,
      cos,
      sin,
      a,
      b,
      c,
      d,
      a12,
      a22,
      t1,
      t2,
      t3,
      a13,
      a23,
      a33,
      a42,
      a43,
      a32;
    x =
      y =
      z =
      rotation =
      rotationX =
      rotationY =
      skewX =
      skewY =
      perspective =
        0;
    scaleX = scaleY = 1;
    cache.svg = !!(target.getCTM && _isSVG(target));

    if (cs.translate) {
      // accommodate independent transforms by combining them into normal ones.
      if (
        cs.translate !== "none" ||
        cs.scale !== "none" ||
        cs.rotate !== "none"
      ) {
        style[_transformProp$2] =
          (cs.translate !== "none"
            ? "translate3d(" +
              (cs.translate + " 0 0").split(" ").slice(0, 3).join(", ") +
              ") "
            : "") +
          (cs.rotate !== "none" ? "rotate(" + cs.rotate + ") " : "") +
          (cs.scale !== "none"
            ? "scale(" + cs.scale.split(" ").join(",") + ") "
            : "") +
          (cs[_transformProp$2] !== "none" ? cs[_transformProp$2] : "");
      }

      style.scale = style.rotate = style.translate = "none";
    }

    matrix = _getMatrix(target, cache.svg);

    if (cache.svg) {
      if (cache.uncache) {
        // if cache.uncache is true (and maybe if origin is 0,0), we need to set element.style.transformOrigin = (cache.xOrigin - bbox.x) + "px " + (cache.yOrigin - bbox.y) + "px". Previously we let the data-svg-origin stay instead, but when introducing revert(), it complicated things.
        t2 = target.getBBox();
        origin = cache.xOrigin - t2.x + "px " + (cache.yOrigin - t2.y) + "px";
        t1 = "";
      } else {
        t1 = !uncache && target.getAttribute("data-svg-origin"); //  Remember, to work around browser inconsistencies we always force SVG elements' transformOrigin to 0,0 and offset the translation accordingly.
      }

      _applySVGOrigin(
        target,
        t1 || origin,
        !!t1 || cache.originIsAbsolute,
        cache.smooth !== false,
        matrix
      );
    }

    xOrigin = cache.xOrigin || 0;
    yOrigin = cache.yOrigin || 0;

    if (matrix !== _identity2DMatrix) {
      a = matrix[0]; //a11

      b = matrix[1]; //a21

      c = matrix[2]; //a31

      d = matrix[3]; //a41

      x = a12 = matrix[4];
      y = a22 = matrix[5]; //2D matrix

      if (matrix.length === 6) {
        scaleX = Math.sqrt(a * a + b * b);
        scaleY = Math.sqrt(d * d + c * c);
        rotation = a || b ? _atan2$1(b, a) * _RAD2DEG$1 : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).

        skewX = c || d ? _atan2$1(c, d) * _RAD2DEG$1 + rotation : 0;
        skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD$2)));

        if (cache.svg) {
          x -= xOrigin - (xOrigin * a + yOrigin * c);
          y -= yOrigin - (xOrigin * b + yOrigin * d);
        } //3D matrix
      } else {
        a32 = matrix[6];
        a42 = matrix[7];
        a13 = matrix[8];
        a23 = matrix[9];
        a33 = matrix[10];
        a43 = matrix[11];
        x = matrix[12];
        y = matrix[13];
        z = matrix[14];
        angle = _atan2$1(a32, a33);
        rotationX = angle * _RAD2DEG$1; //rotationX

        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a12 * cos + a13 * sin;
          t2 = a22 * cos + a23 * sin;
          t3 = a32 * cos + a33 * sin;
          a13 = a12 * -sin + a13 * cos;
          a23 = a22 * -sin + a23 * cos;
          a33 = a32 * -sin + a33 * cos;
          a43 = a42 * -sin + a43 * cos;
          a12 = t1;
          a22 = t2;
          a32 = t3;
        } //rotationY

        angle = _atan2$1(-c, a33);
        rotationY = angle * _RAD2DEG$1;

        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a * cos - a13 * sin;
          t2 = b * cos - a23 * sin;
          t3 = c * cos - a33 * sin;
          a43 = d * sin + a43 * cos;
          a = t1;
          b = t2;
          c = t3;
        } //rotationZ

        angle = _atan2$1(b, a);
        rotation = angle * _RAD2DEG$1;

        if (angle) {
          cos = Math.cos(angle);
          sin = Math.sin(angle);
          t1 = a * cos + b * sin;
          t2 = a12 * cos + a22 * sin;
          b = b * cos - a * sin;
          a22 = a22 * cos - a12 * sin;
          a = t1;
          a12 = t2;
        }

        if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {
          //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
          rotationX = rotation = 0;
          rotationY = 180 - rotationY;
        }

        scaleX = _round$2(Math.sqrt(a * a + b * b + c * c));
        scaleY = _round$2(Math.sqrt(a22 * a22 + a32 * a32));
        angle = _atan2$1(a12, a22);
        skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG$1 : 0;
        perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
      }

      if (cache.svg) {
        //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).
        t1 = target.getAttribute("transform");
        cache.forceCSS =
          target.setAttribute("transform", "") ||
          !_isNullTransform(_getComputedProperty(target, _transformProp$2));
        t1 && target.setAttribute("transform", t1);
      }
    }

    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
      if (invertedScaleX) {
        scaleX *= -1;
        skewX += rotation <= 0 ? 180 : -180;
        rotation += rotation <= 0 ? 180 : -180;
      } else {
        scaleY *= -1;
        skewX += skewX <= 0 ? 180 : -180;
      }
    }

    uncache = uncache || cache.uncache;
    cache.x =
      x -
      ((cache.xPercent =
        x &&
        ((!uncache && cache.xPercent) ||
          (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0)))
        ? (target.offsetWidth * cache.xPercent) / 100
        : 0) +
      px;
    cache.y =
      y -
      ((cache.yPercent =
        y &&
        ((!uncache && cache.yPercent) ||
          (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0)))
        ? (target.offsetHeight * cache.yPercent) / 100
        : 0) +
      px;
    cache.z = z + px;
    cache.scaleX = _round$2(scaleX);
    cache.scaleY = _round$2(scaleY);
    cache.rotation = _round$2(rotation) + deg;
    cache.rotationX = _round$2(rotationX) + deg;
    cache.rotationY = _round$2(rotationY) + deg;
    cache.skewX = skewX + deg;
    cache.skewY = skewY + deg;
    cache.transformPerspective = perspective + px;

    if (
      (cache.zOrigin =
        parseFloat(origin.split(" ")[2]) || (!uncache && cache.zOrigin) || 0)
    ) {
      style[_transformOriginProp$1] = _firstTwoOnly(origin);
    }

    cache.xOffset = cache.yOffset = 0;
    cache.force3D = _config.force3D;
    cache.renderTransform = cache.svg
      ? _renderSVGTransforms
      : _supports3D
      ? _renderCSSTransforms
      : _renderNon3DTransforms;
    cache.uncache = 0;
    return cache;
  },
  _firstTwoOnly = function _firstTwoOnly(value) {
    return (value = value.split(" "))[0] + " " + value[1];
  },
  //for handling transformOrigin values, stripping out the 3rd dimension
  _addPxTranslate = function _addPxTranslate(target, start, value) {
    var unit = getUnit(start);
    return (
      _round$2(
        parseFloat(start) +
          parseFloat(_convertToUnit(target, "x", value + "px", unit))
      ) + unit
    );
  },
  _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {
    cache.z = "0px";
    cache.rotationY = cache.rotationX = "0deg";
    cache.force3D = 0;

    _renderCSSTransforms(ratio, cache);
  },
  _zeroDeg = "0deg",
  _zeroPx = "0px",
  _endParenthesis = ") ",
  _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {
    var _ref = cache || this,
      xPercent = _ref.xPercent,
      yPercent = _ref.yPercent,
      x = _ref.x,
      y = _ref.y,
      z = _ref.z,
      rotation = _ref.rotation,
      rotationY = _ref.rotationY,
      rotationX = _ref.rotationX,
      skewX = _ref.skewX,
      skewY = _ref.skewY,
      scaleX = _ref.scaleX,
      scaleY = _ref.scaleY,
      transformPerspective = _ref.transformPerspective,
      force3D = _ref.force3D,
      target = _ref.target,
      zOrigin = _ref.zOrigin,
      transforms = "",
      use3D = (force3D === "auto" && ratio && ratio !== 1) || force3D === true; // Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)

    if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
      var angle = parseFloat(rotationY) * _DEG2RAD$2,
        a13 = Math.sin(angle),
        a33 = Math.cos(angle),
        cos;

      angle = parseFloat(rotationX) * _DEG2RAD$2;
      cos = Math.cos(angle);
      x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
      y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
      z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
    }

    if (transformPerspective !== _zeroPx) {
      transforms += "perspective(" + transformPerspective + _endParenthesis;
    }

    if (xPercent || yPercent) {
      transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
    }

    if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
      transforms +=
        z !== _zeroPx || use3D
          ? "translate3d(" + x + ", " + y + ", " + z + ") "
          : "translate(" + x + ", " + y + _endParenthesis;
    }

    if (rotation !== _zeroDeg) {
      transforms += "rotate(" + rotation + _endParenthesis;
    }

    if (rotationY !== _zeroDeg) {
      transforms += "rotateY(" + rotationY + _endParenthesis;
    }

    if (rotationX !== _zeroDeg) {
      transforms += "rotateX(" + rotationX + _endParenthesis;
    }

    if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
      transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
    }

    if (scaleX !== 1 || scaleY !== 1) {
      transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
    }

    target.style[_transformProp$2] = transforms || "translate(0, 0)";
  },
  _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {
    var _ref2 = cache || this,
      xPercent = _ref2.xPercent,
      yPercent = _ref2.yPercent,
      x = _ref2.x,
      y = _ref2.y,
      rotation = _ref2.rotation,
      skewX = _ref2.skewX,
      skewY = _ref2.skewY,
      scaleX = _ref2.scaleX,
      scaleY = _ref2.scaleY,
      target = _ref2.target,
      xOrigin = _ref2.xOrigin,
      yOrigin = _ref2.yOrigin,
      xOffset = _ref2.xOffset,
      yOffset = _ref2.yOffset,
      forceCSS = _ref2.forceCSS,
      tx = parseFloat(x),
      ty = parseFloat(y),
      a11,
      a21,
      a12,
      a22,
      temp;

    rotation = parseFloat(rotation);
    skewX = parseFloat(skewX);
    skewY = parseFloat(skewY);

    if (skewY) {
      //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
      skewY = parseFloat(skewY);
      skewX += skewY;
      rotation += skewY;
    }

    if (rotation || skewX) {
      rotation *= _DEG2RAD$2;
      skewX *= _DEG2RAD$2;
      a11 = Math.cos(rotation) * scaleX;
      a21 = Math.sin(rotation) * scaleX;
      a12 = Math.sin(rotation - skewX) * -scaleY;
      a22 = Math.cos(rotation - skewX) * scaleY;

      if (skewX) {
        skewY *= _DEG2RAD$2;
        temp = Math.tan(skewX - skewY);
        temp = Math.sqrt(1 + temp * temp);
        a12 *= temp;
        a22 *= temp;

        if (skewY) {
          temp = Math.tan(skewY);
          temp = Math.sqrt(1 + temp * temp);
          a11 *= temp;
          a21 *= temp;
        }
      }

      a11 = _round$2(a11);
      a21 = _round$2(a21);
      a12 = _round$2(a12);
      a22 = _round$2(a22);
    } else {
      a11 = scaleX;
      a22 = scaleY;
      a21 = a12 = 0;
    }

    if ((tx && !~(x + "").indexOf("px")) || (ty && !~(y + "").indexOf("px"))) {
      tx = _convertToUnit(target, "x", x, "px");
      ty = _convertToUnit(target, "y", y, "px");
    }

    if (xOrigin || yOrigin || xOffset || yOffset) {
      tx = _round$2(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
      ty = _round$2(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
    }

    if (xPercent || yPercent) {
      //The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the translation to simulate it.
      temp = target.getBBox();
      tx = _round$2(tx + (xPercent / 100) * temp.width);
      ty = _round$2(ty + (yPercent / 100) * temp.height);
    }

    temp =
      "matrix(" +
      a11 +
      "," +
      a21 +
      "," +
      a12 +
      "," +
      a22 +
      "," +
      tx +
      "," +
      ty +
      ")";
    target.setAttribute("transform", temp);
    forceCSS && (target.style[_transformProp$2] = temp); //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the transform attribute changes!)
  },
  _addRotationalPropTween = function _addRotationalPropTween(
    plugin,
    target,
    property,
    startNum,
    endValue
  ) {
    var cap = 360,
      isString = _isString$2(endValue),
      endNum =
        parseFloat(endValue) *
        (isString && ~endValue.indexOf("rad") ? _RAD2DEG$1 : 1),
      change = endNum - startNum,
      finalValue = startNum + change + "deg",
      direction,
      pt;

    if (isString) {
      direction = endValue.split("_")[1];

      if (direction === "short") {
        change %= cap;

        if (change !== change % (cap / 2)) {
          change += change < 0 ? cap : -cap;
        }
      }

      if (direction === "cw" && change < 0) {
        change = ((change + cap * _bigNum) % cap) - ~~(change / cap) * cap;
      } else if (direction === "ccw" && change > 0) {
        change = ((change - cap * _bigNum) % cap) - ~~(change / cap) * cap;
      }
    }

    plugin._pt = pt = new PropTween$1(
      plugin._pt,
      target,
      property,
      startNum,
      change,
      _renderPropWithEnd
    );
    pt.e = finalValue;
    pt.u = "deg";

    plugin._props.push(property);

    return pt;
  },
  _assign = function _assign(target, source) {
    // Internet Explorer doesn't have Object.assign(), so we recreate it here.
    for (var p in source) {
      target[p] = source[p];
    }

    return target;
  },
  _addRawTransformPTs = function _addRawTransformPTs(
    plugin,
    transforms,
    target
  ) {
    //for handling cases where someone passes in a whole transform string, like transform: "scale(2, 3) rotate(20deg) translateY(30em)"
    var startCache = _assign({}, target._gsap),
      exclude = "perspective,force3D,transformOrigin,svgOrigin",
      style = target.style,
      endCache,
      p,
      startValue,
      endValue,
      startNum,
      endNum,
      startUnit,
      endUnit;

    if (startCache.svg) {
      startValue = target.getAttribute("transform");
      target.setAttribute("transform", "");
      style[_transformProp$2] = transforms;
      endCache = _parseTransform(target, 1);

      _removeProperty(target, _transformProp$2);

      target.setAttribute("transform", startValue);
    } else {
      startValue = getComputedStyle(target)[_transformProp$2];
      style[_transformProp$2] = transforms;
      endCache = _parseTransform(target, 1);
      style[_transformProp$2] = startValue;
    }

    for (p in _transformProps) {
      startValue = startCache[p];
      endValue = endCache[p];

      if (startValue !== endValue && exclude.indexOf(p) < 0) {
        //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
        startUnit = getUnit(startValue);
        endUnit = getUnit(endValue);
        startNum =
          startUnit !== endUnit
            ? _convertToUnit(target, p, startValue, endUnit)
            : parseFloat(startValue);
        endNum = parseFloat(endValue);
        plugin._pt = new PropTween$1(
          plugin._pt,
          endCache,
          p,
          startNum,
          endNum - startNum,
          _renderCSSProp
        );
        plugin._pt.u = endUnit || 0;

        plugin._props.push(p);
      }
    }

    _assign(endCache, startCache);
  }; // handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.

_forEachName("padding,margin,Width,Radius", function (name, index) {
  var t = "Top",
    r = "Right",
    b = "Bottom",
    l = "Left",
    props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(
      function (side) {
        return index < 2 ? name + side : "border" + side + name;
      }
    );

  _specialProps[index > 1 ? "border" + name : name] = function (
    plugin,
    target,
    property,
    endValue,
    tween
  ) {
    var a, vars;

    if (arguments.length < 4) {
      // getter, passed target, property, and unit (from _get())
      a = props.map(function (prop) {
        return _get$1(plugin, prop, property);
      });
      vars = a.join(" ");
      return vars.split(a[0]).length === 5 ? a[0] : vars;
    }

    a = (endValue + "").split(" ");
    vars = {};
    props.forEach(function (prop, i) {
      return (vars[prop] = a[i] = a[i] || a[((i - 1) / 2) | 0]);
    });
    plugin.init(target, vars, tween);
  };
});

var CSSPlugin = {
  name: "css",
  register: _initCore$1,
  targetTest: function targetTest(target) {
    return target.style && target.nodeType;
  },
  init: function init(target, vars, tween, index, targets) {
    var props = this._props,
      style = target.style,
      startAt = tween.vars.startAt,
      startValue,
      endValue,
      endNum,
      startNum,
      type,
      specialProp,
      p,
      startUnit,
      endUnit,
      relative,
      isTransformRelated,
      transformPropTween,
      cache,
      smooth,
      hasPriority,
      inlineProps;
    _pluginInitted || _initCore$1(); // we may call init() multiple times on the same plugin instance, like when adding special properties, so make sure we don't overwrite the revert data or inlineProps

    this.styles = this.styles || _getStyleSaver$1(target);
    inlineProps = this.styles.props;
    this.tween = tween;

    for (p in vars) {
      if (p === "autoRound") {
        continue;
      }

      endValue = vars[p];

      if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) {
        // plugins
        continue;
      }

      type = typeof endValue;
      specialProp = _specialProps[p];

      if (type === "function") {
        endValue = endValue.call(tween, index, target, targets);
        type = typeof endValue;
      }

      if (type === "string" && ~endValue.indexOf("random(")) {
        endValue = _replaceRandom(endValue);
      }

      if (specialProp) {
        specialProp(this, target, p, endValue, tween) && (hasPriority = 1);
      } else if (p.substr(0, 2) === "--") {
        //CSS variable
        startValue = (getComputedStyle(target).getPropertyValue(p) + "").trim();
        endValue += "";
        _colorExp.lastIndex = 0;

        if (!_colorExp.test(startValue)) {
          // colors don't have units
          startUnit = getUnit(startValue);
          endUnit = getUnit(endValue);
        }

        endUnit
          ? startUnit !== endUnit &&
            (startValue =
              _convertToUnit(target, p, startValue, endUnit) + endUnit)
          : startUnit && (endValue += startUnit);
        this.add(
          style,
          "setProperty",
          startValue,
          endValue,
          index,
          targets,
          0,
          0,
          p
        );
        props.push(p);
        inlineProps.push(p, 0, style[p]);
      } else if (type !== "undefined") {
        if (startAt && p in startAt) {
          // in case someone hard-codes a complex value as the start, like top: "calc(2vh / 2)". Without this, it'd use the computed value (always in px)
          startValue =
            typeof startAt[p] === "function"
              ? startAt[p].call(tween, index, target, targets)
              : startAt[p];
          _isString$2(startValue) &&
            ~startValue.indexOf("random(") &&
            (startValue = _replaceRandom(startValue));
          getUnit(startValue + "") ||
            startValue === "auto" ||
            (startValue +=
              _config.units[p] || getUnit(_get$1(target, p)) || ""); // for cases when someone passes in a unitless value like {x: 100}; if we try setting translate(100, 0px) it won't work.

          (startValue + "").charAt(1) === "=" &&
            (startValue = _get$1(target, p)); // can't work with relative values
        } else {
          startValue = _get$1(target, p);
        }

        startNum = parseFloat(startValue);
        relative =
          type === "string" &&
          endValue.charAt(1) === "=" &&
          endValue.substr(0, 2);
        relative && (endValue = endValue.substr(2));
        endNum = parseFloat(endValue);

        if (p in _propertyAliases) {
          if (p === "autoAlpha") {
            //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.
            if (
              startNum === 1 &&
              _get$1(target, "visibility") === "hidden" &&
              endNum
            ) {
              //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
              startNum = 0;
            }

            inlineProps.push("visibility", 0, style.visibility);

            _addNonTweeningPT(
              this,
              style,
              "visibility",
              startNum ? "inherit" : "hidden",
              endNum ? "inherit" : "hidden",
              !endNum
            );
          }

          if (p !== "scale" && p !== "transform") {
            p = _propertyAliases[p];
            ~p.indexOf(",") && (p = p.split(",")[0]);
          }
        }

        isTransformRelated = p in _transformProps; //--- TRANSFORM-RELATED ---

        if (isTransformRelated) {
          this.styles.save(p);

          if (type === "string" && endValue.substring(0, 6) === "var(--") {
            endValue = _getComputedProperty(
              target,
              endValue.substring(4, endValue.indexOf(")"))
            );
            endNum = parseFloat(endValue);
          }

          if (!transformPropTween) {
            cache = target._gsap;
            (cache.renderTransform && !vars.parseTransform) ||
              _parseTransform(target, vars.parseTransform); // if, for example, gsap.set(... {transform:"translateX(50vw)"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.

            smooth = vars.smoothOrigin !== false && cache.smooth;
            transformPropTween = this._pt = new PropTween$1(
              this._pt,
              style,
              _transformProp$2,
              0,
              1,
              cache.renderTransform,
              cache,
              0,
              -1
            ); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)

            transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.
          }

          if (p === "scale") {
            this._pt = new PropTween$1(
              this._pt,
              cache,
              "scaleY",
              cache.scaleY,
              (relative
                ? _parseRelative(cache.scaleY, relative + endNum)
                : endNum) - cache.scaleY || 0,
              _renderCSSProp
            );
            this._pt.u = 0;
            props.push("scaleY", p);
            p += "X";
          } else if (p === "transformOrigin") {
            inlineProps.push(
              _transformOriginProp$1,
              0,
              style[_transformOriginProp$1]
            );
            endValue = _convertKeywordsToPercentages(endValue); //in case something like "left top" or "bottom right" is passed in. Convert to percentages.

            if (cache.svg) {
              _applySVGOrigin(target, endValue, 0, smooth, 0, this);
            } else {
              endUnit = parseFloat(endValue.split(" ")[2]) || 0; //handle the zOrigin separately!

              endUnit !== cache.zOrigin &&
                _addNonTweeningPT(
                  this,
                  cache,
                  "zOrigin",
                  cache.zOrigin,
                  endUnit
                );

              _addNonTweeningPT(
                this,
                style,
                p,
                _firstTwoOnly(startValue),
                _firstTwoOnly(endValue)
              );
            }

            continue;
          } else if (p === "svgOrigin") {
            _applySVGOrigin(target, endValue, 1, smooth, 0, this);

            continue;
          } else if (p in _rotationalProperties) {
            _addRotationalPropTween(
              this,
              cache,
              p,
              startNum,
              relative
                ? _parseRelative(startNum, relative + endValue)
                : endValue
            );

            continue;
          } else if (p === "smoothOrigin") {
            _addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);

            continue;
          } else if (p === "force3D") {
            cache[p] = endValue;
            continue;
          } else if (p === "transform") {
            _addRawTransformPTs(this, endValue, target);

            continue;
          }
        } else if (!(p in style)) {
          p = _checkPropPrefix(p) || p;
        }

        if (
          isTransformRelated ||
          ((endNum || endNum === 0) &&
            (startNum || startNum === 0) &&
            !_complexExp.test(endValue) &&
            p in style)
        ) {
          startUnit = (startValue + "").substr((startNum + "").length);
          endNum || (endNum = 0); // protect against NaN

          endUnit =
            getUnit(endValue) ||
            (p in _config.units ? _config.units[p] : startUnit);
          startUnit !== endUnit &&
            (startNum = _convertToUnit(target, p, startValue, endUnit));
          this._pt = new PropTween$1(
            this._pt,
            isTransformRelated ? cache : style,
            p,
            startNum,
            (relative ? _parseRelative(startNum, relative + endNum) : endNum) -
              startNum,
            !isTransformRelated &&
            (endUnit === "px" || p === "zIndex") &&
            vars.autoRound !== false
              ? _renderRoundedCSSProp
              : _renderCSSProp
          );
          this._pt.u = endUnit || 0;

          if (startUnit !== endUnit && endUnit !== "%") {
            //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a "b" (beginning) property and point to a render method that handles that. (performance optimization)
            this._pt.b = startValue;
            this._pt.r = _renderCSSPropWithBeginning;
          }
        } else if (!(p in style)) {
          if (p in target) {
            //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.
            this.add(
              target,
              p,
              startValue || target[p],
              relative ? relative + endValue : endValue,
              index,
              targets
            );
          } else if (p !== "parseTransform") {
            _missingPlugin(p, endValue);

            continue;
          }
        } else {
          _tweenComplexCSSString.call(
            this,
            target,
            p,
            startValue,
            relative ? relative + endValue : endValue
          );
        }

        isTransformRelated ||
          (p in style
            ? inlineProps.push(p, 0, style[p])
            : typeof target[p] === "function"
            ? inlineProps.push(p, 2, target[p]())
            : inlineProps.push(p, 1, startValue || target[p]));
        props.push(p);
      }
    }

    hasPriority && _sortPropTweensByPriority(this);
  },
  render: function render(ratio, data) {
    if (data.tween._time || !_reverting$1()) {
      var pt = data._pt;

      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }
    } else {
      data.styles.revert();
    }
  },
  get: _get$1,
  aliases: _propertyAliases,
  getSetter: function getSetter(target, property, plugin) {
    //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like "x" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.
    var p = _propertyAliases[property];
    p && p.indexOf(",") < 0 && (property = p);
    return property in _transformProps &&
      property !== _transformOriginProp$1 &&
      (target._gsap.x || _get$1(target, "x"))
      ? plugin && _recentSetterPlugin === plugin
        ? property === "scale"
          ? _setterScale
          : _setterTransform
        : (_recentSetterPlugin = plugin || {}) &&
          (property === "scale"
            ? _setterScaleWithRender
            : _setterTransformWithRender)
      : target.style && !_isUndefined$1(target.style[property])
      ? _setterCSSStyle
      : ~property.indexOf("-")
      ? _setterCSSProp
      : _getSetter(target, property);
  },
  core: {
    _removeProperty: _removeProperty,
    _getMatrix: _getMatrix,
  },
};
gsap$3.utils.checkPrefix = _checkPropPrefix;
gsap$3.core.getStyleSaver = _getStyleSaver$1;

(function (positionAndScale, rotation, others, aliases) {
  var all = _forEachName(
    positionAndScale + "," + rotation + "," + others,
    function (name) {
      _transformProps[name] = 1;
    }
  );

  _forEachName(rotation, function (name) {
    _config.units[name] = "deg";
    _rotationalProperties[name] = 1;
  });

  _propertyAliases[all[13]] = positionAndScale + "," + rotation;

  _forEachName(aliases, function (name) {
    var split = name.split(":");
    _propertyAliases[split[1]] = all[split[0]];
  });
})(
  "x,y,z,scale,scaleX,scaleY,xPercent,yPercent",
  "rotation,rotationX,rotationY,skewX,skewY",
  "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",
  "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY"
);

_forEachName(
  "x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",
  function (name) {
    _config.units[name] = "px";
  }
);

gsap$3.registerPlugin(CSSPlugin);

var gsapWithCSS = gsap$3.registerPlugin(CSSPlugin) || gsap$3;
// to protect from tree shaking
gsapWithCSS.core.Tween;

/*!
 * paths 3.13.0
 * https://gsap.com
 *
 * Copyright 2008-2025, GreenSock. All rights reserved.
 * Subject to the terms at https://gsap.com/standard-license
 * @author: Jack Doyle, jack@greensock.com
 */

/* eslint-disable */
var _svgPathExp = /[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,
  _numbersExp = /(?:(-)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,
  _scientific = /[\+\-]?\d*\.?\d+e[\+\-]?\d+/gi,
  _selectorExp = /(^[#\.][a-z]|[a-y][a-z])/i,
  _DEG2RAD$1 = Math.PI / 180,
  _RAD2DEG = 180 / Math.PI,
  _sin = Math.sin,
  _cos = Math.cos,
  _abs$1 = Math.abs,
  _sqrt = Math.sqrt,
  _atan2 = Math.atan2,
  _largeNum = 1e8,
  _isString$1 = function _isString(value) {
    return typeof value === "string";
  },
  _isNumber$1 = function _isNumber(value) {
    return typeof value === "number";
  },
  _isUndefined = function _isUndefined(value) {
    return typeof value === "undefined";
  },
  _temp = {},
  _temp2 = {},
  _roundingNum = 1e5,
  _wrapProgress = function _wrapProgress(progress) {
    return (
      Math.round(((progress + _largeNum) % 1) * _roundingNum) / _roundingNum ||
      (progress < 0 ? 0 : 1)
    );
  },
  //if progress lands on 1, the % will make it 0 which is why we || 1, but not if it's negative because it makes more sense for motion to end at 0 in that case.
  _round$1 = function _round(value) {
    return Math.round(value * _roundingNum) / _roundingNum || 0;
  },
  _roundPrecise = function _roundPrecise(value) {
    return Math.round(value * 1e10) / 1e10 || 0;
  },
  _splitSegment = function _splitSegment(rawPath, segIndex, i, t) {
    var segment = rawPath[segIndex],
      shift = t === 1 ? 6 : subdivideSegment(segment, i, t);

    if ((shift || !t) && shift + i + 2 < segment.length) {
      rawPath.splice(segIndex, 0, segment.slice(0, i + shift + 2));
      segment.splice(0, i + shift);
      return 1;
    }
  },
  _getSampleIndex = function _getSampleIndex(samples, length, progress) {
    // slightly slower way than doing this (when there's no lookup): segment.lookup[progress < 1 ? ~~(length / segment.minLength) : segment.lookup.length - 1] || 0;
    var l = samples.length,
      i = ~~(progress * l);

    if (samples[i] > length) {
      while (--i && samples[i] > length) {}

      i < 0 && (i = 0);
    } else {
      while (samples[++i] < length && i < l) {}
    }

    return i < l ? i : l - 1;
  },
  _reverseRawPath = function _reverseRawPath(rawPath, skipOuter) {
    var i = rawPath.length;
    skipOuter || rawPath.reverse();

    while (i--) {
      rawPath[i].reversed || reverseSegment(rawPath[i]);
    }
  },
  _copyMetaData = function _copyMetaData(source, copy) {
    copy.totalLength = source.totalLength;

    if (source.samples) {
      //segment
      copy.samples = source.samples.slice(0);
      copy.lookup = source.lookup.slice(0);
      copy.minLength = source.minLength;
      copy.resolution = source.resolution;
    } else if (source.totalPoints) {
      //rawPath
      copy.totalPoints = source.totalPoints;
    }

    return copy;
  },
  //pushes a new segment into a rawPath, but if its starting values match the ending values of the last segment, it'll merge it into that same segment (to reduce the number of segments)
  _appendOrMerge = function _appendOrMerge(rawPath, segment) {
    var index = rawPath.length,
      prevSeg = rawPath[index - 1] || [],
      l = prevSeg.length;

    if (
      index &&
      segment[0] === prevSeg[l - 2] &&
      segment[1] === prevSeg[l - 1]
    ) {
      segment = prevSeg.concat(segment.slice(2));
      index--;
    }

    rawPath[index] = segment;
  };
/* TERMINOLOGY
 - RawPath - an array of arrays, one for each Segment. A single RawPath could have multiple "M" commands, defining Segments (paths aren't always connected).
 - Segment - an array containing a sequence of Cubic Bezier coordinates in alternating x, y, x, y format. Starting anchor, then control point 1, control point 2, and ending anchor, then the next control point 1, control point 2, anchor, etc. Uses less memory than an array with a bunch of {x, y} points.
 - Bezier - a single cubic Bezier with a starting anchor, two control points, and an ending anchor.
 - the variable "t" is typically the position along an individual Bezier path (time) and it's NOT linear, meaning it could accelerate/decelerate based on the control points whereas the "p" or "progress" value is linearly mapped to the whole path, so it shouldn't really accelerate/decelerate based on control points. So a progress of 0.2 would be almost exactly 20% along the path. "t" is ONLY in an individual Bezier piece.
 */
//accepts basic selector text, a path instance, a RawPath instance, or a Segment and returns a RawPath (makes it easy to homogenize things). If an element or selector text is passed in, it'll also cache the value so that if it's queried again, it'll just take the path data from there instead of parsing it all over again (as long as the path data itself hasn't changed - it'll check).

function getRawPath(value) {
  value =
    _isString$1(value) && _selectorExp.test(value)
      ? document.querySelector(value) || value
      : value;
  var e = value.getAttribute ? value : 0,
    rawPath;

  if (e && (value = value.getAttribute("d"))) {
    //implements caching
    if (!e._gsPath) {
      e._gsPath = {};
    }

    rawPath = e._gsPath[value];
    return rawPath && !rawPath._dirty
      ? rawPath
      : (e._gsPath[value] = stringToRawPath(value));
  }

  return !value
    ? console.warn("Expecting a <path> element or an SVG path data string")
    : _isString$1(value)
    ? stringToRawPath(value)
    : _isNumber$1(value[0])
    ? [value]
    : value;
} //copies a RawPath WITHOUT the length meta data (for speed)

function copyRawPath(rawPath) {
  var a = [],
    i = 0;

  for (; i < rawPath.length; i++) {
    a[i] = _copyMetaData(rawPath[i], rawPath[i].slice(0));
  }

  return _copyMetaData(rawPath, a);
}
function reverseSegment(segment) {
  var i = 0,
    y;
  segment.reverse(); //this will invert the order y, x, y, x so we must flip it back.

  for (; i < segment.length; i += 2) {
    y = segment[i];
    segment[i] = segment[i + 1];
    segment[i + 1] = y;
  }

  segment.reversed = !segment.reversed;
}

var _createPath = function _createPath(e, ignore) {
    var path = document.createElementNS("http://www.w3.org/2000/svg", "path"),
      attr = [].slice.call(e.attributes),
      i = attr.length,
      name;
    ignore = "," + ignore + ",";

    while (--i > -1) {
      name = attr[i].nodeName.toLowerCase(); //in Microsoft Edge, if you don't set the attribute with a lowercase name, it doesn't render correctly! Super weird.

      if (ignore.indexOf("," + name + ",") < 0) {
        path.setAttributeNS(null, name, attr[i].nodeValue);
      }
    }

    return path;
  },
  _typeAttrs = {
    rect: "rx,ry,x,y,width,height",
    circle: "r,cx,cy",
    ellipse: "rx,ry,cx,cy",
    line: "x1,x2,y1,y2",
  },
  _attrToObj = function _attrToObj(e, attrs) {
    var props = attrs ? attrs.split(",") : [],
      obj = {},
      i = props.length;

    while (--i > -1) {
      obj[props[i]] = +e.getAttribute(props[i]) || 0;
    }

    return obj;
  }; //converts an SVG shape like <circle>, <rect>, <polygon>, <polyline>, <ellipse>, etc. to a <path>, swapping it in and copying the attributes to match.

function convertToPath(element, swap) {
  var type = element.tagName.toLowerCase(),
    circ = 0.552284749831,
    data,
    x,
    y,
    r,
    ry,
    path,
    rcirc,
    rycirc,
    points,
    w,
    h,
    x2,
    x3,
    x4,
    x5,
    x6,
    y2,
    y3,
    y4,
    y5,
    y6,
    attr;

  if (type === "path" || !element.getBBox) {
    return element;
  }

  path = _createPath(
    element,
    "x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points"
  );
  attr = _attrToObj(element, _typeAttrs[type]);

  if (type === "rect") {
    r = attr.rx;
    ry = attr.ry || r;
    x = attr.x;
    y = attr.y;
    w = attr.width - r * 2;
    h = attr.height - ry * 2;

    if (r || ry) {
      //if there are rounded corners, render cubic beziers
      x2 = x + r * (1 - circ);
      x3 = x + r;
      x4 = x3 + w;
      x5 = x4 + r * circ;
      x6 = x4 + r;
      y2 = y + ry * (1 - circ);
      y3 = y + ry;
      y4 = y3 + h;
      y5 = y4 + ry * circ;
      y6 = y4 + ry;
      data =
        "M" +
        x6 +
        "," +
        y3 +
        " V" +
        y4 +
        " C" +
        [
          x6,
          y5,
          x5,
          y6,
          x4,
          y6,
          x4 - (x4 - x3) / 3,
          y6,
          x3 + (x4 - x3) / 3,
          y6,
          x3,
          y6,
          x2,
          y6,
          x,
          y5,
          x,
          y4,
          x,
          y4 - (y4 - y3) / 3,
          x,
          y3 + (y4 - y3) / 3,
          x,
          y3,
          x,
          y2,
          x2,
          y,
          x3,
          y,
          x3 + (x4 - x3) / 3,
          y,
          x4 - (x4 - x3) / 3,
          y,
          x4,
          y,
          x5,
          y,
          x6,
          y2,
          x6,
          y3,
        ].join(",") +
        "z";
    } else {
      data =
        "M" +
        (x + w) +
        "," +
        y +
        " v" +
        h +
        " h" +
        -w +
        " v" +
        -h +
        " h" +
        w +
        "z";
    }
  } else if (type === "circle" || type === "ellipse") {
    if (type === "circle") {
      r = ry = attr.r;
      rycirc = r * circ;
    } else {
      r = attr.rx;
      ry = attr.ry;
      rycirc = ry * circ;
    }

    x = attr.cx;
    y = attr.cy;
    rcirc = r * circ;
    data =
      "M" +
      (x + r) +
      "," +
      y +
      " C" +
      [
        x + r,
        y + rycirc,
        x + rcirc,
        y + ry,
        x,
        y + ry,
        x - rcirc,
        y + ry,
        x - r,
        y + rycirc,
        x - r,
        y,
        x - r,
        y - rycirc,
        x - rcirc,
        y - ry,
        x,
        y - ry,
        x + rcirc,
        y - ry,
        x + r,
        y - rycirc,
        x + r,
        y,
      ].join(",") +
      "z";
  } else if (type === "line") {
    data = "M" + attr.x1 + "," + attr.y1 + " L" + attr.x2 + "," + attr.y2; //previously, we just converted to "Mx,y Lx,y" but Safari has bugs that cause that not to render properly when using a stroke-dasharray that's not fully visible! Using a cubic bezier fixes that issue.
  } else if (type === "polyline" || type === "polygon") {
    points = (element.getAttribute("points") + "").match(_numbersExp) || [];
    x = points.shift();
    y = points.shift();
    data = "M" + x + "," + y + " L" + points.join(",");

    if (type === "polygon") {
      data += "," + x + "," + y + "z";
    }
  }

  path.setAttribute(
    "d",
    rawPathToString((path._gsRawPath = stringToRawPath(data)))
  );

  if (swap && element.parentNode) {
    element.parentNode.insertBefore(path, element);
    element.parentNode.removeChild(element);
  }

  return path;
} //returns the rotation (in degrees) at a particular progress on a rawPath (the slope of the tangent)

function getRotationAtBezierT(segment, i, t) {
  var a = segment[i],
    b = segment[i + 2],
    c = segment[i + 4],
    x;
  a += (b - a) * t;
  b += (c - b) * t;
  a += (b - a) * t;
  x = b + (c + (segment[i + 6] - c) * t - b) * t - a;
  a = segment[i + 1];
  b = segment[i + 3];
  c = segment[i + 5];
  a += (b - a) * t;
  b += (c - b) * t;
  a += (b - a) * t;
  return _round$1(
    _atan2(b + (c + (segment[i + 7] - c) * t - b) * t - a, x) * _RAD2DEG
  );
}

function sliceRawPath(rawPath, start, end) {
  end = _isUndefined(end) ? 1 : _roundPrecise(end) || 0; // we must round to avoid issues like 4.15 / 8 = 0.8300000000000001 instead of 0.83 or 2.8 / 5 = 0.5599999999999999 instead of 0.56 and if someone is doing a loop like start: 2.8 / 0.5, end: 2.8 / 0.5 + 1.

  start = _roundPrecise(start) || 0;
  var loops = Math.max(0, ~~(_abs$1(end - start) - 1e-8)),
    path = copyRawPath(rawPath);

  if (start > end) {
    start = 1 - start;
    end = 1 - end;

    _reverseRawPath(path);

    path.totalLength = 0;
  }

  if (start < 0 || end < 0) {
    var offset = Math.abs(~~Math.min(start, end)) + 1;
    start += offset;
    end += offset;
  }

  path.totalLength || cacheRawPathMeasurements(path);
  var wrap = end > 1,
    s = getProgressData(path, start, _temp, true),
    e = getProgressData(path, end, _temp2),
    eSeg = e.segment,
    sSeg = s.segment,
    eSegIndex = e.segIndex,
    sSegIndex = s.segIndex,
    ei = e.i,
    si = s.i,
    sameSegment = sSegIndex === eSegIndex,
    sameBezier = ei === si && sameSegment,
    wrapsBehind,
    sShift,
    eShift,
    i,
    copy,
    totalSegments,
    l,
    j;

  if (wrap || loops) {
    wrapsBehind =
      eSegIndex < sSegIndex ||
      (sameSegment && ei < si) ||
      (sameBezier && e.t < s.t);

    if (_splitSegment(path, sSegIndex, si, s.t)) {
      sSegIndex++;

      if (!wrapsBehind) {
        eSegIndex++;

        if (sameBezier) {
          e.t = (e.t - s.t) / (1 - s.t);
          ei = 0;
        } else if (sameSegment) {
          ei -= si;
        }
      }
    }

    if (Math.abs(1 - (end - start)) < 1e-5) {
      eSegIndex = sSegIndex - 1;
    } else if (!e.t && eSegIndex) {
      eSegIndex--;
    } else if (_splitSegment(path, eSegIndex, ei, e.t) && wrapsBehind) {
      sSegIndex++;
    }

    if (s.t === 1) {
      sSegIndex = (sSegIndex + 1) % path.length;
    }

    copy = [];
    totalSegments = path.length;
    l = 1 + totalSegments * loops;
    j = sSegIndex;
    l += (totalSegments - sSegIndex + eSegIndex) % totalSegments;

    for (i = 0; i < l; i++) {
      _appendOrMerge(copy, path[j++ % totalSegments]);
    }

    path = copy;
  } else {
    eShift = e.t === 1 ? 6 : subdivideSegment(eSeg, ei, e.t);

    if (start !== end) {
      sShift = subdivideSegment(sSeg, si, sameBezier ? s.t / e.t : s.t);
      sameSegment && (eShift += sShift);
      eSeg.splice(ei + eShift + 2);
      (sShift || si) && sSeg.splice(0, si + sShift);
      i = path.length;

      while (i--) {
        //chop off any extra segments
        (i < sSegIndex || i > eSegIndex) && path.splice(i, 1);
      }
    } else {
      eSeg.angle = getRotationAtBezierT(eSeg, ei + eShift, 0); //record the value before we chop because it'll be impossible to determine the angle after its length is 0!

      ei += eShift;
      s = eSeg[ei];
      e = eSeg[ei + 1];
      eSeg.length = eSeg.totalLength = 0;
      eSeg.totalPoints = path.totalPoints = 8;
      eSeg.push(s, e, s, e, s, e, s, e);
    }
  }

  path.totalLength = 0;
  return path;
} //measures a Segment according to its resolution (so if segment.resolution is 6, for example, it'll take 6 samples equally across each Bezier) and create/populate a "samples" Array that has the length up to each of those sample points (always increasing from the start) as well as a "lookup" array that's broken up according to the smallest distance between 2 samples. This gives us a very fast way of looking up a progress position rather than looping through all the points/Beziers. You can optionally have it only measure a subset, starting at startIndex and going for a specific number of beziers (remember, there are 3 x/y pairs each, for a total of 6 elements for each Bezier). It will also populate a "totalLength" property, but that's not generally super accurate because by default it'll only take 6 samples per Bezier. But for performance reasons, it's perfectly adequate for measuring progress values along the path. If you need a more accurate totalLength, either increase the resolution or use the more advanced bezierToPoints() method which keeps adding points until they don't deviate by more than a certain precision value.

function measureSegment(segment, startIndex, bezierQty) {
  startIndex = startIndex || 0;

  if (!segment.samples) {
    segment.samples = [];
    segment.lookup = [];
  }

  var resolution = ~~segment.resolution || 12,
    inc = 1 / resolution,
    endIndex = bezierQty ? startIndex + bezierQty * 6 + 1 : segment.length,
    x1 = segment[startIndex],
    y1 = segment[startIndex + 1],
    samplesIndex = startIndex ? (startIndex / 6) * resolution : 0,
    samples = segment.samples,
    lookup = segment.lookup,
    min = (startIndex ? segment.minLength : _largeNum) || _largeNum,
    prevLength = samples[samplesIndex + bezierQty * resolution - 1],
    length = startIndex ? samples[samplesIndex - 1] : 0,
    i,
    j,
    x4,
    x3,
    x2,
    xd,
    xd1,
    y4,
    y3,
    y2,
    yd,
    yd1,
    inv,
    t,
    lengthIndex,
    l,
    segLength;
  samples.length = lookup.length = 0;

  for (j = startIndex + 2; j < endIndex; j += 6) {
    x4 = segment[j + 4] - x1;
    x3 = segment[j + 2] - x1;
    x2 = segment[j] - x1;
    y4 = segment[j + 5] - y1;
    y3 = segment[j + 3] - y1;
    y2 = segment[j + 1] - y1;
    xd = xd1 = yd = yd1 = 0;

    if (
      _abs$1(x4) < 0.01 &&
      _abs$1(y4) < 0.01 &&
      _abs$1(x2) + _abs$1(y2) < 0.01
    ) {
      //dump points that are sufficiently close (basically right on top of each other, making a bezier super tiny or 0 length)
      if (segment.length > 8) {
        segment.splice(j, 6);
        j -= 6;
        endIndex -= 6;
      }
    } else {
      for (i = 1; i <= resolution; i++) {
        t = inc * i;
        inv = 1 - t;
        xd = xd1 - (xd1 = (t * t * x4 + 3 * inv * (t * x3 + inv * x2)) * t);
        yd = yd1 - (yd1 = (t * t * y4 + 3 * inv * (t * y3 + inv * y2)) * t);
        l = _sqrt(yd * yd + xd * xd);

        if (l < min) {
          min = l;
        }

        length += l;
        samples[samplesIndex++] = length;
      }
    }

    x1 += x4;
    y1 += y4;
  }

  if (prevLength) {
    prevLength -= length;

    for (; samplesIndex < samples.length; samplesIndex++) {
      samples[samplesIndex] += prevLength;
    }
  }

  if (samples.length && min) {
    segment.totalLength = segLength = samples[samples.length - 1] || 0;
    segment.minLength = min;

    if (segLength / min < 9999) {
      // if the lookup would require too many values (memory problem), we skip this and instead we use a loop to lookup values directly in the samples Array
      l = lengthIndex = 0;

      for (i = 0; i < segLength; i += min) {
        lookup[l++] = samples[lengthIndex] < i ? ++lengthIndex : lengthIndex;
      }
    }
  } else {
    segment.totalLength = samples[0] = 0;
  }

  return startIndex ? length - samples[startIndex / 2 - 1] : length;
}

function cacheRawPathMeasurements(rawPath, resolution) {
  var pathLength, points, i;

  for (i = pathLength = points = 0; i < rawPath.length; i++) {
    rawPath[i].resolution = ~~resolution || 12; //steps per Bezier curve (anchor, 2 control points, to anchor)

    points += rawPath[i].length;
    pathLength += measureSegment(rawPath[i]);
  }

  rawPath.totalPoints = points;
  rawPath.totalLength = pathLength;
  return rawPath;
} //divide segment[i] at position t (value between 0 and 1, progress along that particular cubic bezier segment that starts at segment[i]). Returns how many elements were spliced into the segment array (either 0 or 6)

function subdivideSegment(segment, i, t) {
  if (t <= 0 || t >= 1) {
    return 0;
  }

  var ax = segment[i],
    ay = segment[i + 1],
    cp1x = segment[i + 2],
    cp1y = segment[i + 3],
    cp2x = segment[i + 4],
    cp2y = segment[i + 5],
    bx = segment[i + 6],
    by = segment[i + 7],
    x1a = ax + (cp1x - ax) * t,
    x2 = cp1x + (cp2x - cp1x) * t,
    y1a = ay + (cp1y - ay) * t,
    y2 = cp1y + (cp2y - cp1y) * t,
    x1 = x1a + (x2 - x1a) * t,
    y1 = y1a + (y2 - y1a) * t,
    x2a = cp2x + (bx - cp2x) * t,
    y2a = cp2y + (by - cp2y) * t;
  x2 += (x2a - x2) * t;
  y2 += (y2a - y2) * t;
  segment.splice(
    i + 2,
    4,
    _round$1(x1a), //first control point
    _round$1(y1a),
    _round$1(x1), //second control point
    _round$1(y1),
    _round$1(x1 + (x2 - x1) * t), //new fabricated anchor on line
    _round$1(y1 + (y2 - y1) * t),
    _round$1(x2), //third control point
    _round$1(y2),
    _round$1(x2a), //fourth control point
    _round$1(y2a)
  );
  segment.samples &&
    segment.samples.splice(
      ((i / 6) * segment.resolution) | 0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    );
  return 6;
} // returns an object {path, segment, segIndex, i, t}

function getProgressData(rawPath, progress, decoratee, pushToNextIfAtEnd) {
  decoratee = decoratee || {};
  rawPath.totalLength || cacheRawPathMeasurements(rawPath);

  if (progress < 0 || progress > 1) {
    progress = _wrapProgress(progress);
  }

  var segIndex = 0,
    segment = rawPath[0],
    samples,
    resolution,
    length,
    min,
    max,
    i,
    t;

  if (!progress) {
    t = i = segIndex = 0;
    segment = rawPath[0];
  } else if (progress === 1) {
    t = 1;
    segIndex = rawPath.length - 1;
    segment = rawPath[segIndex];
    i = segment.length - 8;
  } else {
    if (rawPath.length > 1) {
      //speed optimization: most of the time, there's only one segment so skip the recursion.
      length = rawPath.totalLength * progress;
      max = i = 0;

      while ((max += rawPath[i++].totalLength) < length) {
        segIndex = i;
      }

      segment = rawPath[segIndex];
      min = max - segment.totalLength;
      progress = (length - min) / (max - min) || 0;
    }

    samples = segment.samples;
    resolution = segment.resolution; //how many samples per cubic bezier chunk

    length = segment.totalLength * progress;
    i = segment.lookup.length
      ? segment.lookup[~~(length / segment.minLength)] || 0
      : _getSampleIndex(samples, length, progress);
    min = i ? samples[i - 1] : 0;
    max = samples[i];

    if (max < length) {
      min = max;
      max = samples[++i];
    }

    t = (1 / resolution) * ((length - min) / (max - min) + (i % resolution));
    i = ~~(i / resolution) * 6;

    if (pushToNextIfAtEnd && t === 1) {
      if (i + 6 < segment.length) {
        i += 6;
        t = 0;
      } else if (segIndex + 1 < rawPath.length) {
        i = t = 0;
        segment = rawPath[++segIndex];
      }
    }
  }

  decoratee.t = t;
  decoratee.i = i;
  decoratee.path = rawPath;
  decoratee.segment = segment;
  decoratee.segIndex = segIndex;
  return decoratee;
}

function getPositionOnPath(rawPath, progress, includeAngle, point) {
  var segment = rawPath[0],
    result = point || {},
    samples,
    resolution,
    length,
    min,
    max,
    i,
    t,
    a,
    inv;

  if (progress < 0 || progress > 1) {
    progress = _wrapProgress(progress);
  }

  segment.lookup || cacheRawPathMeasurements(rawPath);

  if (rawPath.length > 1) {
    //speed optimization: most of the time, there's only one segment so skip the recursion.
    length = rawPath.totalLength * progress;
    max = i = 0;

    while ((max += rawPath[i++].totalLength) < length) {
      segment = rawPath[i];
    }

    min = max - segment.totalLength;
    progress = (length - min) / (max - min) || 0;
  }

  samples = segment.samples;
  resolution = segment.resolution;
  length = segment.totalLength * progress;
  i = segment.lookup.length
    ? segment.lookup[
        progress < 1
          ? ~~(length / segment.minLength)
          : segment.lookup.length - 1
      ] || 0
    : _getSampleIndex(samples, length, progress);
  min = i ? samples[i - 1] : 0;
  max = samples[i];

  if (max < length) {
    min = max;
    max = samples[++i];
  }

  t = (1 / resolution) * ((length - min) / (max - min) + (i % resolution)) || 0;
  inv = 1 - t;
  i = ~~(i / resolution) * 6;
  a = segment[i];
  result.x = _round$1(
    (t * t * (segment[i + 6] - a) +
      3 * inv * (t * (segment[i + 4] - a) + inv * (segment[i + 2] - a))) *
      t +
      a
  );
  result.y = _round$1(
    (t * t * (segment[i + 7] - (a = segment[i + 1])) +
      3 * inv * (t * (segment[i + 5] - a) + inv * (segment[i + 3] - a))) *
      t +
      a
  );

  if (includeAngle) {
    result.angle = segment.totalLength
      ? getRotationAtBezierT(segment, i, t >= 1 ? 1 - 1e-9 : t ? t : 1e-9)
      : segment.angle || 0;
  }

  return result;
} //applies a matrix transform to RawPath (or a segment in a RawPath) and returns whatever was passed in (it transforms the values in the array(s), not a copy).

function transformRawPath(rawPath, a, b, c, d, tx, ty) {
  var j = rawPath.length,
    segment,
    l,
    i,
    x,
    y;

  while (--j > -1) {
    segment = rawPath[j];
    l = segment.length;

    for (i = 0; i < l; i += 2) {
      x = segment[i];
      y = segment[i + 1];
      segment[i] = x * a + y * c + tx;
      segment[i + 1] = x * b + y * d + ty;
    }
  }

  rawPath._dirty = 1;
  return rawPath;
} // translates SVG arc data into a segment (cubic beziers). Angle is in degrees.

function arcToSegment(
  lastX,
  lastY,
  rx,
  ry,
  angle,
  largeArcFlag,
  sweepFlag,
  x,
  y
) {
  if (lastX === x && lastY === y) {
    return;
  }

  rx = _abs$1(rx);
  ry = _abs$1(ry);

  var angleRad = (angle % 360) * _DEG2RAD$1,
    cosAngle = _cos(angleRad),
    sinAngle = _sin(angleRad),
    PI = Math.PI,
    TWOPI = PI * 2,
    dx2 = (lastX - x) / 2,
    dy2 = (lastY - y) / 2,
    x1 = cosAngle * dx2 + sinAngle * dy2,
    y1 = -sinAngle * dx2 + cosAngle * dy2,
    x1_sq = x1 * x1,
    y1_sq = y1 * y1,
    radiiCheck = x1_sq / (rx * rx) + y1_sq / (ry * ry);

  if (radiiCheck > 1) {
    rx = _sqrt(radiiCheck) * rx;
    ry = _sqrt(radiiCheck) * ry;
  }

  var rx_sq = rx * rx,
    ry_sq = ry * ry,
    sq =
      (rx_sq * ry_sq - rx_sq * y1_sq - ry_sq * x1_sq) /
      (rx_sq * y1_sq + ry_sq * x1_sq);

  if (sq < 0) {
    sq = 0;
  }

  var coef = (largeArcFlag === sweepFlag ? -1 : 1) * _sqrt(sq),
    cx1 = coef * ((rx * y1) / ry),
    cy1 = coef * -((ry * x1) / rx),
    sx2 = (lastX + x) / 2,
    sy2 = (lastY + y) / 2,
    cx = sx2 + (cosAngle * cx1 - sinAngle * cy1),
    cy = sy2 + (sinAngle * cx1 + cosAngle * cy1),
    ux = (x1 - cx1) / rx,
    uy = (y1 - cy1) / ry,
    vx = (-x1 - cx1) / rx,
    vy = (-y1 - cy1) / ry,
    temp = ux * ux + uy * uy,
    angleStart = (uy < 0 ? -1 : 1) * Math.acos(ux / _sqrt(temp)),
    angleExtent =
      (ux * vy - uy * vx < 0 ? -1 : 1) *
      Math.acos((ux * vx + uy * vy) / _sqrt(temp * (vx * vx + vy * vy)));

  isNaN(angleExtent) && (angleExtent = PI); //rare edge case. Math.cos(-1) is NaN.

  if (!sweepFlag && angleExtent > 0) {
    angleExtent -= TWOPI;
  } else if (sweepFlag && angleExtent < 0) {
    angleExtent += TWOPI;
  }

  angleStart %= TWOPI;
  angleExtent %= TWOPI;

  var segments = Math.ceil(_abs$1(angleExtent) / (TWOPI / 4)),
    rawPath = [],
    angleIncrement = angleExtent / segments,
    controlLength =
      ((4 / 3) * _sin(angleIncrement / 2)) / (1 + _cos(angleIncrement / 2)),
    ma = cosAngle * rx,
    mb = sinAngle * rx,
    mc = sinAngle * -ry,
    md = cosAngle * ry,
    i;

  for (i = 0; i < segments; i++) {
    angle = angleStart + i * angleIncrement;
    x1 = _cos(angle);
    y1 = _sin(angle);
    ux = _cos((angle += angleIncrement));
    uy = _sin(angle);
    rawPath.push(
      x1 - controlLength * y1,
      y1 + controlLength * x1,
      ux + controlLength * uy,
      uy - controlLength * ux,
      ux,
      uy
    );
  } //now transform according to the actual size of the ellipse/arc (the beziers were noramlized, between 0 and 1 on a circle).

  for (i = 0; i < rawPath.length; i += 2) {
    x1 = rawPath[i];
    y1 = rawPath[i + 1];
    rawPath[i] = x1 * ma + y1 * mc + cx;
    rawPath[i + 1] = x1 * mb + y1 * md + cy;
  }

  rawPath[i - 2] = x; //always set the end to exactly where it's supposed to be

  rawPath[i - 1] = y;
  return rawPath;
} //Spits back a RawPath with absolute coordinates. Each segment starts with a "moveTo" command (x coordinate, then y) and then 2 control points (x, y, x, y), then anchor. The goal is to minimize memory and maximize speed.

function stringToRawPath(d) {
  var a =
      (d + "")
        .replace(_scientific, function (m) {
          var n = +m;
          return n < 0.0001 && n > -0.0001 ? 0 : n;
        })
        .match(_svgPathExp) || [],
    //some authoring programs spit out very small numbers in scientific notation like "1e-5", so make sure we round that down to 0 first.
    path = [],
    relativeX = 0,
    relativeY = 0,
    twoThirds = 2 / 3,
    elements = a.length,
    points = 0,
    errorMessage = "ERROR: malformed path: " + d,
    i,
    j,
    x,
    y,
    command,
    isRelative,
    segment,
    startX,
    startY,
    difX,
    difY,
    beziers,
    prevCommand,
    flag1,
    flag2,
    line = function line(sx, sy, ex, ey) {
      difX = (ex - sx) / 3;
      difY = (ey - sy) / 3;
      segment.push(sx + difX, sy + difY, ex - difX, ey - difY, ex, ey);
    };

  if (!d || !isNaN(a[0]) || isNaN(a[1])) {
    console.log(errorMessage);
    return path;
  }

  for (i = 0; i < elements; i++) {
    prevCommand = command;

    if (isNaN(a[i])) {
      command = a[i].toUpperCase();
      isRelative = command !== a[i]; //lower case means relative
    } else {
      //commands like "C" can be strung together without any new command characters between.
      i--;
    }

    x = +a[i + 1];
    y = +a[i + 2];

    if (isRelative) {
      x += relativeX;
      y += relativeY;
    }

    if (!i) {
      startX = x;
      startY = y;
    } // "M" (move)

    if (command === "M") {
      if (segment) {
        if (segment.length < 8) {
          //if the path data was funky and just had a M with no actual drawing anywhere, skip it.
          path.length -= 1;
        } else {
          points += segment.length;
        }
      }

      relativeX = startX = x;
      relativeY = startY = y;
      segment = [x, y];
      path.push(segment);
      i += 2;
      command = "L"; //an "M" with more than 2 values gets interpreted as "lineTo" commands ("L").
      // "C" (cubic bezier)
    } else if (command === "C") {
      if (!segment) {
        segment = [0, 0];
      }

      if (!isRelative) {
        relativeX = relativeY = 0;
      } //note: "*1" is just a fast/short way to cast the value as a Number. WAAAY faster in Chrome, slightly slower in Firefox.

      segment.push(
        x,
        y,
        relativeX + a[i + 3] * 1,
        relativeY + a[i + 4] * 1,
        (relativeX += a[i + 5] * 1),
        (relativeY += a[i + 6] * 1)
      );
      i += 6; // "S" (continuation of cubic bezier)
    } else if (command === "S") {
      difX = relativeX;
      difY = relativeY;

      if (prevCommand === "C" || prevCommand === "S") {
        difX += relativeX - segment[segment.length - 4];
        difY += relativeY - segment[segment.length - 3];
      }

      if (!isRelative) {
        relativeX = relativeY = 0;
      }

      segment.push(
        difX,
        difY,
        x,
        y,
        (relativeX += a[i + 3] * 1),
        (relativeY += a[i + 4] * 1)
      );
      i += 4; // "Q" (quadratic bezier)
    } else if (command === "Q") {
      difX = relativeX + (x - relativeX) * twoThirds;
      difY = relativeY + (y - relativeY) * twoThirds;

      if (!isRelative) {
        relativeX = relativeY = 0;
      }

      relativeX += a[i + 3] * 1;
      relativeY += a[i + 4] * 1;
      segment.push(
        difX,
        difY,
        relativeX + (x - relativeX) * twoThirds,
        relativeY + (y - relativeY) * twoThirds,
        relativeX,
        relativeY
      );
      i += 4; // "T" (continuation of quadratic bezier)
    } else if (command === "T") {
      difX = relativeX - segment[segment.length - 4];
      difY = relativeY - segment[segment.length - 3];
      segment.push(
        relativeX + difX,
        relativeY + difY,
        x + (relativeX + difX * 1.5 - x) * twoThirds,
        y + (relativeY + difY * 1.5 - y) * twoThirds,
        (relativeX = x),
        (relativeY = y)
      );
      i += 2; // "H" (horizontal line)
    } else if (command === "H") {
      line(relativeX, relativeY, (relativeX = x), relativeY);
      i += 1; // "V" (vertical line)
    } else if (command === "V") {
      //adjust values because the first (and only one) isn't x in this case, it's y.
      line(
        relativeX,
        relativeY,
        relativeX,
        (relativeY = x + (isRelative ? relativeY - relativeX : 0))
      );
      i += 1; // "L" (line) or "Z" (close)
    } else if (command === "L" || command === "Z") {
      if (command === "Z") {
        x = startX;
        y = startY;
        segment.closed = true;
      }

      if (
        command === "L" ||
        _abs$1(relativeX - x) > 0.5 ||
        _abs$1(relativeY - y) > 0.5
      ) {
        line(relativeX, relativeY, x, y);

        if (command === "L") {
          i += 2;
        }
      }

      relativeX = x;
      relativeY = y; // "A" (arc)
    } else if (command === "A") {
      flag1 = a[i + 4];
      flag2 = a[i + 5];
      difX = a[i + 6];
      difY = a[i + 7];
      j = 7;

      if (flag1.length > 1) {
        // for cases when the flags are merged, like "a8 8 0 018 8" (the 0 and 1 flags are WITH the x value of 8, but it could also be "a8 8 0 01-8 8" so it may include x or not)
        if (flag1.length < 3) {
          difY = difX;
          difX = flag2;
          j--;
        } else {
          difY = flag2;
          difX = flag1.substr(2);
          j -= 2;
        }

        flag2 = flag1.charAt(1);
        flag1 = flag1.charAt(0);
      }

      beziers = arcToSegment(
        relativeX,
        relativeY,
        +a[i + 1],
        +a[i + 2],
        +a[i + 3],
        +flag1,
        +flag2,
        (isRelative ? relativeX : 0) + difX * 1,
        (isRelative ? relativeY : 0) + difY * 1
      );
      i += j;

      if (beziers) {
        for (j = 0; j < beziers.length; j++) {
          segment.push(beziers[j]);
        }
      }

      relativeX = segment[segment.length - 2];
      relativeY = segment[segment.length - 1];
    } else {
      console.log(errorMessage);
    }
  }

  i = segment.length;

  if (i < 6) {
    //in case there's odd SVG like a M0,0 command at the very end.
    path.pop();
    i = 0;
  } else if (segment[0] === segment[i - 2] && segment[1] === segment[i - 1]) {
    segment.closed = true;
  }

  path.totalPoints = points + i;
  return path;
} //populates the points array in alternating x/y values (like [x, y, x, y...] instead of individual point objects [{x, y}, {x, y}...] to conserve memory and stay in line with how we're handling segment arrays
/*
function getAngleBetweenPoints(x0, y0, x1, y1, x2, y2) { //angle between 3 points in radians
	var dx1 = x1 - x0,
		dy1 = y1 - y0,
		dx2 = x2 - x1,
		dy2 = y2 - y1,
		dx3 = x2 - x0,
		dy3 = y2 - y0,
		a = dx1 * dx1 + dy1 * dy1,
		b = dx2 * dx2 + dy2 * dy2,
		c = dx3 * dx3 + dy3 * dy3;
	return Math.acos( (a + b - c) / _sqrt(4 * a * b) );
},
*/
//pointsToSegment() doesn't handle flat coordinates (where y is always 0) the way we need (the resulting control points are always right on top of the anchors), so this function basically makes the control points go directly up and down, varying in length based on the curviness (more curvy, further control points)

function flatPointsToSegment(points, curviness) {
  if (curviness === void 0) {
    curviness = 1;
  }

  var x = points[0],
    y = 0,
    segment = [x, y],
    i = 2;

  for (; i < points.length; i += 2) {
    segment.push(
      x,
      y,
      points[i],
      (y = ((points[i] - x) * curviness) / 2),
      (x = points[i]),
      -y
    );
  }

  return segment;
} //points is an array of x/y points, like [x, y, x, y, x, y]

function pointsToSegment(points, curviness) {
  //points = simplifyPoints(points, tolerance);
  _abs$1(points[0] - points[2]) < 1e-4 &&
    _abs$1(points[1] - points[3]) < 1e-4 &&
    (points = points.slice(2)); // if the first two points are super close, dump the first one.

  var l = points.length - 2,
    x = +points[0],
    y = +points[1],
    nextX = +points[2],
    nextY = +points[3],
    segment = [x, y, x, y],
    dx2 = nextX - x,
    dy2 = nextY - y,
    closed =
      Math.abs(points[l] - x) < 0.001 && Math.abs(points[l + 1] - y) < 0.001,
    prevX,
    prevY,
    i,
    dx1,
    dy1,
    r1,
    r2,
    r3,
    tl,
    mx1,
    mx2,
    mxm,
    my1,
    my2,
    mym;

  if (closed) {
    // if the start and end points are basically on top of each other, close the segment by adding the 2nd point to the end, and the 2nd-to-last point to the beginning (we'll remove them at the end, but this allows the curvature to look perfect)
    points.push(nextX, nextY);
    nextX = x;
    nextY = y;
    x = points[l - 2];
    y = points[l - 1];
    points.unshift(x, y);
    l += 4;
  }

  curviness = curviness || curviness === 0 ? +curviness : 1;

  for (i = 2; i < l; i += 2) {
    prevX = x;
    prevY = y;
    x = nextX;
    y = nextY;
    nextX = +points[i + 2];
    nextY = +points[i + 3];

    if (x === nextX && y === nextY) {
      continue;
    }

    dx1 = dx2;
    dy1 = dy2;
    dx2 = nextX - x;
    dy2 = nextY - y;
    r1 = _sqrt(dx1 * dx1 + dy1 * dy1); // r1, r2, and r3 correlate x and y (and z in the future). Basically 2D or 3D hypotenuse

    r2 = _sqrt(dx2 * dx2 + dy2 * dy2);
    r3 = _sqrt(
      Math.pow(dx2 / r2 + dx1 / r1, 2) + Math.pow(dy2 / r2 + dy1 / r1, 2)
    );
    tl = ((r1 + r2) * curviness * 0.25) / r3;
    mx1 = x - (x - prevX) * (r1 ? tl / r1 : 0);
    mx2 = x + (nextX - x) * (r2 ? tl / r2 : 0);
    mxm = x - (mx1 + (((mx2 - mx1) * ((r1 * 3) / (r1 + r2) + 0.5)) / 4 || 0));
    my1 = y - (y - prevY) * (r1 ? tl / r1 : 0);
    my2 = y + (nextY - y) * (r2 ? tl / r2 : 0);
    mym = y - (my1 + (((my2 - my1) * ((r1 * 3) / (r1 + r2) + 0.5)) / 4 || 0));

    if (x !== prevX || y !== prevY) {
      segment.push(
        _round$1(mx1 + mxm), // first control point
        _round$1(my1 + mym),
        _round$1(x), // anchor
        _round$1(y),
        _round$1(mx2 + mxm), // second control point
        _round$1(my2 + mym)
      );
    }
  }

  x !== nextX || y !== nextY || segment.length < 4
    ? segment.push(
        _round$1(nextX),
        _round$1(nextY),
        _round$1(nextX),
        _round$1(nextY)
      )
    : (segment.length -= 2);

  if (segment.length === 2) {
    // only one point!
    segment.push(x, y, x, y, x, y);
  } else if (closed) {
    segment.splice(0, 6);
    segment.length = segment.length - 6;
  }

  return segment;
} //returns the squared distance between an x/y coordinate and a segment between x1/y1 and x2/y2
/*
Takes any of the following and converts it to an all Cubic Bezier SVG data string:
- A <path> data string like "M0,0 L2,4 v20,15 H100"
- A RawPath, like [[x, y, x, y, x, y, x, y][[x, y, x, y, x, y, x, y]]
- A Segment, like [x, y, x, y, x, y, x, y]

Note: all numbers are rounded down to the closest 0.001 to minimize memory, maximize speed, and avoid odd numbers like 1e-13
*/

function rawPathToString(rawPath) {
  if (_isNumber$1(rawPath[0])) {
    //in case a segment is passed in instead
    rawPath = [rawPath];
  }

  var result = "",
    l = rawPath.length,
    sl,
    s,
    i,
    segment;

  for (s = 0; s < l; s++) {
    segment = rawPath[s];
    result += "M" + _round$1(segment[0]) + "," + _round$1(segment[1]) + " C";
    sl = segment.length;

    for (i = 2; i < sl; i++) {
      result +=
        _round$1(segment[i++]) +
        "," +
        _round$1(segment[i++]) +
        " " +
        _round$1(segment[i++]) +
        "," +
        _round$1(segment[i++]) +
        " " +
        _round$1(segment[i++]) +
        "," +
        _round$1(segment[i]) +
        " ";
    }

    if (segment.closed) {
      result += "z";
    }
  }

  return result;
}
/*
// takes a segment with coordinates [x, y, x, y, ...] and converts the control points into angles and lengths [x, y, angle, length, angle, length, x, y, angle, length, ...] so that it animates more cleanly and avoids odd breaks/kinks. For example, if you animate from 1 o'clock to 6 o'clock, it'd just go directly/linearly rather than around. So the length would be very short in the middle of the tween.
export function cpCoordsToAngles(segment, copy) {
	var result = copy ? segment.slice(0) : segment,
		x, y, i;
	for (i = 0; i < segment.length; i+=6) {
		x = segment[i+2] - segment[i];
		y = segment[i+3] - segment[i+1];
		result[i+2] = Math.atan2(y, x);
		result[i+3] = Math.sqrt(x * x + y * y);
		x = segment[i+6] - segment[i+4];
		y = segment[i+7] - segment[i+5];
		result[i+4] = Math.atan2(y, x);
		result[i+5] = Math.sqrt(x * x + y * y);
	}
	return result;
}

// takes a segment that was converted with cpCoordsToAngles() to have angles and lengths instead of coordinates for the control points, and converts it BACK into coordinates.
export function cpAnglesToCoords(segment, copy) {
	var result = copy ? segment.slice(0) : segment,
		length = segment.length,
		rnd = 1000,
		angle, l, i, j;
	for (i = 0; i < length; i+=6) {
		angle = segment[i+2];
		l = segment[i+3]; //length
		result[i+2] = (((segment[i] + Math.cos(angle) * l) * rnd) | 0) / rnd;
		result[i+3] = (((segment[i+1] + Math.sin(angle) * l) * rnd) | 0) / rnd;
		angle = segment[i+4];
		l = segment[i+5]; //length
		result[i+4] = (((segment[i+6] - Math.cos(angle) * l) * rnd) | 0) / rnd;
		result[i+5] = (((segment[i+7] - Math.sin(angle) * l) * rnd) | 0) / rnd;
	}
	return result;
}

//adds an "isSmooth" array to each segment and populates it with a boolean value indicating whether or not it's smooth (the control points have basically the same slope). For any smooth control points, it converts the coordinates into angle (x, in radians) and length (y) and puts them into the same index value in a smoothData array.
export function populateSmoothData(rawPath) {
	let j = rawPath.length,
		smooth, segment, x, y, x2, y2, i, l, a, a2, isSmooth, smoothData;
	while (--j > -1) {
		segment = rawPath[j];
		isSmooth = segment.isSmooth = segment.isSmooth || [0, 0, 0, 0];
		smoothData = segment.smoothData = segment.smoothData || [0, 0, 0, 0];
		isSmooth.length = 4;
		l = segment.length - 2;
		for (i = 6; i < l; i += 6) {
			x = segment[i] - segment[i - 2];
			y = segment[i + 1] - segment[i - 1];
			x2 = segment[i + 2] - segment[i];
			y2 = segment[i + 3] - segment[i + 1];
			a = _atan2(y, x);
			a2 = _atan2(y2, x2);
			smooth = (Math.abs(a - a2) < 0.09);
			if (smooth) {
				smoothData[i - 2] = a;
				smoothData[i + 2] = a2;
				smoothData[i - 1] = _sqrt(x * x + y * y);
				smoothData[i + 3] = _sqrt(x2 * x2 + y2 * y2);
			}
			isSmooth.push(smooth, smooth, 0, 0, smooth, smooth);
		}
		//if the first and last points are identical, check to see if there's a smooth transition. We must handle this a bit differently due to their positions in the array.
		if (segment[l] === segment[0] && segment[l+1] === segment[1]) {
			x = segment[0] - segment[l-2];
			y = segment[1] - segment[l-1];
			x2 = segment[2] - segment[0];
			y2 = segment[3] - segment[1];
			a = _atan2(y, x);
			a2 = _atan2(y2, x2);
			if (Math.abs(a - a2) < 0.09) {
				smoothData[l-2] = a;
				smoothData[2] = a2;
				smoothData[l-1] = _sqrt(x * x + y * y);
				smoothData[3] = _sqrt(x2 * x2 + y2 * y2);
				isSmooth[l-2] = isSmooth[l-1] = true; //don't change indexes 2 and 3 because we'll trigger everything from the END, and this will optimize file size a bit.
			}
		}
	}
	return rawPath;
}
export function pointToScreen(svgElement, point) {
	if (arguments.length < 2) { //by default, take the first set of coordinates in the path as the point
		let rawPath = getRawPath(svgElement);
		point = svgElement.ownerSVGElement.createSVGPoint();
		point.x = rawPath[0][0];
		point.y = rawPath[0][1];
	}
	return point.matrixTransform(svgElement.getScreenCTM());
}
// takes a <path> and normalizes all of its coordinates to values between 0 and 1
export function normalizePath(path) {
  path = gsap.utils.toArray(path);
  if (!path[0].hasAttribute("d")) {
    path = gsap.utils.toArray(path[0].children);
  }
  if (path.length > 1) {
    path.forEach(normalizePath);
    return path;
  }
  let _svgPathExp = /[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
      _scientific = /[\+\-]?\d*\.?\d+e[\+\-]?\d+/ig,
      d = path[0].getAttribute("d"),
      a = d.replace(_scientific, m => { let n = +m; return (n < 0.0001 && n > -0.0001) ? 0 : n; }).match(_svgPathExp),
      nums = a.filter(n => !isNaN(n)).map(n => +n),
      normalize = gsap.utils.normalize(Math.min(...nums), Math.max(...nums)),
      finals = a.map(val => isNaN(val) ? val : normalize(+val)),
      s = "",
      prevWasCommand;
  finals.forEach((value, i) => {
    let isCommand = isNaN(value)
    s += (isCommand && i ? " " : prevWasCommand || !i ? "" : ",") + value;
    prevWasCommand = isCommand;
  });
  path[0].setAttribute("d", s);
}
*/

/*!
 * matrix 3.13.0
 * https://gsap.com
 *
 * Copyright 2008-2025, GreenSock. All rights reserved.
 * Subject to the terms at https://gsap.com/standard-license
 * @author: Jack Doyle, jack@greensock.com
 */

/* eslint-disable */
var _doc$2,
  _win$2,
  _docElement,
  _body$2,
  _divContainer,
  _svgContainer,
  _identityMatrix,
  _gEl,
  _transformProp$1 = "transform",
  _transformOriginProp = _transformProp$1 + "Origin",
  _hasOffsetBug,
  _setDoc = function _setDoc(element) {
    var doc = element.ownerDocument || element;

    if (
      !(_transformProp$1 in element.style) &&
      "msTransform" in element.style
    ) {
      //to improve compatibility with old Microsoft browsers
      _transformProp$1 = "msTransform";
      _transformOriginProp = _transformProp$1 + "Origin";
    }

    while (doc.parentNode && (doc = doc.parentNode)) {}

    _win$2 = window;
    _identityMatrix = new Matrix2D();

    if (doc) {
      _doc$2 = doc;
      _docElement = doc.documentElement;
      _body$2 = doc.body;
      _gEl = _doc$2.createElementNS("http://www.w3.org/2000/svg", "g"); // prevent any existing CSS from transforming it

      _gEl.style.transform = "none"; // now test for the offset reporting bug. Use feature detection instead of browser sniffing to make things more bulletproof and future-proof. Hopefully Safari will fix their bug soon.

      var d1 = doc.createElement("div"),
        d2 = doc.createElement("div"),
        root = doc && (doc.body || doc.firstElementChild);

      if (root && root.appendChild) {
        root.appendChild(d1);
        d1.appendChild(d2);
        d1.setAttribute(
          "style",
          "position:static;transform:translate3d(0,0,1px)"
        );
        _hasOffsetBug = d2.offsetParent !== d1;
        root.removeChild(d1);
      }
    }

    return doc;
  },
  _forceNonZeroScale = function _forceNonZeroScale(e) {
    // walks up the element's ancestors and finds any that had their scale set to 0 via GSAP, and changes them to 0.0001 to ensure that measurements work. Firefox has a bug that causes it to incorrectly report getBoundingClientRect() when scale is 0.
    var a, cache;

    while (e && e !== _body$2) {
      cache = e._gsap;
      cache && cache.uncache && cache.get(e, "x"); // force re-parsing of transforms if necessary

      if (cache && !cache.scaleX && !cache.scaleY && cache.renderTransform) {
        cache.scaleX = cache.scaleY = 1e-4;
        cache.renderTransform(1, cache);
        a ? a.push(cache) : (a = [cache]);
      }

      e = e.parentNode;
    }

    return a;
  },
  // possible future addition: pass an element to _forceDisplay() and it'll walk up all its ancestors and make sure anything with display: none is set to display: block, and if there's no parentNode, it'll add it to the body. It returns an Array that you can then feed to _revertDisplay() to have it revert all the changes it made.
  // _forceDisplay = e => {
  // 	let a = [],
  // 		parent;
  // 	while (e && e !== _body) {
  // 		parent = e.parentNode;
  // 		(_win.getComputedStyle(e).display === "none" || !parent) && a.push(e, e.style.display, parent) && (e.style.display = "block");
  // 		parent || _body.appendChild(e);
  // 		e = parent;
  // 	}
  // 	return a;
  // },
  // _revertDisplay = a => {
  // 	for (let i = 0; i < a.length; i+=3) {
  // 		a[i+1] ? (a[i].style.display = a[i+1]) : a[i].style.removeProperty("display");
  // 		a[i+2] || a[i].parentNode.removeChild(a[i]);
  // 	}
  // },
  _svgTemps = [],
  //we create 3 elements for SVG, and 3 for other DOM elements and cache them for performance reasons. They get nested in _divContainer and _svgContainer so that just one element is added to the DOM on each successive attempt. Again, performance is key.
  _divTemps = [],
  _getDocScrollTop = function _getDocScrollTop() {
    return (
      _win$2.pageYOffset ||
      _doc$2.scrollTop ||
      _docElement.scrollTop ||
      _body$2.scrollTop ||
      0
    );
  },
  _getDocScrollLeft = function _getDocScrollLeft() {
    return (
      _win$2.pageXOffset ||
      _doc$2.scrollLeft ||
      _docElement.scrollLeft ||
      _body$2.scrollLeft ||
      0
    );
  },
  _svgOwner = function _svgOwner(element) {
    return (
      element.ownerSVGElement ||
      ((element.tagName + "").toLowerCase() === "svg" ? element : null)
    );
  },
  _isFixed = function _isFixed(element) {
    if (_win$2.getComputedStyle(element).position === "fixed") {
      return true;
    }

    element = element.parentNode;

    if (element && element.nodeType === 1) {
      // avoid document fragments which will throw an error.
      return _isFixed(element);
    }
  },
  _createSibling = function _createSibling(element, i) {
    if (element.parentNode && (_doc$2 || _setDoc(element))) {
      var svg = _svgOwner(element),
        ns = svg
          ? svg.getAttribute("xmlns") || "http://www.w3.org/2000/svg"
          : "http://www.w3.org/1999/xhtml",
        type = svg ? (i ? "rect" : "g") : "div",
        x = i !== 2 ? 0 : 100,
        y = i === 3 ? 100 : 0,
        css =
          "position:absolute;display:block;pointer-events:none;margin:0;padding:0;",
        e = _doc$2.createElementNS
          ? _doc$2.createElementNS(ns.replace(/^https/, "http"), type)
          : _doc$2.createElement(type);

      if (i) {
        if (!svg) {
          if (!_divContainer) {
            _divContainer = _createSibling(element);
            _divContainer.style.cssText = css;
          }

          e.style.cssText =
            css + "width:0.1px;height:0.1px;top:" + y + "px;left:" + x + "px";

          _divContainer.appendChild(e);
        } else {
          _svgContainer || (_svgContainer = _createSibling(element));
          e.setAttribute("width", 0.01);
          e.setAttribute("height", 0.01);
          e.setAttribute("transform", "translate(" + x + "," + y + ")");

          _svgContainer.appendChild(e);
        }
      }

      return e;
    }

    throw "Need document and parent.";
  },
  _consolidate = function _consolidate(m) {
    // replaces SVGTransformList.consolidate() because a bug in Firefox causes it to break pointer events. See https://gsap.com/forums/topic/23248-touch-is-not-working-on-draggable-in-firefox-windows-v324/?tab=comments#comment-109800
    var c = new Matrix2D(),
      i = 0;

    for (; i < m.numberOfItems; i++) {
      c.multiply(m.getItem(i).matrix);
    }

    return c;
  },
  _getCTM = function _getCTM(svg) {
    var m = svg.getCTM(),
      transform;

    if (!m) {
      // Firefox returns null for getCTM() on root <svg> elements, so this is a workaround using a <g> that we temporarily append.
      transform = svg.style[_transformProp$1];
      svg.style[_transformProp$1] = "none"; // a bug in Firefox causes css transforms to contaminate the getCTM()

      svg.appendChild(_gEl);
      m = _gEl.getCTM();
      svg.removeChild(_gEl);
      transform
        ? (svg.style[_transformProp$1] = transform)
        : svg.style.removeProperty(
            _transformProp$1.replace(/([A-Z])/g, "-$1").toLowerCase()
          );
    }

    return m || _identityMatrix.clone(); // Firefox will still return null if the <svg> has a width/height of 0 in the browser.
  },
  _placeSiblings = function _placeSiblings(element, adjustGOffset) {
    var svg = _svgOwner(element),
      isRootSVG = element === svg,
      siblings = svg ? _svgTemps : _divTemps,
      parent = element.parentNode,
      appendToEl =
        parent && !svg && parent.shadowRoot && parent.shadowRoot.appendChild
          ? parent.shadowRoot
          : parent,
      container,
      m,
      b,
      x,
      y,
      cs;

    if (element === _win$2) {
      return element;
    }

    siblings.length ||
      siblings.push(
        _createSibling(element, 1),
        _createSibling(element, 2),
        _createSibling(element, 3)
      );
    container = svg ? _svgContainer : _divContainer;

    if (svg) {
      if (isRootSVG) {
        b = _getCTM(element);
        x = -b.e / b.a;
        y = -b.f / b.d;
        m = _identityMatrix;
      } else if (element.getBBox) {
        b = element.getBBox();
        m = element.transform ? element.transform.baseVal : {}; // IE11 doesn't follow the spec.

        m = !m.numberOfItems
          ? _identityMatrix
          : m.numberOfItems > 1
          ? _consolidate(m)
          : m.getItem(0).matrix; // don't call m.consolidate().matrix because a bug in Firefox makes pointer events not work when consolidate() is called on the same tick as getBoundingClientRect()! See https://gsap.com/forums/topic/23248-touch-is-not-working-on-draggable-in-firefox-windows-v324/?tab=comments#comment-109800

        x = m.a * b.x + m.c * b.y;
        y = m.b * b.x + m.d * b.y;
      } else {
        // may be a <mask> which has no getBBox() so just use defaults instead of throwing errors.
        m = new Matrix2D();
        x = y = 0;
      }

      if (adjustGOffset && element.tagName.toLowerCase() === "g") {
        x = y = 0;
      }

      (isRootSVG ? svg : parent).appendChild(container);
      container.setAttribute(
        "transform",
        "matrix(" +
          m.a +
          "," +
          m.b +
          "," +
          m.c +
          "," +
          m.d +
          "," +
          (m.e + x) +
          "," +
          (m.f + y) +
          ")"
      );
    } else {
      x = y = 0;

      if (_hasOffsetBug) {
        // some browsers (like Safari) have a bug that causes them to misreport offset values. When an ancestor element has a transform applied, it's supposed to treat it as if it's position: relative (new context). Safari botches this, so we need to find the closest ancestor (between the element and its offsetParent) that has a transform applied and if one is found, grab its offsetTop/Left and subtract them to compensate.
        m = element.offsetParent;
        b = element;

        while (b && (b = b.parentNode) && b !== m && b.parentNode) {
          if ((_win$2.getComputedStyle(b)[_transformProp$1] + "").length > 4) {
            x = b.offsetLeft;
            y = b.offsetTop;
            b = 0;
          }
        }
      }

      cs = _win$2.getComputedStyle(element);

      if (cs.position !== "absolute" && cs.position !== "fixed") {
        m = element.offsetParent;

        while (parent && parent !== m) {
          // if there's an ancestor element between the element and its offsetParent that's scrolled, we must factor that in.
          x += parent.scrollLeft || 0;
          y += parent.scrollTop || 0;
          parent = parent.parentNode;
        }
      }

      b = container.style;
      b.top = element.offsetTop - y + "px";
      b.left = element.offsetLeft - x + "px";
      b[_transformProp$1] = cs[_transformProp$1];
      b[_transformOriginProp] = cs[_transformOriginProp]; // b.border = m.border;
      // b.borderLeftStyle = m.borderLeftStyle;
      // b.borderTopStyle = m.borderTopStyle;
      // b.borderLeftWidth = m.borderLeftWidth;
      // b.borderTopWidth = m.borderTopWidth;

      b.position = cs.position === "fixed" ? "fixed" : "absolute";
      appendToEl.appendChild(container);
    }

    return container;
  },
  _setMatrix = function _setMatrix(m, a, b, c, d, e, f) {
    m.a = a;
    m.b = b;
    m.c = c;
    m.d = d;
    m.e = e;
    m.f = f;
    return m;
  };

var Matrix2D = /*#__PURE__*/ (function () {
  function Matrix2D(a, b, c, d, e, f) {
    if (a === void 0) {
      a = 1;
    }

    if (b === void 0) {
      b = 0;
    }

    if (c === void 0) {
      c = 0;
    }

    if (d === void 0) {
      d = 1;
    }

    if (e === void 0) {
      e = 0;
    }

    if (f === void 0) {
      f = 0;
    }

    _setMatrix(this, a, b, c, d, e, f);
  }

  var _proto = Matrix2D.prototype;

  _proto.inverse = function inverse() {
    var a = this.a,
      b = this.b,
      c = this.c,
      d = this.d,
      e = this.e,
      f = this.f,
      determinant = a * d - b * c || 1e-10;
    return _setMatrix(
      this,
      d / determinant,
      -b / determinant,
      -c / determinant,
      a / determinant,
      (c * f - d * e) / determinant,
      -(a * f - b * e) / determinant
    );
  };

  _proto.multiply = function multiply(matrix) {
    var a = this.a,
      b = this.b,
      c = this.c,
      d = this.d,
      e = this.e,
      f = this.f,
      a2 = matrix.a,
      b2 = matrix.c,
      c2 = matrix.b,
      d2 = matrix.d,
      e2 = matrix.e,
      f2 = matrix.f;
    return _setMatrix(
      this,
      a2 * a + c2 * c,
      a2 * b + c2 * d,
      b2 * a + d2 * c,
      b2 * b + d2 * d,
      e + e2 * a + f2 * c,
      f + e2 * b + f2 * d
    );
  };

  _proto.clone = function clone() {
    return new Matrix2D(this.a, this.b, this.c, this.d, this.e, this.f);
  };

  _proto.equals = function equals(matrix) {
    var a = this.a,
      b = this.b,
      c = this.c,
      d = this.d,
      e = this.e,
      f = this.f;
    return (
      a === matrix.a &&
      b === matrix.b &&
      c === matrix.c &&
      d === matrix.d &&
      e === matrix.e &&
      f === matrix.f
    );
  };

  _proto.apply = function apply(point, decoratee) {
    if (decoratee === void 0) {
      decoratee = {};
    }

    var x = point.x,
      y = point.y,
      a = this.a,
      b = this.b,
      c = this.c,
      d = this.d,
      e = this.e,
      f = this.f;
    decoratee.x = x * a + y * c + e || 0;
    decoratee.y = x * b + y * d + f || 0;
    return decoratee;
  };

  return Matrix2D;
})(); // Feed in an element and it'll return a 2D matrix (optionally inverted) so that you can translate between coordinate spaces.
// Inverting lets you translate a global point into a local coordinate space. No inverting lets you go the other way.
// We needed this to work around various browser bugs, like Firefox doesn't accurately report getScreenCTM() when there
// are transforms applied to ancestor elements.
// The matrix math to convert any x/y coordinate is as follows, which is wrapped in a convenient apply() method of Matrix2D above:
//     tx = m.a * x + m.c * y + m.e
//     ty = m.b * x + m.d * y + m.f

function getGlobalMatrix(
  element,
  inverse,
  adjustGOffset,
  includeScrollInFixed
) {
  // adjustGOffset is typically used only when grabbing an element's PARENT's global matrix, and it ignores the x/y offset of any SVG <g> elements because they behave in a special way.
  if (
    !element ||
    !element.parentNode ||
    (_doc$2 || _setDoc(element)).documentElement === element
  ) {
    return new Matrix2D();
  }

  var zeroScales = _forceNonZeroScale(element),
    svg = _svgOwner(element),
    temps = svg ? _svgTemps : _divTemps,
    container = _placeSiblings(element, adjustGOffset),
    b1 = temps[0].getBoundingClientRect(),
    b2 = temps[1].getBoundingClientRect(),
    b3 = temps[2].getBoundingClientRect(),
    parent = container.parentNode,
    isFixed = !includeScrollInFixed && _isFixed(element),
    m = new Matrix2D(
      (b2.left - b1.left) / 100,
      (b2.top - b1.top) / 100,
      (b3.left - b1.left) / 100,
      (b3.top - b1.top) / 100,
      b1.left + (isFixed ? 0 : _getDocScrollLeft()),
      b1.top + (isFixed ? 0 : _getDocScrollTop())
    );

  parent.removeChild(container);

  if (zeroScales) {
    b1 = zeroScales.length;

    while (b1--) {
      b2 = zeroScales[b1];
      b2.scaleX = b2.scaleY = 0;
      b2.renderTransform(1, b2);
    }
  }

  return inverse ? m.inverse() : m;
}
// 	_doc || _setDoc(element);
// 	let m = (_win.getComputedStyle(element)[_transformProp] + "").substr(7).match(/[-.]*\d+[.e\-+]*\d*[e\-\+]*\d*/g),
// 		is2D = m && m.length === 6;
// 	return !m || m.length < 6 ? new Matrix2D() : new Matrix2D(+m[0], +m[1], +m[is2D ? 2 : 4], +m[is2D ? 3 : 5], +m[is2D ? 4 : 12], +m[is2D ? 5 : 13]);
// }

/*!
 * MotionPathPlugin 3.13.0
 * https://gsap.com
 *
 * @license Copyright 2008-2025, GreenSock. All rights reserved.
 * Subject to the terms at https://gsap.com/standard-license
 * @author: Jack Doyle, jack@greensock.com
 */

var _xProps = "x,translateX,left,marginLeft,xPercent".split(","),
  _yProps = "y,translateY,top,marginTop,yPercent".split(","),
  _DEG2RAD = Math.PI / 180,
  gsap$2,
  PropTween,
  _getUnit,
  _toArray$1,
  _getStyleSaver,
  _reverting,
  _getGSAP$2 = function _getGSAP() {
    return (
      gsap$2 ||
      (typeof window !== "undefined" &&
        (gsap$2 = window.gsap) &&
        gsap$2.registerPlugin &&
        gsap$2)
    );
  },
  _populateSegmentFromArray = function _populateSegmentFromArray(
    segment,
    values,
    property,
    mode
  ) {
    //mode: 0 = x but don't fill y yet, 1 = y, 2 = x and fill y with 0.
    var l = values.length,
      si = mode === 2 ? 0 : mode,
      i = 0;

    for (; i < l; i++) {
      segment[si] = parseFloat(values[i][property]);
      mode === 2 && (segment[si + 1] = 0);
      si += 2;
    }

    return segment;
  },
  _getPropNum = function _getPropNum(target, prop, unit) {
    return parseFloat(target._gsap.get(target, prop, unit || "px")) || 0;
  },
  _relativize = function _relativize(segment) {
    var x = segment[0],
      y = segment[1],
      i;

    for (i = 2; i < segment.length; i += 2) {
      x = segment[i] += x;
      y = segment[i + 1] += y;
    }
  },
  // feed in an array of quadratic bezier points like [{x: 0, y: 0}, ...] and it'll convert it to cubic bezier
  // _quadToCubic = points => {
  // 	let cubic = [],
  // 		l = points.length - 1,
  // 		i = 1,
  // 		a, b, c;
  // 	for (; i < l; i+=2) {
  // 		a = points[i-1];
  // 		b = points[i];
  // 		c = points[i+1];
  // 		cubic.push(a, {x: (2 * b.x + a.x) / 3, y: (2 * b.y + a.y) / 3}, {x: (2 * b.x + c.x) / 3, y: (2 * b.y + c.y) / 3});
  // 	}
  // 	cubic.push(points[l]);
  // 	return cubic;
  // },
  _segmentToRawPath = function _segmentToRawPath(
    plugin,
    segment,
    target,
    x,
    y,
    slicer,
    vars,
    unitX,
    unitY
  ) {
    if (vars.type === "cubic") {
      segment = [segment];
    } else {
      vars.fromCurrent !== false &&
        segment.unshift(
          _getPropNum(target, x, unitX),
          y ? _getPropNum(target, y, unitY) : 0
        );
      vars.relative && _relativize(segment);
      var pointFunc = y ? pointsToSegment : flatPointsToSegment;
      segment = [pointFunc(segment, vars.curviness)];
    }

    segment = slicer(_align(segment, target, vars));

    _addDimensionalPropTween(plugin, target, x, segment, "x", unitX);

    y && _addDimensionalPropTween(plugin, target, y, segment, "y", unitY);
    return cacheRawPathMeasurements(
      segment,
      vars.resolution || (vars.curviness === 0 ? 20 : 12)
    ); //when curviness is 0, it creates control points right on top of the anchors which makes it more sensitive to resolution, thus we change the default accordingly.
  },
  _emptyFunc = function _emptyFunc(v) {
    return v;
  },
  _numExp = /[-+\.]*\d+\.?(?:e-|e\+)?\d*/g,
  _originToPoint = function _originToPoint(element, origin, parentMatrix) {
    // origin is an array of normalized values (0-1) in relation to the width/height, so [0.5, 0.5] would be the center. It can also be "auto" in which case it will be the top left unless it's a <path>, when it will start at the beginning of the path itself.
    var m = getGlobalMatrix(element),
      x = 0,
      y = 0,
      svg;

    if ((element.tagName + "").toLowerCase() === "svg") {
      svg = element.viewBox.baseVal;
      svg.width ||
        (svg = {
          width: +element.getAttribute("width"),
          height: +element.getAttribute("height"),
        });
    } else {
      svg = origin && element.getBBox && element.getBBox();
    }

    if (origin && origin !== "auto") {
      x = origin.push
        ? origin[0] * (svg ? svg.width : element.offsetWidth || 0)
        : origin.x;
      y = origin.push
        ? origin[1] * (svg ? svg.height : element.offsetHeight || 0)
        : origin.y;
    }

    return parentMatrix.apply(
      x || y
        ? m.apply({
            x: x,
            y: y,
          })
        : {
            x: m.e,
            y: m.f,
          }
    );
  },
  _getAlignMatrix = function _getAlignMatrix(
    fromElement,
    toElement,
    fromOrigin,
    toOrigin
  ) {
    var parentMatrix = getGlobalMatrix(fromElement.parentNode, true, true),
      m = parentMatrix.clone().multiply(getGlobalMatrix(toElement)),
      fromPoint = _originToPoint(fromElement, fromOrigin, parentMatrix),
      _originToPoint2 = _originToPoint(toElement, toOrigin, parentMatrix),
      x = _originToPoint2.x,
      y = _originToPoint2.y,
      p;

    m.e = m.f = 0;

    if (
      toOrigin === "auto" &&
      toElement.getTotalLength &&
      toElement.tagName.toLowerCase() === "path"
    ) {
      p = toElement.getAttribute("d").match(_numExp) || [];
      p = m.apply({
        x: +p[0],
        y: +p[1],
      });
      x += p.x;
      y += p.y;
    } //if (p || (toElement.getBBox && fromElement.getBBox && toElement.ownerSVGElement === fromElement.ownerSVGElement)) {

    if (p) {
      p = m.apply(toElement.getBBox());
      x -= p.x;
      y -= p.y;
    }

    m.e = x - fromPoint.x;
    m.f = y - fromPoint.y;
    return m;
  },
  _align = function _align(rawPath, target, _ref) {
    var align = _ref.align,
      matrix = _ref.matrix,
      offsetX = _ref.offsetX,
      offsetY = _ref.offsetY,
      alignOrigin = _ref.alignOrigin;

    var x = rawPath[0][0],
      y = rawPath[0][1],
      curX = _getPropNum(target, "x"),
      curY = _getPropNum(target, "y"),
      alignTarget,
      m,
      p;

    if (!rawPath || !rawPath.length) {
      return getRawPath("M0,0L0,0");
    }

    if (align) {
      if (
        align === "self" ||
        (alignTarget = _toArray$1(align)[0] || target) === target
      ) {
        transformRawPath(rawPath, 1, 0, 0, 1, curX - x, curY - y);
      } else {
        if (alignOrigin && alignOrigin[2] !== false) {
          gsap$2.set(target, {
            transformOrigin:
              alignOrigin[0] * 100 + "% " + alignOrigin[1] * 100 + "%",
          });
        } else {
          alignOrigin = [
            _getPropNum(target, "xPercent") / -100,
            _getPropNum(target, "yPercent") / -100,
          ];
        }

        m = _getAlignMatrix(target, alignTarget, alignOrigin, "auto");
        p = m.apply({
          x: x,
          y: y,
        });
        transformRawPath(
          rawPath,
          m.a,
          m.b,
          m.c,
          m.d,
          curX + m.e - (p.x - m.e),
          curY + m.f - (p.y - m.f)
        );
      }
    }

    if (matrix) {
      transformRawPath(
        rawPath,
        matrix.a,
        matrix.b,
        matrix.c,
        matrix.d,
        matrix.e,
        matrix.f
      );
    } else if (offsetX || offsetY) {
      transformRawPath(rawPath, 1, 0, 0, 1, offsetX || 0, offsetY || 0);
    }

    return rawPath;
  },
  _addDimensionalPropTween = function _addDimensionalPropTween(
    plugin,
    target,
    property,
    rawPath,
    pathProperty,
    forceUnit
  ) {
    var cache = target._gsap,
      harness = cache.harness,
      alias = harness && harness.aliases && harness.aliases[property],
      prop = alias && alias.indexOf(",") < 0 ? alias : property,
      pt = (plugin._pt = new PropTween(
        plugin._pt,
        target,
        prop,
        0,
        0,
        _emptyFunc,
        0,
        cache.set(target, prop, plugin)
      ));
    pt.u = _getUnit(cache.get(target, prop, forceUnit)) || 0;
    pt.path = rawPath;
    pt.pp = pathProperty;

    plugin._props.push(prop);
  },
  _sliceModifier = function _sliceModifier(start, end) {
    return function (rawPath) {
      return start || end !== 1 ? sliceRawPath(rawPath, start, end) : rawPath;
    };
  };

var MotionPathPlugin = {
  version: "3.13.0",
  name: "motionPath",
  register: function register(core, Plugin, propTween) {
    gsap$2 = core;
    _getUnit = gsap$2.utils.getUnit;
    _toArray$1 = gsap$2.utils.toArray;
    _getStyleSaver = gsap$2.core.getStyleSaver;

    _reverting = gsap$2.core.reverting || function () {};

    PropTween = propTween;
  },
  init: function init(target, vars, tween) {
    if (!gsap$2) {
      console.warn("Please gsap.registerPlugin(MotionPathPlugin)");
      return false;
    }

    if (!(typeof vars === "object" && !vars.style) || !vars.path) {
      vars = {
        path: vars,
      };
    }

    var rawPaths = [],
      _vars = vars,
      path = _vars.path,
      autoRotate = _vars.autoRotate,
      unitX = _vars.unitX,
      unitY = _vars.unitY,
      x = _vars.x,
      y = _vars.y,
      firstObj = path[0],
      slicer = _sliceModifier(vars.start, "end" in vars ? vars.end : 1),
      rawPath,
      p;

    this.rawPaths = rawPaths;
    this.target = target;
    this.tween = tween;
    this.styles = _getStyleSaver && _getStyleSaver(target, "transform");

    if ((this.rotate = autoRotate || autoRotate === 0)) {
      //get the rotational data FIRST so that the setTransform() method is called in the correct order in the render() loop - rotation gets set last.
      this.rOffset = parseFloat(autoRotate) || 0;
      this.radians = !!vars.useRadians;
      this.rProp = vars.rotation || "rotation"; // rotation property

      this.rSet = target._gsap.set(target, this.rProp, this); // rotation setter

      this.ru = _getUnit(target._gsap.get(target, this.rProp)) || 0; // rotation units
    }

    if (
      Array.isArray(path) &&
      !("closed" in path) &&
      typeof firstObj !== "number"
    ) {
      for (p in firstObj) {
        if (!x && ~_xProps.indexOf(p)) {
          x = p;
        } else if (!y && ~_yProps.indexOf(p)) {
          y = p;
        }
      }

      if (x && y) {
        //correlated values
        rawPaths.push(
          _segmentToRawPath(
            this,
            _populateSegmentFromArray(
              _populateSegmentFromArray([], path, x, 0),
              path,
              y,
              1
            ),
            target,
            x,
            y,
            slicer,
            vars,
            unitX || _getUnit(path[0][x]),
            unitY || _getUnit(path[0][y])
          )
        );
      } else {
        x = y = 0;
      }

      for (p in firstObj) {
        p !== x &&
          p !== y &&
          rawPaths.push(
            _segmentToRawPath(
              this,
              _populateSegmentFromArray([], path, p, 2),
              target,
              p,
              0,
              slicer,
              vars,
              _getUnit(path[0][p])
            )
          );
      }
    } else {
      rawPath = slicer(_align(getRawPath(vars.path), target, vars));
      cacheRawPathMeasurements(rawPath, vars.resolution);
      rawPaths.push(rawPath);

      _addDimensionalPropTween(
        this,
        target,
        vars.x || "x",
        rawPath,
        "x",
        vars.unitX || "px"
      );

      _addDimensionalPropTween(
        this,
        target,
        vars.y || "y",
        rawPath,
        "y",
        vars.unitY || "px"
      );
    }

    tween.vars.immediateRender && this.render(tween.progress(), this);
  },
  render: function render(ratio, data) {
    var rawPaths = data.rawPaths,
      i = rawPaths.length,
      pt = data._pt;

    if (data.tween._time || !_reverting()) {
      if (ratio > 1) {
        ratio = 1;
      } else if (ratio < 0) {
        ratio = 0;
      }

      while (i--) {
        getPositionOnPath(rawPaths[i], ratio, !i && data.rotate, rawPaths[i]);
      }

      while (pt) {
        pt.set(pt.t, pt.p, pt.path[pt.pp] + pt.u, pt.d, ratio);
        pt = pt._next;
      }

      data.rotate &&
        data.rSet(
          data.target,
          data.rProp,
          rawPaths[0].angle * (data.radians ? _DEG2RAD : 1) +
            data.rOffset +
            data.ru,
          data,
          ratio
        );
    } else {
      data.styles.revert();
    }
  },
  getLength: function getLength(path) {
    return cacheRawPathMeasurements(getRawPath(path)).totalLength;
  },
  sliceRawPath: sliceRawPath,
  getRawPath: getRawPath,
  pointsToSegment: pointsToSegment,
  stringToRawPath: stringToRawPath,
  rawPathToString: rawPathToString,
  transformRawPath: transformRawPath,
  getGlobalMatrix: getGlobalMatrix,
  getPositionOnPath: getPositionOnPath,
  cacheRawPathMeasurements: cacheRawPathMeasurements,
  convertToPath: function convertToPath$1(targets, swap) {
    return _toArray$1(targets).map(function (target) {
      return convertToPath(target, swap !== false);
    });
  },
  convertCoordinates: function convertCoordinates(
    fromElement,
    toElement,
    point
  ) {
    var m = getGlobalMatrix(toElement, true, true).multiply(
      getGlobalMatrix(fromElement)
    );
    return point ? m.apply(point) : m;
  },
  getAlignMatrix: _getAlignMatrix,
  getRelativePosition: function getRelativePosition(
    fromElement,
    toElement,
    fromOrigin,
    toOrigin
  ) {
    var m = _getAlignMatrix(fromElement, toElement, fromOrigin, toOrigin);

    return {
      x: m.e,
      y: m.f,
    };
  },
  arrayToRawPath: function arrayToRawPath(value, vars) {
    vars = vars || {};

    var segment = _populateSegmentFromArray(
      _populateSegmentFromArray([], value, vars.x || "x", 0),
      value,
      vars.y || "y",
      1
    );

    vars.relative && _relativize(segment);
    return [
      vars.type === "cubic"
        ? segment
        : pointsToSegment(segment, vars.curviness),
    ];
  },
};
_getGSAP$2() && gsap$2.registerPlugin(MotionPathPlugin);

const urlAlphabet =
  "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";

/* @ts-self-types="./index.d.ts" */
let nanoid = (size = 21) => {
  let id = "";
  let bytes = crypto.getRandomValues(new Uint8Array((size |= 0)));
  while (size--) {
    id += urlAlphabet[bytes[size] & 63];
  }
  return id;
};

function _defineProperties$1(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass$1(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties$1(Constructor, staticProps);
  return Constructor;
}

/*!
 * Observer 3.13.0
 * https://gsap.com
 *
 * @license Copyright 2008-2025, GreenSock. All rights reserved.
 * Subject to the terms at https://gsap.com/standard-license
 * @author: Jack Doyle, jack@greensock.com
 */

/* eslint-disable */
var gsap$1,
  _coreInitted$1,
  _win$1,
  _doc$1,
  _docEl$1,
  _body$1,
  _isTouch,
  _pointerType,
  ScrollTrigger$1,
  _root$1,
  _normalizer$1,
  _eventTypes,
  _context$1,
  _getGSAP$1 = function _getGSAP() {
    return (
      gsap$1 ||
      (typeof window !== "undefined" &&
        (gsap$1 = window.gsap) &&
        gsap$1.registerPlugin &&
        gsap$1)
    );
  },
  _startup$1 = 1,
  _observers = [],
  _scrollers = [],
  _proxies = [],
  _getTime$1 = Date.now,
  _bridge = function _bridge(name, value) {
    return value;
  },
  _integrate = function _integrate() {
    var core = ScrollTrigger$1.core,
      data = core.bridge || {},
      scrollers = core._scrollers,
      proxies = core._proxies;
    scrollers.push.apply(scrollers, _scrollers);
    proxies.push.apply(proxies, _proxies);
    _scrollers = scrollers;
    _proxies = proxies;

    _bridge = function _bridge(name, value) {
      return data[name](value);
    };
  },
  _getProxyProp = function _getProxyProp(element, property) {
    return (
      ~_proxies.indexOf(element) &&
      _proxies[_proxies.indexOf(element) + 1][property]
    );
  },
  _isViewport$1 = function _isViewport(el) {
    return !!~_root$1.indexOf(el);
  },
  _addListener$1 = function _addListener(
    element,
    type,
    func,
    passive,
    capture
  ) {
    return element.addEventListener(type, func, {
      passive: passive !== false,
      capture: !!capture,
    });
  },
  _removeListener$1 = function _removeListener(element, type, func, capture) {
    return element.removeEventListener(type, func, !!capture);
  },
  _scrollLeft = "scrollLeft",
  _scrollTop = "scrollTop",
  _onScroll$1 = function _onScroll() {
    return (_normalizer$1 && _normalizer$1.isPressed) || _scrollers.cache++;
  },
  _scrollCacheFunc = function _scrollCacheFunc(f, doNotCache) {
    var cachingFunc = function cachingFunc(value) {
      // since reading the scrollTop/scrollLeft/pageOffsetY/pageOffsetX can trigger a layout, this function allows us to cache the value so it only gets read fresh after a "scroll" event fires (or while we're refreshing because that can lengthen the page and alter the scroll position). when "soft" is true, that means don't actually set the scroll, but cache the new value instead (useful in ScrollSmoother)
      if (value || value === 0) {
        _startup$1 && (_win$1.history.scrollRestoration = "manual"); // otherwise the new position will get overwritten by the browser onload.

        var isNormalizing = _normalizer$1 && _normalizer$1.isPressed;
        value = cachingFunc.v =
          Math.round(value) || (_normalizer$1 && _normalizer$1.iOS ? 1 : 0); //TODO: iOS Bug: if you allow it to go to 0, Safari can start to report super strange (wildly inaccurate) touch positions!

        f(value);
        cachingFunc.cacheID = _scrollers.cache;
        isNormalizing && _bridge("ss", value); // set scroll (notify ScrollTrigger so it can dispatch a "scrollStart" event if necessary
      } else if (
        doNotCache ||
        _scrollers.cache !== cachingFunc.cacheID ||
        _bridge("ref")
      ) {
        cachingFunc.cacheID = _scrollers.cache;
        cachingFunc.v = f();
      }

      return cachingFunc.v + cachingFunc.offset;
    };

    cachingFunc.offset = 0;
    return f && cachingFunc;
  },
  _horizontal = {
    s: _scrollLeft,
    p: "left",
    p2: "Left",
    os: "right",
    os2: "Right",
    d: "width",
    d2: "Width",
    a: "x",
    sc: _scrollCacheFunc(function (value) {
      return arguments.length
        ? _win$1.scrollTo(value, _vertical.sc())
        : _win$1.pageXOffset ||
            _doc$1[_scrollLeft] ||
            _docEl$1[_scrollLeft] ||
            _body$1[_scrollLeft] ||
            0;
    }),
  },
  _vertical = {
    s: _scrollTop,
    p: "top",
    p2: "Top",
    os: "bottom",
    os2: "Bottom",
    d: "height",
    d2: "Height",
    a: "y",
    op: _horizontal,
    sc: _scrollCacheFunc(function (value) {
      return arguments.length
        ? _win$1.scrollTo(_horizontal.sc(), value)
        : _win$1.pageYOffset ||
            _doc$1[_scrollTop] ||
            _docEl$1[_scrollTop] ||
            _body$1[_scrollTop] ||
            0;
    }),
  },
  _getTarget = function _getTarget(t, self) {
    return (
      ((self && self._ctx && self._ctx.selector) || gsap$1.utils.toArray)(
        t
      )[0] ||
      (typeof t === "string" && gsap$1.config().nullTargetWarn !== false
        ? console.warn("Element not found:", t)
        : null)
    );
  },
  _isWithin = function _isWithin(element, list) {
    // check if the element is in the list or is a descendant of an element in the list.
    var i = list.length;

    while (i--) {
      if (list[i] === element || list[i].contains(element)) {
        return true;
      }
    }

    return false;
  },
  _getScrollFunc = function _getScrollFunc(element, _ref) {
    var s = _ref.s,
      sc = _ref.sc;
    // we store the scroller functions in an alternating sequenced Array like [element, verticalScrollFunc, horizontalScrollFunc, ...] so that we can minimize memory, maximize performance, and we also record the last position as a ".rec" property in order to revert to that after refreshing to ensure things don't shift around.
    _isViewport$1(element) && (element = _doc$1.scrollingElement || _docEl$1);

    var i = _scrollers.indexOf(element),
      offset = sc === _vertical.sc ? 1 : 2;

    !~i && (i = _scrollers.push(element) - 1);
    _scrollers[i + offset] || _addListener$1(element, "scroll", _onScroll$1); // clear the cache when a scroll occurs

    var prev = _scrollers[i + offset],
      func =
        prev ||
        (_scrollers[i + offset] =
          _scrollCacheFunc(_getProxyProp(element, s), true) ||
          (_isViewport$1(element)
            ? sc
            : _scrollCacheFunc(function (value) {
                return arguments.length ? (element[s] = value) : element[s];
              })));
    func.target = element;
    prev ||
      (func.smooth =
        gsap$1.getProperty(element, "scrollBehavior") === "smooth"); // only set it the first time (don't reset every time a scrollFunc is requested because perhaps it happens during a refresh() when it's disabled in ScrollTrigger.

    return func;
  },
  _getVelocityProp = function _getVelocityProp(
    value,
    minTimeRefresh,
    useDelta
  ) {
    var v1 = value,
      v2 = value,
      t1 = _getTime$1(),
      t2 = t1,
      min = minTimeRefresh || 50,
      dropToZeroTime = Math.max(500, min * 3),
      update = function update(value, force) {
        var t = _getTime$1();

        if (force || t - t1 > min) {
          v2 = v1;
          v1 = value;
          t2 = t1;
          t1 = t;
        } else if (useDelta) {
          v1 += value;
        } else {
          // not totally necessary, but makes it a bit more accurate by adjusting the v1 value according to the new slope. This way we're not just ignoring the incoming data. Removing for now because it doesn't seem to make much practical difference and it's probably not worth the kb.
          v1 = v2 + ((value - v2) / (t - t2)) * (t1 - t2);
        }
      },
      reset = function reset() {
        v2 = v1 = useDelta ? 0 : v1;
        t2 = t1 = 0;
      },
      getVelocity = function getVelocity(latestValue) {
        var tOld = t2,
          vOld = v2,
          t = _getTime$1();

        (latestValue || latestValue === 0) &&
          latestValue !== v1 &&
          update(latestValue);
        return t1 === t2 || t - t2 > dropToZeroTime
          ? 0
          : ((v1 + (useDelta ? vOld : -vOld)) / ((useDelta ? t : t1) - tOld)) *
              1000;
      };

    return {
      update: update,
      reset: reset,
      getVelocity: getVelocity,
    };
  },
  _getEvent = function _getEvent(e, preventDefault) {
    preventDefault && !e._gsapAllow && e.preventDefault();
    return e.changedTouches ? e.changedTouches[0] : e;
  },
  _getAbsoluteMax = function _getAbsoluteMax(a) {
    var max = Math.max.apply(Math, a),
      min = Math.min.apply(Math, a);
    return Math.abs(max) >= Math.abs(min) ? max : min;
  },
  _setScrollTrigger = function _setScrollTrigger() {
    ScrollTrigger$1 = gsap$1.core.globals().ScrollTrigger;
    ScrollTrigger$1 && ScrollTrigger$1.core && _integrate();
  },
  _initCore = function _initCore(core) {
    gsap$1 = core || _getGSAP$1();

    if (
      !_coreInitted$1 &&
      gsap$1 &&
      typeof document !== "undefined" &&
      document.body
    ) {
      _win$1 = window;
      _doc$1 = document;
      _docEl$1 = _doc$1.documentElement;
      _body$1 = _doc$1.body;
      _root$1 = [_win$1, _doc$1, _docEl$1, _body$1];
      gsap$1.utils.clamp;

      _context$1 = gsap$1.core.context || function () {};

      _pointerType = "onpointerenter" in _body$1 ? "pointer" : "mouse"; // isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.

      _isTouch = Observer.isTouch =
        _win$1.matchMedia &&
        _win$1.matchMedia("(hover: none), (pointer: coarse)").matches
          ? 1
          : "ontouchstart" in _win$1 ||
            navigator.maxTouchPoints > 0 ||
            navigator.msMaxTouchPoints > 0
          ? 2
          : 0;
      _eventTypes = Observer.eventTypes = (
        "ontouchstart" in _docEl$1
          ? "touchstart,touchmove,touchcancel,touchend"
          : !("onpointerdown" in _docEl$1)
          ? "mousedown,mousemove,mouseup,mouseup"
          : "pointerdown,pointermove,pointercancel,pointerup"
      ).split(",");
      setTimeout(function () {
        return (_startup$1 = 0);
      }, 500);

      _setScrollTrigger();

      _coreInitted$1 = 1;
    }

    return _coreInitted$1;
  };

_horizontal.op = _vertical;
_scrollers.cache = 0;
var Observer = /*#__PURE__*/ (function () {
  function Observer(vars) {
    this.init(vars);
  }

  var _proto = Observer.prototype;

  _proto.init = function init(vars) {
    _coreInitted$1 ||
      _initCore(gsap$1) ||
      console.warn("Please gsap.registerPlugin(Observer)");
    ScrollTrigger$1 || _setScrollTrigger();
    var tolerance = vars.tolerance,
      dragMinimum = vars.dragMinimum,
      type = vars.type,
      target = vars.target,
      lineHeight = vars.lineHeight,
      debounce = vars.debounce,
      preventDefault = vars.preventDefault,
      onStop = vars.onStop,
      onStopDelay = vars.onStopDelay,
      ignore = vars.ignore,
      wheelSpeed = vars.wheelSpeed,
      event = vars.event,
      onDragStart = vars.onDragStart,
      onDragEnd = vars.onDragEnd,
      onDrag = vars.onDrag,
      onPress = vars.onPress,
      onRelease = vars.onRelease,
      onRight = vars.onRight,
      onLeft = vars.onLeft,
      onUp = vars.onUp,
      onDown = vars.onDown,
      onChangeX = vars.onChangeX,
      onChangeY = vars.onChangeY,
      onChange = vars.onChange,
      onToggleX = vars.onToggleX,
      onToggleY = vars.onToggleY,
      onHover = vars.onHover,
      onHoverEnd = vars.onHoverEnd,
      onMove = vars.onMove,
      ignoreCheck = vars.ignoreCheck,
      isNormalizer = vars.isNormalizer,
      onGestureStart = vars.onGestureStart,
      onGestureEnd = vars.onGestureEnd,
      onWheel = vars.onWheel,
      onEnable = vars.onEnable,
      onDisable = vars.onDisable,
      onClick = vars.onClick,
      scrollSpeed = vars.scrollSpeed,
      capture = vars.capture,
      allowClicks = vars.allowClicks,
      lockAxis = vars.lockAxis,
      onLockAxis = vars.onLockAxis;
    this.target = target = _getTarget(target) || _docEl$1;
    this.vars = vars;
    ignore && (ignore = gsap$1.utils.toArray(ignore));
    tolerance = tolerance || 1e-9;
    dragMinimum = dragMinimum || 0;
    wheelSpeed = wheelSpeed || 1;
    scrollSpeed = scrollSpeed || 1;
    type = type || "wheel,touch,pointer";
    debounce = debounce !== false;
    lineHeight ||
      (lineHeight =
        parseFloat(_win$1.getComputedStyle(_body$1).lineHeight) || 22); // note: browser may report "normal", so default to 22.

    var id,
      onStopDelayedCall,
      dragged,
      moved,
      wheeled,
      locked,
      axis,
      self = this,
      prevDeltaX = 0,
      prevDeltaY = 0,
      passive = vars.passive || (!preventDefault && vars.passive !== false),
      scrollFuncX = _getScrollFunc(target, _horizontal),
      scrollFuncY = _getScrollFunc(target, _vertical),
      scrollX = scrollFuncX(),
      scrollY = scrollFuncY(),
      limitToTouch =
        ~type.indexOf("touch") &&
        !~type.indexOf("pointer") &&
        _eventTypes[0] === "pointerdown",
      // for devices that accommodate mouse events and touch events, we need to distinguish.
      isViewport = _isViewport$1(target),
      ownerDoc = target.ownerDocument || _doc$1,
      deltaX = [0, 0, 0],
      // wheel, scroll, pointer/touch
      deltaY = [0, 0, 0],
      onClickTime = 0,
      clickCapture = function clickCapture() {
        return (onClickTime = _getTime$1());
      },
      _ignoreCheck = function _ignoreCheck(e, isPointerOrTouch) {
        return (
          ((self.event = e) && ignore && _isWithin(e.target, ignore)) ||
          (isPointerOrTouch && limitToTouch && e.pointerType !== "touch") ||
          (ignoreCheck && ignoreCheck(e, isPointerOrTouch))
        );
      },
      onStopFunc = function onStopFunc() {
        self._vx.reset();

        self._vy.reset();

        onStopDelayedCall.pause();
        onStop && onStop(self);
      },
      update = function update() {
        var dx = (self.deltaX = _getAbsoluteMax(deltaX)),
          dy = (self.deltaY = _getAbsoluteMax(deltaY)),
          changedX = Math.abs(dx) >= tolerance,
          changedY = Math.abs(dy) >= tolerance;

        onChange &&
          (changedX || changedY) &&
          onChange(self, dx, dy, deltaX, deltaY); // in ScrollTrigger.normalizeScroll(), we need to know if it was touch/pointer so we need access to the deltaX/deltaY Arrays before we clear them out.

        if (changedX) {
          onRight && self.deltaX > 0 && onRight(self);
          onLeft && self.deltaX < 0 && onLeft(self);
          onChangeX && onChangeX(self);
          onToggleX && self.deltaX < 0 !== prevDeltaX < 0 && onToggleX(self);
          prevDeltaX = self.deltaX;
          deltaX[0] = deltaX[1] = deltaX[2] = 0;
        }

        if (changedY) {
          onDown && self.deltaY > 0 && onDown(self);
          onUp && self.deltaY < 0 && onUp(self);
          onChangeY && onChangeY(self);
          onToggleY && self.deltaY < 0 !== prevDeltaY < 0 && onToggleY(self);
          prevDeltaY = self.deltaY;
          deltaY[0] = deltaY[1] = deltaY[2] = 0;
        }

        if (moved || dragged) {
          onMove && onMove(self);

          if (dragged) {
            onDragStart && dragged === 1 && onDragStart(self);
            onDrag && onDrag(self);
            dragged = 0;
          }

          moved = false;
        }

        locked && !(locked = false) && onLockAxis && onLockAxis(self);

        if (wheeled) {
          onWheel(self);
          wheeled = false;
        }

        id = 0;
      },
      onDelta = function onDelta(x, y, index) {
        deltaX[index] += x;
        deltaY[index] += y;

        self._vx.update(x);

        self._vy.update(y);

        debounce ? id || (id = requestAnimationFrame(update)) : update();
      },
      onTouchOrPointerDelta = function onTouchOrPointerDelta(x, y) {
        if (lockAxis && !axis) {
          self.axis = axis = Math.abs(x) > Math.abs(y) ? "x" : "y";
          locked = true;
        }

        if (axis !== "y") {
          deltaX[2] += x;

          self._vx.update(x, true); // update the velocity as frequently as possible instead of in the debounced function so that very quick touch-scrolls (flicks) feel natural. If it's the mouse/touch/pointer, force it so that we get snappy/accurate momentum scroll.
        }

        if (axis !== "x") {
          deltaY[2] += y;

          self._vy.update(y, true);
        }

        debounce ? id || (id = requestAnimationFrame(update)) : update();
      },
      _onDrag = function _onDrag(e) {
        if (_ignoreCheck(e, 1)) {
          return;
        }

        e = _getEvent(e, preventDefault);
        var x = e.clientX,
          y = e.clientY,
          dx = x - self.x,
          dy = y - self.y,
          isDragging = self.isDragging;
        self.x = x;
        self.y = y;

        if (
          isDragging ||
          ((dx || dy) &&
            (Math.abs(self.startX - x) >= dragMinimum ||
              Math.abs(self.startY - y) >= dragMinimum))
        ) {
          dragged = isDragging ? 2 : 1; // dragged: 0 = not dragging, 1 = first drag, 2 = normal drag

          isDragging || (self.isDragging = true);
          onTouchOrPointerDelta(dx, dy);
        }
      },
      _onPress = (self.onPress = function (e) {
        if (_ignoreCheck(e, 1) || (e && e.button)) {
          return;
        }

        self.axis = axis = null;
        onStopDelayedCall.pause();
        self.isPressed = true;
        e = _getEvent(e); // note: may need to preventDefault(?) Won't side-scroll on iOS Safari if we do, though.

        prevDeltaX = prevDeltaY = 0;
        self.startX = self.x = e.clientX;
        self.startY = self.y = e.clientY;

        self._vx.reset(); // otherwise the t2 may be stale if the user touches and flicks super fast and releases in less than 2 requestAnimationFrame ticks, causing velocity to be 0.

        self._vy.reset();

        _addListener$1(
          isNormalizer ? target : ownerDoc,
          _eventTypes[1],
          _onDrag,
          passive,
          true
        );

        self.deltaX = self.deltaY = 0;
        onPress && onPress(self);
      }),
      _onRelease = (self.onRelease = function (e) {
        if (_ignoreCheck(e, 1)) {
          return;
        }

        _removeListener$1(
          isNormalizer ? target : ownerDoc,
          _eventTypes[1],
          _onDrag,
          true
        );

        var isTrackingDrag = !isNaN(self.y - self.startY),
          wasDragging = self.isDragging,
          isDragNotClick =
            wasDragging &&
            (Math.abs(self.x - self.startX) > 3 ||
              Math.abs(self.y - self.startY) > 3),
          // some touch devices need some wiggle room in terms of sensing clicks - the finger may move a few pixels.
          eventData = _getEvent(e);

        if (!isDragNotClick && isTrackingDrag) {
          self._vx.reset();

          self._vy.reset(); //if (preventDefault && allowClicks && self.isPressed) { // check isPressed because in a rare edge case, the inputObserver in ScrollTrigger may stopPropagation() on the press/drag, so the onRelease may get fired without the onPress/onDrag ever getting called, thus it could trigger a click to occur on a link after scroll-dragging it.

          if (preventDefault && allowClicks) {
            gsap$1.delayedCall(0.08, function () {
              // some browsers (like Firefox) won't trust script-generated clicks, so if the user tries to click on a video to play it, for example, it simply won't work. Since a regular "click" event will most likely be generated anyway (one that has its isTrusted flag set to true), we must slightly delay our script-generated click so that the "real"/trusted one is prioritized. Remember, when there are duplicate events in quick succession, we suppress all but the first one. Some browsers don't even trigger the "real" one at all, so our synthetic one is a safety valve that ensures that no matter what, a click event does get dispatched.
              if (_getTime$1() - onClickTime > 300 && !e.defaultPrevented) {
                if (e.target.click) {
                  //some browsers (like mobile Safari) don't properly trigger the click event
                  e.target.click();
                } else if (ownerDoc.createEvent) {
                  var syntheticEvent = ownerDoc.createEvent("MouseEvents");
                  syntheticEvent.initMouseEvent(
                    "click",
                    true,
                    true,
                    _win$1,
                    1,
                    eventData.screenX,
                    eventData.screenY,
                    eventData.clientX,
                    eventData.clientY,
                    false,
                    false,
                    false,
                    false,
                    0,
                    null
                  );
                  e.target.dispatchEvent(syntheticEvent);
                }
              }
            });
          }
        }

        self.isDragging = self.isGesturing = self.isPressed = false;
        onStop &&
          wasDragging &&
          !isNormalizer &&
          onStopDelayedCall.restart(true);
        dragged && update(); // in case debouncing, we don't want onDrag to fire AFTER onDragEnd().

        onDragEnd && wasDragging && onDragEnd(self);
        onRelease && onRelease(self, isDragNotClick);
      }),
      _onGestureStart = function _onGestureStart(e) {
        return (
          e.touches &&
          e.touches.length > 1 &&
          (self.isGesturing = true) &&
          onGestureStart(e, self.isDragging)
        );
      },
      _onGestureEnd = function _onGestureEnd() {
        return (self.isGesturing = false) || onGestureEnd(self);
      },
      onScroll = function onScroll(e) {
        if (_ignoreCheck(e)) {
          return;
        }

        var x = scrollFuncX(),
          y = scrollFuncY();
        onDelta((x - scrollX) * scrollSpeed, (y - scrollY) * scrollSpeed, 1);
        scrollX = x;
        scrollY = y;
        onStop && onStopDelayedCall.restart(true);
      },
      _onWheel = function _onWheel(e) {
        if (_ignoreCheck(e)) {
          return;
        }

        e = _getEvent(e, preventDefault);
        onWheel && (wheeled = true);
        var multiplier =
          (e.deltaMode === 1
            ? lineHeight
            : e.deltaMode === 2
            ? _win$1.innerHeight
            : 1) * wheelSpeed;
        onDelta(e.deltaX * multiplier, e.deltaY * multiplier, 0);
        onStop && !isNormalizer && onStopDelayedCall.restart(true);
      },
      _onMove = function _onMove(e) {
        if (_ignoreCheck(e)) {
          return;
        }

        var x = e.clientX,
          y = e.clientY,
          dx = x - self.x,
          dy = y - self.y;
        self.x = x;
        self.y = y;
        moved = true;
        onStop && onStopDelayedCall.restart(true);
        (dx || dy) && onTouchOrPointerDelta(dx, dy);
      },
      _onHover = function _onHover(e) {
        self.event = e;
        onHover(self);
      },
      _onHoverEnd = function _onHoverEnd(e) {
        self.event = e;
        onHoverEnd(self);
      },
      _onClick = function _onClick(e) {
        return (
          _ignoreCheck(e) || (_getEvent(e, preventDefault) && onClick(self))
        );
      };

    onStopDelayedCall = self._dc = gsap$1
      .delayedCall(onStopDelay || 0.25, onStopFunc)
      .pause();
    self.deltaX = self.deltaY = 0;
    self._vx = _getVelocityProp(0, 50, true);
    self._vy = _getVelocityProp(0, 50, true);
    self.scrollX = scrollFuncX;
    self.scrollY = scrollFuncY;
    self.isDragging = self.isGesturing = self.isPressed = false;

    _context$1(this);

    self.enable = function (e) {
      if (!self.isEnabled) {
        _addListener$1(isViewport ? ownerDoc : target, "scroll", _onScroll$1);

        type.indexOf("scroll") >= 0 &&
          _addListener$1(
            isViewport ? ownerDoc : target,
            "scroll",
            onScroll,
            passive,
            capture
          );
        type.indexOf("wheel") >= 0 &&
          _addListener$1(target, "wheel", _onWheel, passive, capture);

        if (
          (type.indexOf("touch") >= 0 && _isTouch) ||
          type.indexOf("pointer") >= 0
        ) {
          _addListener$1(target, _eventTypes[0], _onPress, passive, capture);

          _addListener$1(ownerDoc, _eventTypes[2], _onRelease);

          _addListener$1(ownerDoc, _eventTypes[3], _onRelease);

          allowClicks &&
            _addListener$1(target, "click", clickCapture, true, true);
          onClick && _addListener$1(target, "click", _onClick);
          onGestureStart &&
            _addListener$1(ownerDoc, "gesturestart", _onGestureStart);
          onGestureEnd && _addListener$1(ownerDoc, "gestureend", _onGestureEnd);
          onHover && _addListener$1(target, _pointerType + "enter", _onHover);
          onHoverEnd &&
            _addListener$1(target, _pointerType + "leave", _onHoverEnd);
          onMove && _addListener$1(target, _pointerType + "move", _onMove);
        }

        self.isEnabled = true;
        self.isDragging =
          self.isGesturing =
          self.isPressed =
          moved =
          dragged =
            false;

        self._vx.reset();

        self._vy.reset();

        scrollX = scrollFuncX();
        scrollY = scrollFuncY();
        e && e.type && _onPress(e);
        onEnable && onEnable(self);
      }

      return self;
    };

    self.disable = function () {
      if (self.isEnabled) {
        // only remove the _onScroll listener if there aren't any others that rely on the functionality.
        _observers.filter(function (o) {
          return o !== self && _isViewport$1(o.target);
        }).length ||
          _removeListener$1(
            isViewport ? ownerDoc : target,
            "scroll",
            _onScroll$1
          );

        if (self.isPressed) {
          self._vx.reset();

          self._vy.reset();

          _removeListener$1(
            isNormalizer ? target : ownerDoc,
            _eventTypes[1],
            _onDrag,
            true
          );
        }

        _removeListener$1(
          isViewport ? ownerDoc : target,
          "scroll",
          onScroll,
          capture
        );

        _removeListener$1(target, "wheel", _onWheel, capture);

        _removeListener$1(target, _eventTypes[0], _onPress, capture);

        _removeListener$1(ownerDoc, _eventTypes[2], _onRelease);

        _removeListener$1(ownerDoc, _eventTypes[3], _onRelease);

        _removeListener$1(target, "click", clickCapture, true);

        _removeListener$1(target, "click", _onClick);

        _removeListener$1(ownerDoc, "gesturestart", _onGestureStart);

        _removeListener$1(ownerDoc, "gestureend", _onGestureEnd);

        _removeListener$1(target, _pointerType + "enter", _onHover);

        _removeListener$1(target, _pointerType + "leave", _onHoverEnd);

        _removeListener$1(target, _pointerType + "move", _onMove);

        self.isEnabled = self.isPressed = self.isDragging = false;
        onDisable && onDisable(self);
      }
    };

    self.kill = self.revert = function () {
      self.disable();

      var i = _observers.indexOf(self);

      i >= 0 && _observers.splice(i, 1);
      _normalizer$1 === self && (_normalizer$1 = 0);
    };

    _observers.push(self);

    isNormalizer && _isViewport$1(target) && (_normalizer$1 = self);
    self.enable(event);
  };

  _createClass$1(Observer, [
    {
      key: "velocityX",
      get: function get() {
        return this._vx.getVelocity();
      },
    },
    {
      key: "velocityY",
      get: function get() {
        return this._vy.getVelocity();
      },
    },
  ]);

  return Observer;
})();
Observer.version = "3.13.0";

Observer.create = function (vars) {
  return new Observer(vars);
};

Observer.register = _initCore;

Observer.getAll = function () {
  return _observers.slice();
};

Observer.getById = function (id) {
  return _observers.filter(function (o) {
    return o.vars.id === id;
  })[0];
};

_getGSAP$1() && gsap$1.registerPlugin(Observer);

/*!
 * ScrollTrigger 3.13.0
 * https://gsap.com
 *
 * @license Copyright 2008-2025, GreenSock. All rights reserved.
 * Subject to the terms at https://gsap.com/standard-license
 * @author: Jack Doyle, jack@greensock.com
 */

var gsap,
  _coreInitted,
  _win,
  _doc,
  _docEl,
  _body,
  _root,
  _resizeDelay,
  _toArray,
  _clamp,
  _time2,
  _syncInterval,
  _refreshing,
  _pointerIsDown,
  _transformProp,
  _i,
  _prevWidth,
  _prevHeight,
  _autoRefresh,
  _sort,
  _suppressOverwrites,
  _ignoreResize,
  _normalizer,
  _ignoreMobileResize,
  _baseScreenHeight,
  _baseScreenWidth,
  _fixIOSBug,
  _context,
  _scrollRestoration,
  _div100vh,
  _100vh,
  _isReverted,
  _clampingMax,
  _limitCallbacks,
  // if true, we'll only trigger callbacks if the active state toggles, so if you scroll immediately past both the start and end positions of a ScrollTrigger (thus inactive to inactive), neither its onEnter nor onLeave will be called. This is useful during startup.
  _startup = 1,
  _getTime = Date.now,
  _time1 = _getTime(),
  _lastScrollTime = 0,
  _enabled = 0,
  _parseClamp = function _parseClamp(value, type, self) {
    var clamp =
      _isString(value) &&
      (value.substr(0, 6) === "clamp(" || value.indexOf("max") > -1);
    self["_" + type + "Clamp"] = clamp;
    return clamp ? value.substr(6, value.length - 7) : value;
  },
  _keepClamp = function _keepClamp(value, clamp) {
    return clamp && (!_isString(value) || value.substr(0, 6) !== "clamp(")
      ? "clamp(" + value + ")"
      : value;
  },
  _rafBugFix = function _rafBugFix() {
    return _enabled && requestAnimationFrame(_rafBugFix);
  },
  // in some browsers (like Firefox), screen repaints weren't consistent unless we had SOMETHING queued up in requestAnimationFrame()! So this just creates a super simple loop to keep it alive and smooth out repaints.
  _pointerDownHandler = function _pointerDownHandler() {
    return (_pointerIsDown = 1);
  },
  _pointerUpHandler = function _pointerUpHandler() {
    return (_pointerIsDown = 0);
  },
  _passThrough = function _passThrough(v) {
    return v;
  },
  _round = function _round(value) {
    return Math.round(value * 100000) / 100000 || 0;
  },
  _windowExists = function _windowExists() {
    return typeof window !== "undefined";
  },
  _getGSAP = function _getGSAP() {
    return (
      gsap ||
      (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap)
    );
  },
  _isViewport = function _isViewport(e) {
    return !!~_root.indexOf(e);
  },
  _getViewportDimension = function _getViewportDimension(dimensionProperty) {
    return (
      (dimensionProperty === "Height"
        ? _100vh
        : _win["inner" + dimensionProperty]) ||
      _docEl["client" + dimensionProperty] ||
      _body["client" + dimensionProperty]
    );
  },
  _getBoundsFunc = function _getBoundsFunc(element) {
    return (
      _getProxyProp(element, "getBoundingClientRect") ||
      (_isViewport(element)
        ? function () {
            _winOffsets.width = _win.innerWidth;
            _winOffsets.height = _100vh;
            return _winOffsets;
          }
        : function () {
            return _getBounds(element);
          })
    );
  },
  _getSizeFunc = function _getSizeFunc(scroller, isViewport, _ref) {
    var d = _ref.d,
      d2 = _ref.d2,
      a = _ref.a;
    return (a = _getProxyProp(scroller, "getBoundingClientRect"))
      ? function () {
          return a()[d];
        }
      : function () {
          return (
            (isViewport
              ? _getViewportDimension(d2)
              : scroller["client" + d2]) || 0
          );
        };
  },
  _getOffsetsFunc = function _getOffsetsFunc(element, isViewport) {
    return !isViewport || ~_proxies.indexOf(element)
      ? _getBoundsFunc(element)
      : function () {
          return _winOffsets;
        };
  },
  _maxScroll = function _maxScroll(element, _ref2) {
    var s = _ref2.s,
      d2 = _ref2.d2,
      d = _ref2.d,
      a = _ref2.a;
    return Math.max(
      0,
      (s = "scroll" + d2) && (a = _getProxyProp(element, s))
        ? a() - _getBoundsFunc(element)()[d]
        : _isViewport(element)
        ? (_docEl[s] || _body[s]) - _getViewportDimension(d2)
        : element[s] - element["offset" + d2]
    );
  },
  _iterateAutoRefresh = function _iterateAutoRefresh(func, events) {
    for (var i = 0; i < _autoRefresh.length; i += 3) {
      (!events || ~events.indexOf(_autoRefresh[i + 1])) &&
        func(_autoRefresh[i], _autoRefresh[i + 1], _autoRefresh[i + 2]);
    }
  },
  _isString = function _isString(value) {
    return typeof value === "string";
  },
  _isFunction = function _isFunction(value) {
    return typeof value === "function";
  },
  _isNumber = function _isNumber(value) {
    return typeof value === "number";
  },
  _isObject = function _isObject(value) {
    return typeof value === "object";
  },
  _endAnimation = function _endAnimation(animation, reversed, pause) {
    return (
      animation &&
      animation.progress(reversed ? 0 : 1) &&
      pause &&
      animation.pause()
    );
  },
  _callback = function _callback(self, func) {
    if (self.enabled) {
      var result = self._ctx
        ? self._ctx.add(function () {
            return func(self);
          })
        : func(self);
      result && result.totalTime && (self.callbackAnimation = result);
    }
  },
  _abs = Math.abs,
  _left = "left",
  _top = "top",
  _right = "right",
  _bottom = "bottom",
  _width = "width",
  _height = "height",
  _Right = "Right",
  _Left = "Left",
  _Top = "Top",
  _Bottom = "Bottom",
  _padding = "padding",
  _margin = "margin",
  _Width = "Width",
  _Height = "Height",
  _px = "px",
  _getComputedStyle = function _getComputedStyle(element) {
    return _win.getComputedStyle(element);
  },
  _makePositionable = function _makePositionable(element) {
    // if the element already has position: absolute or fixed, leave that, otherwise make it position: relative
    var position = _getComputedStyle(element).position;

    element.style.position =
      position === "absolute" || position === "fixed" ? position : "relative";
  },
  _setDefaults = function _setDefaults(obj, defaults) {
    for (var p in defaults) {
      p in obj || (obj[p] = defaults[p]);
    }

    return obj;
  },
  _getBounds = function _getBounds(element, withoutTransforms) {
    var tween =
        withoutTransforms &&
        _getComputedStyle(element)[_transformProp] !==
          "matrix(1, 0, 0, 1, 0, 0)" &&
        gsap
          .to(element, {
            x: 0,
            y: 0,
            xPercent: 0,
            yPercent: 0,
            rotation: 0,
            rotationX: 0,
            rotationY: 0,
            scale: 1,
            skewX: 0,
            skewY: 0,
          })
          .progress(1),
      bounds = element.getBoundingClientRect();
    tween && tween.progress(0).kill();
    return bounds;
  },
  _getSize = function _getSize(element, _ref3) {
    var d2 = _ref3.d2;
    return element["offset" + d2] || element["client" + d2] || 0;
  },
  _getLabelRatioArray = function _getLabelRatioArray(timeline) {
    var a = [],
      labels = timeline.labels,
      duration = timeline.duration(),
      p;

    for (p in labels) {
      a.push(labels[p] / duration);
    }

    return a;
  },
  _getClosestLabel = function _getClosestLabel(animation) {
    return function (value) {
      return gsap.utils.snap(_getLabelRatioArray(animation), value);
    };
  },
  _snapDirectional = function _snapDirectional(snapIncrementOrArray) {
    var snap = gsap.utils.snap(snapIncrementOrArray),
      a =
        Array.isArray(snapIncrementOrArray) &&
        snapIncrementOrArray.slice(0).sort(function (a, b) {
          return a - b;
        });
    return a
      ? function (value, direction, threshold) {
          if (threshold === void 0) {
            threshold = 1e-3;
          }

          var i;

          if (!direction) {
            return snap(value);
          }

          if (direction > 0) {
            value -= threshold; // to avoid rounding errors. If we're too strict, it might snap forward, then immediately again, and again.

            for (i = 0; i < a.length; i++) {
              if (a[i] >= value) {
                return a[i];
              }
            }

            return a[i - 1];
          } else {
            i = a.length;
            value += threshold;

            while (i--) {
              if (a[i] <= value) {
                return a[i];
              }
            }
          }

          return a[0];
        }
      : function (value, direction, threshold) {
          if (threshold === void 0) {
            threshold = 1e-3;
          }

          var snapped = snap(value);
          return !direction ||
            Math.abs(snapped - value) < threshold ||
            snapped - value < 0 === direction < 0
            ? snapped
            : snap(
                direction < 0
                  ? value - snapIncrementOrArray
                  : value + snapIncrementOrArray
              );
        };
  },
  _getLabelAtDirection = function _getLabelAtDirection(timeline) {
    return function (value, st) {
      return _snapDirectional(_getLabelRatioArray(timeline))(
        value,
        st.direction
      );
    };
  },
  _multiListener = function _multiListener(func, element, types, callback) {
    return types.split(",").forEach(function (type) {
      return func(element, type, callback);
    });
  },
  _addListener = function _addListener(
    element,
    type,
    func,
    nonPassive,
    capture
  ) {
    return element.addEventListener(type, func, {
      passive: !nonPassive,
      capture: !!capture,
    });
  },
  _removeListener = function _removeListener(element, type, func, capture) {
    return element.removeEventListener(type, func, !!capture);
  },
  _wheelListener = function _wheelListener(func, el, scrollFunc) {
    scrollFunc = scrollFunc && scrollFunc.wheelHandler;

    if (scrollFunc) {
      func(el, "wheel", scrollFunc);
      func(el, "touchmove", scrollFunc);
    }
  },
  _markerDefaults = {
    startColor: "green",
    endColor: "red",
    indent: 0,
    fontSize: "16px",
    fontWeight: "normal",
  },
  _defaults = {
    toggleActions: "play",
    anticipatePin: 0,
  },
  _keywords = {
    top: 0,
    left: 0,
    center: 0.5,
    bottom: 1,
    right: 1,
  },
  _offsetToPx = function _offsetToPx(value, size) {
    if (_isString(value)) {
      var eqIndex = value.indexOf("="),
        relative = ~eqIndex
          ? +(value.charAt(eqIndex - 1) + 1) *
            parseFloat(value.substr(eqIndex + 1))
          : 0;

      if (~eqIndex) {
        value.indexOf("%") > eqIndex && (relative *= size / 100);
        value = value.substr(0, eqIndex - 1);
      }

      value =
        relative +
        (value in _keywords
          ? _keywords[value] * size
          : ~value.indexOf("%")
          ? (parseFloat(value) * size) / 100
          : parseFloat(value) || 0);
    }

    return value;
  },
  _createMarker = function _createMarker(
    type,
    name,
    container,
    direction,
    _ref4,
    offset,
    matchWidthEl,
    containerAnimation
  ) {
    var startColor = _ref4.startColor,
      endColor = _ref4.endColor,
      fontSize = _ref4.fontSize,
      indent = _ref4.indent,
      fontWeight = _ref4.fontWeight;

    var e = _doc.createElement("div"),
      useFixedPosition =
        _isViewport(container) ||
        _getProxyProp(container, "pinType") === "fixed",
      isScroller = type.indexOf("scroller") !== -1,
      parent = useFixedPosition ? _body : container,
      isStart = type.indexOf("start") !== -1,
      color = isStart ? startColor : endColor,
      css =
        "border-color:" +
        color +
        ";font-size:" +
        fontSize +
        ";color:" +
        color +
        ";font-weight:" +
        fontWeight +
        ";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";

    css +=
      "position:" +
      ((isScroller || containerAnimation) && useFixedPosition
        ? "fixed;"
        : "absolute;");
    (isScroller || containerAnimation || !useFixedPosition) &&
      (css +=
        (direction === _vertical ? _right : _bottom) +
        ":" +
        (offset + parseFloat(indent)) +
        "px;");
    matchWidthEl &&
      (css +=
        "box-sizing:border-box;text-align:left;width:" +
        matchWidthEl.offsetWidth +
        "px;");
    e._isStart = isStart;
    e.setAttribute(
      "class",
      "gsap-marker-" + type + (name ? " marker-" + name : "")
    );
    e.style.cssText = css;
    e.innerText = name || name === 0 ? type + "-" + name : type;
    parent.children[0]
      ? parent.insertBefore(e, parent.children[0])
      : parent.appendChild(e);
    e._offset = e["offset" + direction.op.d2];

    _positionMarker(e, 0, direction, isStart);

    return e;
  },
  _positionMarker = function _positionMarker(
    marker,
    start,
    direction,
    flipped
  ) {
    var vars = {
        display: "block",
      },
      side = direction[flipped ? "os2" : "p2"],
      oppositeSide = direction[flipped ? "p2" : "os2"];
    marker._isFlipped = flipped;
    vars[direction.a + "Percent"] = flipped ? -100 : 0;
    vars[direction.a] = flipped ? "1px" : 0;
    vars["border" + side + _Width] = 1;
    vars["border" + oppositeSide + _Width] = 0;
    vars[direction.p] = start + "px";
    gsap.set(marker, vars);
  },
  _triggers = [],
  _ids = {},
  _rafID,
  _sync = function _sync() {
    return (
      _getTime() - _lastScrollTime > 34 &&
      (_rafID || (_rafID = requestAnimationFrame(_updateAll)))
    );
  },
  _onScroll = function _onScroll() {
    // previously, we tried to optimize performance by batching/deferring to the next requestAnimationFrame(), but discovered that Safari has a few bugs that make this unworkable (especially on iOS). See https://codepen.io/GreenSock/pen/16c435b12ef09c38125204818e7b45fc?editors=0010 and https://codepen.io/GreenSock/pen/JjOxYpQ/3dd65ccec5a60f1d862c355d84d14562?editors=0010 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503?editors=0010
    if (
      !_normalizer ||
      !_normalizer.isPressed ||
      _normalizer.startX > _body.clientWidth
    ) {
      // if the user is dragging the scrollbar, allow it.
      _scrollers.cache++;

      if (_normalizer) {
        _rafID || (_rafID = requestAnimationFrame(_updateAll));
      } else {
        _updateAll(); // Safari in particular (on desktop) NEEDS the immediate update rather than waiting for a requestAnimationFrame() whereas iOS seems to benefit from waiting for the requestAnimationFrame() tick, at least when normalizing. See https://codepen.io/GreenSock/pen/qBYozqO?editors=0110
      }

      _lastScrollTime || _dispatch("scrollStart");
      _lastScrollTime = _getTime();
    }
  },
  _setBaseDimensions = function _setBaseDimensions() {
    _baseScreenWidth = _win.innerWidth;
    _baseScreenHeight = _win.innerHeight;
  },
  _onResize = function _onResize(force) {
    _scrollers.cache++;
    (force === true ||
      (!_refreshing &&
        !_ignoreResize &&
        !_doc.fullscreenElement &&
        !_doc.webkitFullscreenElement &&
        (!_ignoreMobileResize ||
          _baseScreenWidth !== _win.innerWidth ||
          Math.abs(_win.innerHeight - _baseScreenHeight) >
            _win.innerHeight * 0.25))) &&
      _resizeDelay.restart(true);
  },
  // ignore resizes triggered by refresh()
  _listeners = {},
  _emptyArray = [],
  _softRefresh = function _softRefresh() {
    return (
      _removeListener(ScrollTrigger, "scrollEnd", _softRefresh) ||
      _refreshAll(true)
    );
  },
  _dispatch = function _dispatch(type) {
    return (
      (_listeners[type] &&
        _listeners[type].map(function (f) {
          return f();
        })) ||
      _emptyArray
    );
  },
  _savedStyles = [],
  // when ScrollTrigger.saveStyles() is called, the inline styles are recorded in this Array in a sequential format like [element, cssText, gsCache, media]. This keeps it very memory-efficient and fast to iterate through.
  _revertRecorded = function _revertRecorded(media) {
    for (var i = 0; i < _savedStyles.length; i += 5) {
      if (
        !media ||
        (_savedStyles[i + 4] && _savedStyles[i + 4].query === media)
      ) {
        _savedStyles[i].style.cssText = _savedStyles[i + 1];
        _savedStyles[i].getBBox &&
          _savedStyles[i].setAttribute("transform", _savedStyles[i + 2] || "");
        _savedStyles[i + 3].uncache = 1;
      }
    }
  },
  _revertAll = function _revertAll(kill, media) {
    var trigger;

    for (_i = 0; _i < _triggers.length; _i++) {
      trigger = _triggers[_i];

      if (trigger && (!media || trigger._ctx === media)) {
        if (kill) {
          trigger.kill(1);
        } else {
          trigger.revert(true, true);
        }
      }
    }

    _isReverted = true;
    media && _revertRecorded(media);
    media || _dispatch("revert");
  },
  _clearScrollMemory = function _clearScrollMemory(scrollRestoration, force) {
    // zero-out all the recorded scroll positions. Don't use _triggers because if, for example, .matchMedia() is used to create some ScrollTriggers and then the user resizes and it removes ALL ScrollTriggers, and then go back to a size where there are ScrollTriggers, it would have kept the position(s) saved from the initial state.
    _scrollers.cache++;
    (force || !_refreshingAll) &&
      _scrollers.forEach(function (obj) {
        return _isFunction(obj) && obj.cacheID++ && (obj.rec = 0);
      });
    _isString(scrollRestoration) &&
      (_win.history.scrollRestoration = _scrollRestoration = scrollRestoration);
  },
  _refreshingAll,
  _refreshID = 0,
  _queueRefreshID,
  _queueRefreshAll = function _queueRefreshAll() {
    // we don't want to call _refreshAll() every time we create a new ScrollTrigger (for performance reasons) - it's better to batch them. Some frameworks dynamically load content and we can't rely on the window's "load" or "DOMContentLoaded" events to trigger it.
    if (_queueRefreshID !== _refreshID) {
      var id = (_queueRefreshID = _refreshID);
      requestAnimationFrame(function () {
        return id === _refreshID && _refreshAll(true);
      });
    }
  },
  _refresh100vh = function _refresh100vh() {
    _body.appendChild(_div100vh);

    _100vh = (!_normalizer && _div100vh.offsetHeight) || _win.innerHeight;

    _body.removeChild(_div100vh);
  },
  _hideAllMarkers = function _hideAllMarkers(hide) {
    return _toArray(
      ".gsap-marker-start, .gsap-marker-end, .gsap-marker-scroller-start, .gsap-marker-scroller-end"
    ).forEach(function (el) {
      return (el.style.display = hide ? "none" : "block");
    });
  },
  _refreshAll = function _refreshAll(force, skipRevert) {
    _docEl = _doc.documentElement; // some frameworks like Astro may cache the <body> and replace it during routing, so we'll just re-record the _docEl and _body for safety (otherwise, the markers may not get added properly).

    _body = _doc.body;
    _root = [_win, _doc, _docEl, _body];

    if (_lastScrollTime && !force && !_isReverted) {
      _addListener(ScrollTrigger, "scrollEnd", _softRefresh);

      return;
    }

    _refresh100vh();

    _refreshingAll = ScrollTrigger.isRefreshing = true;

    _scrollers.forEach(function (obj) {
      return _isFunction(obj) && ++obj.cacheID && (obj.rec = obj());
    }); // force the clearing of the cache because some browsers take a little while to dispatch the "scroll" event and the user may have changed the scroll position and then called ScrollTrigger.refresh() right away

    var refreshInits = _dispatch("refreshInit");

    _sort && ScrollTrigger.sort();
    skipRevert || _revertAll();

    _scrollers.forEach(function (obj) {
      if (_isFunction(obj)) {
        obj.smooth && (obj.target.style.scrollBehavior = "auto"); // smooth scrolling interferes

        obj(0);
      }
    });

    _triggers.slice(0).forEach(function (t) {
      return t.refresh();
    }); // don't loop with _i because during a refresh() someone could call ScrollTrigger.update() which would iterate through _i resulting in a skip.

    _isReverted = false;

    _triggers.forEach(function (t) {
      // nested pins (pinnedContainer) with pinSpacing may expand the container, so we must accommodate that here.
      if (t._subPinOffset && t.pin) {
        var prop = t.vars.horizontal ? "offsetWidth" : "offsetHeight",
          original = t.pin[prop];
        t.revert(true, 1);
        t.adjustPinSpacing(t.pin[prop] - original);
        t.refresh();
      }
    });

    _clampingMax = 1; // pinSpacing might be propping a page open, thus when we .setPositions() to clamp a ScrollTrigger's end we should leave the pinSpacing alone. That's what this flag is for.

    _hideAllMarkers(true);

    _triggers.forEach(function (t) {
      // the scroller's max scroll position may change after all the ScrollTriggers refreshed (like pinning could push it down), so we need to loop back and correct any with end: "max". Same for anything with a clamped end
      var max = _maxScroll(t.scroller, t._dir),
        endClamp = t.vars.end === "max" || (t._endClamp && t.end > max),
        startClamp = t._startClamp && t.start >= max;

      (endClamp || startClamp) &&
        t.setPositions(
          startClamp ? max - 1 : t.start,
          endClamp ? Math.max(startClamp ? max : t.start + 1, max) : t.end,
          true
        );
    });

    _hideAllMarkers(false);

    _clampingMax = 0;
    refreshInits.forEach(function (result) {
      return result && result.render && result.render(-1);
    }); // if the onRefreshInit() returns an animation (typically a gsap.set()), revert it. This makes it easy to put things in a certain spot before refreshing for measurement purposes, and then put things back.

    _scrollers.forEach(function (obj) {
      if (_isFunction(obj)) {
        obj.smooth &&
          requestAnimationFrame(function () {
            return (obj.target.style.scrollBehavior = "smooth");
          });
        obj.rec && obj(obj.rec);
      }
    });

    _clearScrollMemory(_scrollRestoration, 1);

    _resizeDelay.pause();

    _refreshID++;
    _refreshingAll = 2;

    _updateAll(2);

    _triggers.forEach(function (t) {
      return _isFunction(t.vars.onRefresh) && t.vars.onRefresh(t);
    });

    _refreshingAll = ScrollTrigger.isRefreshing = false;

    _dispatch("refresh");
  },
  _lastScroll = 0,
  _direction = 1,
  _primary,
  _updateAll = function _updateAll(force) {
    if (force === 2 || (!_refreshingAll && !_isReverted)) {
      // _isReverted could be true if, for example, a matchMedia() is in the process of executing. We don't want to update during the time everything is reverted.
      ScrollTrigger.isUpdating = true;
      _primary && _primary.update(0); // ScrollSmoother uses refreshPriority -9999 to become the primary that gets updated before all others because it affects the scroll position.

      var l = _triggers.length,
        time = _getTime(),
        recordVelocity = time - _time1 >= 50,
        scroll = l && _triggers[0].scroll();

      _direction = _lastScroll > scroll ? -1 : 1;
      _refreshingAll || (_lastScroll = scroll);

      if (recordVelocity) {
        if (
          _lastScrollTime &&
          !_pointerIsDown &&
          time - _lastScrollTime > 200
        ) {
          _lastScrollTime = 0;

          _dispatch("scrollEnd");
        }

        _time2 = _time1;
        _time1 = time;
      }

      if (_direction < 0) {
        _i = l;

        while (_i-- > 0) {
          _triggers[_i] && _triggers[_i].update(0, recordVelocity);
        }

        _direction = 1;
      } else {
        for (_i = 0; _i < l; _i++) {
          _triggers[_i] && _triggers[_i].update(0, recordVelocity);
        }
      }

      ScrollTrigger.isUpdating = false;
    }

    _rafID = 0;
  },
  _propNamesToCopy = [
    _left,
    _top,
    _bottom,
    _right,
    _margin + _Bottom,
    _margin + _Right,
    _margin + _Top,
    _margin + _Left,
    "display",
    "flexShrink",
    "float",
    "zIndex",
    "gridColumnStart",
    "gridColumnEnd",
    "gridRowStart",
    "gridRowEnd",
    "gridArea",
    "justifySelf",
    "alignSelf",
    "placeSelf",
    "order",
  ],
  _stateProps = _propNamesToCopy.concat([
    _width,
    _height,
    "boxSizing",
    "max" + _Width,
    "max" + _Height,
    "position",
    _margin,
    _padding,
    _padding + _Top,
    _padding + _Right,
    _padding + _Bottom,
    _padding + _Left,
  ]),
  _swapPinOut = function _swapPinOut(pin, spacer, state) {
    _setState(state);

    var cache = pin._gsap;

    if (cache.spacerIsNative) {
      _setState(cache.spacerState);
    } else if (pin._gsap.swappedIn) {
      var parent = spacer.parentNode;

      if (parent) {
        parent.insertBefore(pin, spacer);
        parent.removeChild(spacer);
      }
    }

    pin._gsap.swappedIn = false;
  },
  _swapPinIn = function _swapPinIn(pin, spacer, cs, spacerState) {
    if (!pin._gsap.swappedIn) {
      var i = _propNamesToCopy.length,
        spacerStyle = spacer.style,
        pinStyle = pin.style,
        p;

      while (i--) {
        p = _propNamesToCopy[i];
        spacerStyle[p] = cs[p];
      }

      spacerStyle.position =
        cs.position === "absolute" ? "absolute" : "relative";
      cs.display === "inline" && (spacerStyle.display = "inline-block");
      pinStyle[_bottom] = pinStyle[_right] = "auto";
      spacerStyle.flexBasis = cs.flexBasis || "auto";
      spacerStyle.overflow = "visible";
      spacerStyle.boxSizing = "border-box";
      spacerStyle[_width] = _getSize(pin, _horizontal) + _px;
      spacerStyle[_height] = _getSize(pin, _vertical) + _px;
      spacerStyle[_padding] =
        pinStyle[_margin] =
        pinStyle[_top] =
        pinStyle[_left] =
          "0";

      _setState(spacerState);

      pinStyle[_width] = pinStyle["max" + _Width] = cs[_width];
      pinStyle[_height] = pinStyle["max" + _Height] = cs[_height];
      pinStyle[_padding] = cs[_padding];

      if (pin.parentNode !== spacer) {
        pin.parentNode.insertBefore(spacer, pin);
        spacer.appendChild(pin);
      }

      pin._gsap.swappedIn = true;
    }
  },
  _capsExp = /([A-Z])/g,
  _setState = function _setState(state) {
    if (state) {
      var style = state.t.style,
        l = state.length,
        i = 0,
        p,
        value;
      (state.t._gsap || gsap.core.getCache(state.t)).uncache = 1; // otherwise transforms may be off

      for (; i < l; i += 2) {
        value = state[i + 1];
        p = state[i];

        if (value) {
          style[p] = value;
        } else if (style[p]) {
          style.removeProperty(p.replace(_capsExp, "-$1").toLowerCase());
        }
      }
    }
  },
  _getState = function _getState(element) {
    // returns an Array with alternating values like [property, value, property, value] and a "t" property pointing to the target (element). Makes it fast and cheap.
    var l = _stateProps.length,
      style = element.style,
      state = [],
      i = 0;

    for (; i < l; i++) {
      state.push(_stateProps[i], style[_stateProps[i]]);
    }

    state.t = element;
    return state;
  },
  _copyState = function _copyState(state, override, omitOffsets) {
    var result = [],
      l = state.length,
      i = omitOffsets ? 8 : 0,
      // skip top, left, right, bottom if omitOffsets is true
      p;

    for (; i < l; i += 2) {
      p = state[i];
      result.push(p, p in override ? override[p] : state[i + 1]);
    }

    result.t = state.t;
    return result;
  },
  _winOffsets = {
    left: 0,
    top: 0,
  },
  // // potential future feature (?) Allow users to calculate where a trigger hits (scroll position) like getScrollPosition("#id", "top bottom")
  // _getScrollPosition = (trigger, position, {scroller, containerAnimation, horizontal}) => {
  // 	scroller = _getTarget(scroller || _win);
  // 	let direction = horizontal ? _horizontal : _vertical,
  // 		isViewport = _isViewport(scroller);
  // 	_getSizeFunc(scroller, isViewport, direction);
  // 	return _parsePosition(position, _getTarget(trigger), _getSizeFunc(scroller, isViewport, direction)(), direction, _getScrollFunc(scroller, direction)(), 0, 0, 0, _getOffsetsFunc(scroller, isViewport)(), isViewport ? 0 : parseFloat(_getComputedStyle(scroller)["border" + direction.p2 + _Width]) || 0, 0, containerAnimation ? containerAnimation.duration() : _maxScroll(scroller), containerAnimation);
  // },
  _parsePosition = function _parsePosition(
    value,
    trigger,
    scrollerSize,
    direction,
    scroll,
    marker,
    markerScroller,
    self,
    scrollerBounds,
    borderWidth,
    useFixedPosition,
    scrollerMax,
    containerAnimation,
    clampZeroProp
  ) {
    _isFunction(value) && (value = value(self));

    if (_isString(value) && value.substr(0, 3) === "max") {
      value =
        scrollerMax +
        (value.charAt(4) === "="
          ? _offsetToPx("0" + value.substr(3), scrollerSize)
          : 0);
    }

    var time = containerAnimation ? containerAnimation.time() : 0,
      p1,
      p2,
      element;
    containerAnimation && containerAnimation.seek(0);
    isNaN(value) || (value = +value); // convert a string number like "45" to an actual number

    if (!_isNumber(value)) {
      _isFunction(trigger) && (trigger = trigger(self));
      var offsets = (value || "0").split(" "),
        bounds,
        localOffset,
        globalOffset,
        display;
      element = _getTarget(trigger, self) || _body;
      bounds = _getBounds(element) || {};

      if (
        (!bounds || (!bounds.left && !bounds.top)) &&
        _getComputedStyle(element).display === "none"
      ) {
        // if display is "none", it won't report getBoundingClientRect() properly
        display = element.style.display;
        element.style.display = "block";
        bounds = _getBounds(element);
        display
          ? (element.style.display = display)
          : element.style.removeProperty("display");
      }

      localOffset = _offsetToPx(offsets[0], bounds[direction.d]);
      globalOffset = _offsetToPx(offsets[1] || "0", scrollerSize);
      value =
        bounds[direction.p] -
        scrollerBounds[direction.p] -
        borderWidth +
        localOffset +
        scroll -
        globalOffset;
      markerScroller &&
        _positionMarker(
          markerScroller,
          globalOffset,
          direction,
          scrollerSize - globalOffset < 20 ||
            (markerScroller._isStart && globalOffset > 20)
        );
      scrollerSize -= scrollerSize - globalOffset; // adjust for the marker
    } else {
      containerAnimation &&
        (value = gsap.utils.mapRange(
          containerAnimation.scrollTrigger.start,
          containerAnimation.scrollTrigger.end,
          0,
          scrollerMax,
          value
        ));
      markerScroller &&
        _positionMarker(markerScroller, scrollerSize, direction, true);
    }

    if (clampZeroProp) {
      self[clampZeroProp] = value || -0.001;
      value < 0 && (value = 0);
    }

    if (marker) {
      var position = value + scrollerSize,
        isStart = marker._isStart;
      p1 = "scroll" + direction.d2;

      _positionMarker(
        marker,
        position,
        direction,
        (isStart && position > 20) ||
          (!isStart &&
            (useFixedPosition
              ? Math.max(_body[p1], _docEl[p1])
              : marker.parentNode[p1]) <=
              position + 1)
      );

      if (useFixedPosition) {
        scrollerBounds = _getBounds(markerScroller);
        useFixedPosition &&
          (marker.style[direction.op.p] =
            scrollerBounds[direction.op.p] -
            direction.op.m -
            marker._offset +
            _px);
      }
    }

    if (containerAnimation && element) {
      p1 = _getBounds(element);
      containerAnimation.seek(scrollerMax);
      p2 = _getBounds(element);
      containerAnimation._caScrollDist = p1[direction.p] - p2[direction.p];
      value = (value / containerAnimation._caScrollDist) * scrollerMax;
    }

    containerAnimation && containerAnimation.seek(time);
    return containerAnimation ? value : Math.round(value);
  },
  _prefixExp = /(webkit|moz|length|cssText|inset)/i,
  _reparent = function _reparent(element, parent, top, left) {
    if (element.parentNode !== parent) {
      var style = element.style,
        p,
        cs;

      if (parent === _body) {
        element._stOrig = style.cssText; // record original inline styles so we can revert them later

        cs = _getComputedStyle(element);

        for (p in cs) {
          // must copy all relevant styles to ensure that nothing changes visually when we reparent to the <body>. Skip the vendor prefixed ones.
          if (
            !+p &&
            !_prefixExp.test(p) &&
            cs[p] &&
            typeof style[p] === "string" &&
            p !== "0"
          ) {
            style[p] = cs[p];
          }
        }

        style.top = top;
        style.left = left;
      } else {
        style.cssText = element._stOrig;
      }

      gsap.core.getCache(element).uncache = 1;
      parent.appendChild(element);
    }
  },
  _interruptionTracker = function _interruptionTracker(
    getValueFunc,
    initialValue,
    onInterrupt
  ) {
    var last1 = initialValue,
      last2 = last1;
    return function (value) {
      var current = Math.round(getValueFunc()); // round because in some [very uncommon] Windows environments, scroll can get reported with decimals even though it was set without.

      if (
        current !== last1 &&
        current !== last2 &&
        Math.abs(current - last1) > 3 &&
        Math.abs(current - last2) > 3
      ) {
        // if the user scrolls, kill the tween. iOS Safari intermittently misreports the scroll position, it may be the most recently-set one or the one before that! When Safari is zoomed (CMD-+), it often misreports as 1 pixel off too! So if we set the scroll position to 125, for example, it'll actually report it as 124.
        value = current;
        onInterrupt && onInterrupt();
      }

      last2 = last1;
      last1 = Math.round(value);
      return last1;
    };
  },
  _shiftMarker = function _shiftMarker(marker, direction, value) {
    var vars = {};
    vars[direction.p] = "+=" + value;
    gsap.set(marker, vars);
  },
  // _mergeAnimations = animations => {
  // 	let tl = gsap.timeline({smoothChildTiming: true}).startTime(Math.min(...animations.map(a => a.globalTime(0))));
  // 	animations.forEach(a => {let time = a.totalTime(); tl.add(a); a.totalTime(time); });
  // 	tl.smoothChildTiming = false;
  // 	return tl;
  // },
  // returns a function that can be used to tween the scroll position in the direction provided, and when doing so it'll add a .tween property to the FUNCTION itself, and remove it when the tween completes or gets killed. This gives us a way to have multiple ScrollTriggers use a central function for any given scroller and see if there's a scroll tween running (which would affect if/how things get updated)
  _getTweenCreator = function _getTweenCreator(scroller, direction) {
    var getScroll = _getScrollFunc(scroller, direction),
      prop = "_scroll" + direction.p2,
      // add a tweenable property to the scroller that's a getter/setter function, like _scrollTop or _scrollLeft. This way, if someone does gsap.killTweensOf(scroller) it'll kill the scroll tween.
      getTween = function getTween(
        scrollTo,
        vars,
        initialValue,
        change1,
        change2
      ) {
        var tween = getTween.tween,
          onComplete = vars.onComplete,
          modifiers = {};
        initialValue = initialValue || getScroll();

        var checkForInterruption = _interruptionTracker(
          getScroll,
          initialValue,
          function () {
            tween.kill();
            getTween.tween = 0;
          }
        );

        change2 = (change1 && change2) || 0; // if change1 is 0, we set that to the difference and ignore change2. Otherwise, there would be a compound effect.

        change1 = change1 || scrollTo - initialValue;
        tween && tween.kill();
        vars[prop] = scrollTo;
        vars.inherit = false;
        vars.modifiers = modifiers;

        modifiers[prop] = function () {
          return checkForInterruption(
            initialValue +
              change1 * tween.ratio +
              change2 * tween.ratio * tween.ratio
          );
        };

        vars.onUpdate = function () {
          _scrollers.cache++;
          getTween.tween && _updateAll(); // if it was interrupted/killed, like in a context.revert(), don't force an updateAll()
        };

        vars.onComplete = function () {
          getTween.tween = 0;
          onComplete && onComplete.call(tween);
        };

        tween = getTween.tween = gsap.to(scroller, vars);
        return tween;
      };

    scroller[prop] = getScroll;

    getScroll.wheelHandler = function () {
      return getTween.tween && getTween.tween.kill() && (getTween.tween = 0);
    };

    _addListener(scroller, "wheel", getScroll.wheelHandler); // Windows machines handle mousewheel scrolling in chunks (like "3 lines per scroll") meaning the typical strategy for cancelling the scroll isn't as sensitive. It's much more likely to match one of the previous 2 scroll event positions. So we kill any snapping as soon as there's a wheel event.

    ScrollTrigger.isTouch &&
      _addListener(scroller, "touchmove", getScroll.wheelHandler);
    return getTween;
  };

var ScrollTrigger = /*#__PURE__*/ (function () {
  function ScrollTrigger(vars, animation) {
    _coreInitted ||
      ScrollTrigger.register(gsap) ||
      console.warn("Please gsap.registerPlugin(ScrollTrigger)");

    _context(this);

    this.init(vars, animation);
  }

  var _proto = ScrollTrigger.prototype;

  _proto.init = function init(vars, animation) {
    this.progress = this.start = 0;
    this.vars && this.kill(true, true); // in case it's being initted again

    if (!_enabled) {
      this.update = this.refresh = this.kill = _passThrough;
      return;
    }

    vars = _setDefaults(
      _isString(vars) || _isNumber(vars) || vars.nodeType
        ? {
            trigger: vars,
          }
        : vars,
      _defaults
    );

    var _vars = vars,
      onUpdate = _vars.onUpdate,
      toggleClass = _vars.toggleClass,
      id = _vars.id,
      onToggle = _vars.onToggle,
      onRefresh = _vars.onRefresh,
      scrub = _vars.scrub,
      trigger = _vars.trigger,
      pin = _vars.pin,
      pinSpacing = _vars.pinSpacing,
      invalidateOnRefresh = _vars.invalidateOnRefresh,
      anticipatePin = _vars.anticipatePin,
      onScrubComplete = _vars.onScrubComplete,
      onSnapComplete = _vars.onSnapComplete,
      once = _vars.once,
      snap = _vars.snap,
      pinReparent = _vars.pinReparent,
      pinSpacer = _vars.pinSpacer,
      containerAnimation = _vars.containerAnimation,
      fastScrollEnd = _vars.fastScrollEnd,
      preventOverlaps = _vars.preventOverlaps,
      direction =
        vars.horizontal ||
        (vars.containerAnimation && vars.horizontal !== false)
          ? _horizontal
          : _vertical,
      isToggle = !scrub && scrub !== 0,
      scroller = _getTarget(vars.scroller || _win),
      scrollerCache = gsap.core.getCache(scroller),
      isViewport = _isViewport(scroller),
      useFixedPosition =
        ("pinType" in vars
          ? vars.pinType
          : _getProxyProp(scroller, "pinType") || (isViewport && "fixed")) ===
        "fixed",
      callbacks = [
        vars.onEnter,
        vars.onLeave,
        vars.onEnterBack,
        vars.onLeaveBack,
      ],
      toggleActions = isToggle && vars.toggleActions.split(" "),
      markers = "markers" in vars ? vars.markers : _defaults.markers,
      borderWidth = isViewport
        ? 0
        : parseFloat(
            _getComputedStyle(scroller)["border" + direction.p2 + _Width]
          ) || 0,
      self = this,
      onRefreshInit =
        vars.onRefreshInit &&
        function () {
          return vars.onRefreshInit(self);
        },
      getScrollerSize = _getSizeFunc(scroller, isViewport, direction),
      getScrollerOffsets = _getOffsetsFunc(scroller, isViewport),
      lastSnap = 0,
      lastRefresh = 0,
      prevProgress = 0,
      scrollFunc = _getScrollFunc(scroller, direction),
      tweenTo,
      pinCache,
      snapFunc,
      scroll1,
      scroll2,
      start,
      end,
      markerStart,
      markerEnd,
      markerStartTrigger,
      markerEndTrigger,
      markerVars,
      executingOnRefresh,
      change,
      pinOriginalState,
      pinActiveState,
      pinState,
      spacer,
      offset,
      pinGetter,
      pinSetter,
      pinStart,
      pinChange,
      spacingStart,
      spacerState,
      markerStartSetter,
      pinMoves,
      markerEndSetter,
      cs,
      snap1,
      snap2,
      scrubTween,
      scrubSmooth,
      snapDurClamp,
      snapDelayedCall,
      prevScroll,
      prevAnimProgress,
      caMarkerSetter,
      customRevertReturn; // for the sake of efficiency, _startClamp/_endClamp serve like a truthy value indicating that clamping was enabled on the start/end, and ALSO store the actual pre-clamped numeric value. We tap into that in ScrollSmoother for speed effects. So for example, if start="clamp(top bottom)" results in a start of -100 naturally, it would get clamped to 0 but -100 would be stored in _startClamp.

    self._startClamp = self._endClamp = false;
    self._dir = direction;
    anticipatePin *= 45;
    self.scroller = scroller;
    self.scroll = containerAnimation
      ? containerAnimation.time.bind(containerAnimation)
      : scrollFunc;
    scroll1 = scrollFunc();
    self.vars = vars;
    animation = animation || vars.animation;

    if ("refreshPriority" in vars) {
      _sort = 1;
      vars.refreshPriority === -9999 && (_primary = self); // used by ScrollSmoother
    }

    scrollerCache.tweenScroll = scrollerCache.tweenScroll || {
      top: _getTweenCreator(scroller, _vertical),
      left: _getTweenCreator(scroller, _horizontal),
    };
    self.tweenTo = tweenTo = scrollerCache.tweenScroll[direction.p];

    self.scrubDuration = function (value) {
      scrubSmooth = _isNumber(value) && value;

      if (!scrubSmooth) {
        scrubTween && scrubTween.progress(1).kill();
        scrubTween = 0;
      } else {
        scrubTween
          ? scrubTween.duration(value)
          : (scrubTween = gsap.to(animation, {
              ease: "expo",
              totalProgress: "+=0",
              inherit: false,
              duration: scrubSmooth,
              paused: true,
              onComplete: function onComplete() {
                return onScrubComplete && onScrubComplete(self);
              },
            }));
      }
    };

    if (animation) {
      animation.vars.lazy = false;
      (animation._initted && !self.isReverted) ||
        (animation.vars.immediateRender !== false &&
          vars.immediateRender !== false &&
          animation.duration() &&
          animation.render(0, true, true)); // special case: if this ScrollTrigger gets re-initted, a from() tween with a stagger could get initted initially and then reverted on the re-init which means it'll need to get rendered again here to properly display things. Otherwise, See https://gsap.com/forums/topic/36777-scrollsmoother-splittext-nextjs/ and https://codepen.io/GreenSock/pen/eYPyPpd?editors=0010

      self.animation = animation.pause();
      animation.scrollTrigger = self;
      self.scrubDuration(scrub);
      snap1 = 0;
      id || (id = animation.vars.id);
    }

    if (snap) {
      // TODO: potential idea: use legitimate CSS scroll snapping by pushing invisible elements into the DOM that serve as snap positions, and toggle the document.scrollingElement.style.scrollSnapType onToggle. See https://codepen.io/GreenSock/pen/JjLrgWM for a quick proof of concept.
      if (!_isObject(snap) || snap.push) {
        snap = {
          snapTo: snap,
        };
      }

      "scrollBehavior" in _body.style &&
        gsap.set(isViewport ? [_body, _docEl] : scroller, {
          scrollBehavior: "auto",
        }); // smooth scrolling doesn't work with snap.

      _scrollers.forEach(function (o) {
        return (
          _isFunction(o) &&
          o.target ===
            (isViewport ? _doc.scrollingElement || _docEl : scroller) &&
          (o.smooth = false)
        );
      }); // note: set smooth to false on both the vertical and horizontal scroll getters/setters

      snapFunc = _isFunction(snap.snapTo)
        ? snap.snapTo
        : snap.snapTo === "labels"
        ? _getClosestLabel(animation)
        : snap.snapTo === "labelsDirectional"
        ? _getLabelAtDirection(animation)
        : snap.directional !== false
        ? function (value, st) {
            return _snapDirectional(snap.snapTo)(
              value,
              _getTime() - lastRefresh < 500 ? 0 : st.direction
            );
          }
        : gsap.utils.snap(snap.snapTo);
      snapDurClamp = snap.duration || {
        min: 0.1,
        max: 2,
      };
      snapDurClamp = _isObject(snapDurClamp)
        ? _clamp(snapDurClamp.min, snapDurClamp.max)
        : _clamp(snapDurClamp, snapDurClamp);
      snapDelayedCall = gsap
        .delayedCall(snap.delay || scrubSmooth / 2 || 0.1, function () {
          var scroll = scrollFunc(),
            refreshedRecently = _getTime() - lastRefresh < 500,
            tween = tweenTo.tween;

          if (
            (refreshedRecently || Math.abs(self.getVelocity()) < 10) &&
            !tween &&
            !_pointerIsDown &&
            lastSnap !== scroll
          ) {
            var progress = (scroll - start) / change,
              totalProgress =
                animation && !isToggle ? animation.totalProgress() : progress,
              velocity = refreshedRecently
                ? 0
                : ((totalProgress - snap2) / (_getTime() - _time2)) * 1000 || 0,
              change1 = gsap.utils.clamp(
                -progress,
                1 - progress,
                (_abs(velocity / 2) * velocity) / 0.185
              ),
              naturalEnd = progress + (snap.inertia === false ? 0 : change1),
              endValue,
              endScroll,
              _snap = snap,
              onStart = _snap.onStart,
              _onInterrupt = _snap.onInterrupt,
              _onComplete = _snap.onComplete;
            endValue = snapFunc(naturalEnd, self);
            _isNumber(endValue) || (endValue = naturalEnd); // in case the function didn't return a number, fall back to using the naturalEnd

            endScroll = Math.max(0, Math.round(start + endValue * change));

            if (scroll <= end && scroll >= start && endScroll !== scroll) {
              if (
                tween &&
                !tween._initted &&
                tween.data <= _abs(endScroll - scroll)
              ) {
                // there's an overlapping snap! So we must figure out which one is closer and let that tween live.
                return;
              }

              if (snap.inertia === false) {
                change1 = endValue - progress;
              }

              tweenTo(
                endScroll,
                {
                  duration: snapDurClamp(
                    _abs(
                      (Math.max(
                        _abs(naturalEnd - totalProgress),
                        _abs(endValue - totalProgress)
                      ) *
                        0.185) /
                        velocity /
                        0.05 || 0
                    )
                  ),
                  ease: snap.ease || "power3",
                  data: _abs(endScroll - scroll),
                  // record the distance so that if another snap tween occurs (conflict) we can prioritize the closest snap.
                  onInterrupt: function onInterrupt() {
                    return (
                      snapDelayedCall.restart(true) &&
                      _onInterrupt &&
                      _onInterrupt(self)
                    );
                  },
                  onComplete: function onComplete() {
                    self.update();
                    lastSnap = scrollFunc();

                    if (animation && !isToggle) {
                      // the resolution of the scrollbar is limited, so we should correct the scrubbed animation's playhead at the end to match EXACTLY where it was supposed to snap
                      scrubTween
                        ? scrubTween.resetTo(
                            "totalProgress",
                            endValue,
                            animation._tTime / animation._tDur
                          )
                        : animation.progress(endValue);
                    }

                    snap1 = snap2 =
                      animation && !isToggle
                        ? animation.totalProgress()
                        : self.progress;
                    onSnapComplete && onSnapComplete(self);
                    _onComplete && _onComplete(self);
                  },
                },
                scroll,
                change1 * change,
                endScroll - scroll - change1 * change
              );
              onStart && onStart(self, tweenTo.tween);
            }
          } else if (self.isActive && lastSnap !== scroll) {
            snapDelayedCall.restart(true);
          }
        })
        .pause();
    }

    id && (_ids[id] = self);
    trigger = self.trigger = _getTarget(trigger || (pin !== true && pin)); // if a trigger has some kind of scroll-related effect applied that could contaminate the "y" or "x" position (like a ScrollSmoother effect), we needed a way to temporarily revert it, so we use the stRevert property of the gsCache. It can return another function that we'll call at the end so it can return to its normal state.

    customRevertReturn = trigger && trigger._gsap && trigger._gsap.stRevert;
    customRevertReturn && (customRevertReturn = customRevertReturn(self));
    pin = pin === true ? trigger : _getTarget(pin);
    _isString(toggleClass) &&
      (toggleClass = {
        targets: trigger,
        className: toggleClass,
      });

    if (pin) {
      pinSpacing === false ||
        pinSpacing === _margin ||
        (pinSpacing =
          !pinSpacing &&
          pin.parentNode &&
          pin.parentNode.style &&
          _getComputedStyle(pin.parentNode).display === "flex"
            ? false
            : _padding); // if the parent is display: flex, don't apply pinSpacing by default. We should check that pin.parentNode is an element (not shadow dom window)

      self.pin = pin;
      pinCache = gsap.core.getCache(pin);

      if (!pinCache.spacer) {
        // record the spacer and pinOriginalState on the cache in case someone tries pinning the same element with MULTIPLE ScrollTriggers - we don't want to have multiple spacers or record the "original" pin state after it has already been affected by another ScrollTrigger.
        if (pinSpacer) {
          pinSpacer = _getTarget(pinSpacer);
          pinSpacer &&
            !pinSpacer.nodeType &&
            (pinSpacer = pinSpacer.current || pinSpacer.nativeElement); // for React & Angular

          pinCache.spacerIsNative = !!pinSpacer;
          pinSpacer && (pinCache.spacerState = _getState(pinSpacer));
        }

        pinCache.spacer = spacer = pinSpacer || _doc.createElement("div");
        spacer.classList.add("pin-spacer");
        id && spacer.classList.add("pin-spacer-" + id);
        pinCache.pinState = pinOriginalState = _getState(pin);
      } else {
        pinOriginalState = pinCache.pinState;
      }

      vars.force3D !== false &&
        gsap.set(pin, {
          force3D: true,
        });
      self.spacer = spacer = pinCache.spacer;
      cs = _getComputedStyle(pin);
      spacingStart = cs[pinSpacing + direction.os2];
      pinGetter = gsap.getProperty(pin);
      pinSetter = gsap.quickSetter(pin, direction.a, _px); // pin.firstChild && !_maxScroll(pin, direction) && (pin.style.overflow = "hidden"); // protects from collapsing margins, but can have unintended consequences as demonstrated here: https://codepen.io/GreenSock/pen/1e42c7a73bfa409d2cf1e184e7a4248d so it was removed in favor of just telling people to set up their CSS to avoid the collapsing margins (overflow: hidden | auto is just one option. Another is border-top: 1px solid transparent).

      _swapPinIn(pin, spacer, cs);

      pinState = _getState(pin);
    }

    if (markers) {
      markerVars = _isObject(markers)
        ? _setDefaults(markers, _markerDefaults)
        : _markerDefaults;
      markerStartTrigger = _createMarker(
        "scroller-start",
        id,
        scroller,
        direction,
        markerVars,
        0
      );
      markerEndTrigger = _createMarker(
        "scroller-end",
        id,
        scroller,
        direction,
        markerVars,
        0,
        markerStartTrigger
      );
      offset = markerStartTrigger["offset" + direction.op.d2];

      var content = _getTarget(_getProxyProp(scroller, "content") || scroller);

      markerStart = this.markerStart = _createMarker(
        "start",
        id,
        content,
        direction,
        markerVars,
        offset,
        0,
        containerAnimation
      );
      markerEnd = this.markerEnd = _createMarker(
        "end",
        id,
        content,
        direction,
        markerVars,
        offset,
        0,
        containerAnimation
      );
      containerAnimation &&
        (caMarkerSetter = gsap.quickSetter(
          [markerStart, markerEnd],
          direction.a,
          _px
        ));

      if (
        !useFixedPosition &&
        !(_proxies.length && _getProxyProp(scroller, "fixedMarkers") === true)
      ) {
        _makePositionable(isViewport ? _body : scroller);

        gsap.set([markerStartTrigger, markerEndTrigger], {
          force3D: true,
        });
        markerStartSetter = gsap.quickSetter(
          markerStartTrigger,
          direction.a,
          _px
        );
        markerEndSetter = gsap.quickSetter(markerEndTrigger, direction.a, _px);
      }
    }

    if (containerAnimation) {
      var oldOnUpdate = containerAnimation.vars.onUpdate,
        oldParams = containerAnimation.vars.onUpdateParams;
      containerAnimation.eventCallback("onUpdate", function () {
        self.update(0, 0, 1);
        oldOnUpdate && oldOnUpdate.apply(containerAnimation, oldParams || []);
      });
    }

    self.previous = function () {
      return _triggers[_triggers.indexOf(self) - 1];
    };

    self.next = function () {
      return _triggers[_triggers.indexOf(self) + 1];
    };

    self.revert = function (revert, temp) {
      if (!temp) {
        return self.kill(true);
      } // for compatibility with gsap.context() and gsap.matchMedia() which call revert()

      var r = revert !== false || !self.enabled,
        prevRefreshing = _refreshing;

      if (r !== self.isReverted) {
        if (r) {
          prevScroll = Math.max(scrollFunc(), self.scroll.rec || 0); // record the scroll so we can revert later (repositioning/pinning things can affect scroll position). In the static refresh() method, we first record all the scroll positions as a reference.

          prevProgress = self.progress;
          prevAnimProgress = animation && animation.progress();
        }

        markerStart &&
          [
            markerStart,
            markerEnd,
            markerStartTrigger,
            markerEndTrigger,
          ].forEach(function (m) {
            return (m.style.display = r ? "none" : "block");
          });

        if (r) {
          _refreshing = self;
          self.update(r); // make sure the pin is back in its original position so that all the measurements are correct. do this BEFORE swapping the pin out
        }

        if (pin && (!pinReparent || !self.isActive)) {
          if (r) {
            _swapPinOut(pin, spacer, pinOriginalState);
          } else {
            _swapPinIn(pin, spacer, _getComputedStyle(pin), spacerState);
          }
        }

        r || self.update(r); // when we're restoring, the update should run AFTER swapping the pin into its pin-spacer.

        _refreshing = prevRefreshing; // restore. We set it to true during the update() so that things fire properly in there.

        self.isReverted = r;
      }
    };

    self.refresh = function (soft, force, position, pinOffset) {
      // position is typically only defined if it's coming from setPositions() - it's a way to skip the normal parsing. pinOffset is also only from setPositions() and is mostly related to fancy stuff we need to do in ScrollSmoother with effects
      if ((_refreshing || !self.enabled) && !force) {
        return;
      }

      if (pin && soft && _lastScrollTime) {
        _addListener(ScrollTrigger, "scrollEnd", _softRefresh);

        return;
      }

      !_refreshingAll && onRefreshInit && onRefreshInit(self);
      _refreshing = self;

      if (tweenTo.tween && !position) {
        // we skip this if a position is passed in because typically that's from .setPositions() and it's best to allow in-progress snapping to continue.
        tweenTo.tween.kill();
        tweenTo.tween = 0;
      }

      scrubTween && scrubTween.pause();

      if (invalidateOnRefresh && animation) {
        animation
          .revert({
            kill: false,
          })
          .invalidate();
        animation.getChildren &&
          animation.getChildren(true, true, false).forEach(function (t) {
            return t.vars.immediateRender && t.render(0, true, true);
          }); // any from() or fromTo() tweens inside a timeline should render immediately (well, unless they have immediateRender: false)
      }

      self.isReverted || self.revert(true, true);
      self._subPinOffset = false; // we'll set this to true in the sub-pins if we find any

      var size = getScrollerSize(),
        scrollerBounds = getScrollerOffsets(),
        max = containerAnimation
          ? containerAnimation.duration()
          : _maxScroll(scroller, direction),
        isFirstRefresh = change <= 0.01 || !change,
        offset = 0,
        otherPinOffset = pinOffset || 0,
        parsedEnd = _isObject(position) ? position.end : vars.end,
        parsedEndTrigger = vars.endTrigger || trigger,
        parsedStart = _isObject(position)
          ? position.start
          : vars.start ||
            (vars.start === 0 || !trigger ? 0 : pin ? "0 0" : "0 100%"),
        pinnedContainer = (self.pinnedContainer =
          vars.pinnedContainer && _getTarget(vars.pinnedContainer, self)),
        triggerIndex = (trigger && Math.max(0, _triggers.indexOf(self))) || 0,
        i = triggerIndex,
        cs,
        bounds,
        scroll,
        isVertical,
        override,
        curTrigger,
        curPin,
        oppositeScroll,
        initted,
        revertedPins,
        forcedOverflow,
        markerStartOffset,
        markerEndOffset;

      if (markers && _isObject(position)) {
        // if we alter the start/end positions with .setPositions(), it generally feeds in absolute NUMBERS which don't convey information about where to line up the markers, so to keep it intuitive, we record how far the trigger positions shift after applying the new numbers and then offset by that much in the opposite direction. We do the same to the associated trigger markers too of course.
        markerStartOffset = gsap.getProperty(markerStartTrigger, direction.p);
        markerEndOffset = gsap.getProperty(markerEndTrigger, direction.p);
      }

      while (i-- > 0) {
        // user might try to pin the same element more than once, so we must find any prior triggers with the same pin, revert them, and determine how long they're pinning so that we can offset things appropriately. Make sure we revert from last to first so that things "rewind" properly.
        curTrigger = _triggers[i];
        curTrigger.end || curTrigger.refresh(0, 1) || (_refreshing = self); // if it's a timeline-based trigger that hasn't been fully initialized yet because it's waiting for 1 tick, just force the refresh() here, otherwise if it contains a pin that's supposed to affect other ScrollTriggers further down the page, they won't be adjusted properly.

        curPin = curTrigger.pin;

        if (
          curPin &&
          (curPin === trigger ||
            curPin === pin ||
            curPin === pinnedContainer) &&
          !curTrigger.isReverted
        ) {
          revertedPins || (revertedPins = []);
          revertedPins.unshift(curTrigger); // we'll revert from first to last to make sure things reach their end state properly

          curTrigger.revert(true, true);
        }

        if (curTrigger !== _triggers[i]) {
          // in case it got removed.
          triggerIndex--;
          i--;
        }
      }

      _isFunction(parsedStart) && (parsedStart = parsedStart(self));
      parsedStart = _parseClamp(parsedStart, "start", self);
      start =
        _parsePosition(
          parsedStart,
          trigger,
          size,
          direction,
          scrollFunc(),
          markerStart,
          markerStartTrigger,
          self,
          scrollerBounds,
          borderWidth,
          useFixedPosition,
          max,
          containerAnimation,
          self._startClamp && "_startClamp"
        ) || (pin ? -0.001 : 0);
      _isFunction(parsedEnd) && (parsedEnd = parsedEnd(self));

      if (_isString(parsedEnd) && !parsedEnd.indexOf("+=")) {
        if (~parsedEnd.indexOf(" ")) {
          parsedEnd =
            (_isString(parsedStart) ? parsedStart.split(" ")[0] : "") +
            parsedEnd;
        } else {
          offset = _offsetToPx(parsedEnd.substr(2), size);
          parsedEnd = _isString(parsedStart)
            ? parsedStart
            : (containerAnimation
                ? gsap.utils.mapRange(
                    0,
                    containerAnimation.duration(),
                    containerAnimation.scrollTrigger.start,
                    containerAnimation.scrollTrigger.end,
                    start
                  )
                : start) + offset; // _parsePosition won't factor in the offset if the start is a number, so do it here.

          parsedEndTrigger = trigger;
        }
      }

      parsedEnd = _parseClamp(parsedEnd, "end", self);
      end =
        Math.max(
          start,
          _parsePosition(
            parsedEnd || (parsedEndTrigger ? "100% 0" : max),
            parsedEndTrigger,
            size,
            direction,
            scrollFunc() + offset,
            markerEnd,
            markerEndTrigger,
            self,
            scrollerBounds,
            borderWidth,
            useFixedPosition,
            max,
            containerAnimation,
            self._endClamp && "_endClamp"
          )
        ) || -0.001;
      offset = 0;
      i = triggerIndex;

      while (i--) {
        curTrigger = _triggers[i];
        curPin = curTrigger.pin;

        if (
          curPin &&
          curTrigger.start - curTrigger._pinPush <= start &&
          !containerAnimation &&
          curTrigger.end > 0
        ) {
          cs =
            curTrigger.end -
            (self._startClamp
              ? Math.max(0, curTrigger.start)
              : curTrigger.start);

          if (
            ((curPin === trigger &&
              curTrigger.start - curTrigger._pinPush < start) ||
              curPin === pinnedContainer) &&
            isNaN(parsedStart)
          ) {
            // numeric start values shouldn't be offset at all - treat them as absolute
            offset += cs * (1 - curTrigger.progress);
          }

          curPin === pin && (otherPinOffset += cs);
        }
      }

      start += offset;
      end += offset;
      self._startClamp && (self._startClamp += offset);

      if (self._endClamp && !_refreshingAll) {
        self._endClamp = end || -0.001;
        end = Math.min(end, _maxScroll(scroller, direction));
      }

      change = end - start || ((start -= 0.01) && 0.001);

      if (isFirstRefresh) {
        // on the very first refresh(), the prevProgress couldn't have been accurate yet because the start/end were never calculated, so we set it here. Before 3.11.5, it could lead to an inaccurate scroll position restoration with snapping.
        prevProgress = gsap.utils.clamp(
          0,
          1,
          gsap.utils.normalize(start, end, prevScroll)
        );
      }

      self._pinPush = otherPinOffset;

      if (markerStart && offset) {
        // offset the markers if necessary
        cs = {};
        cs[direction.a] = "+=" + offset;
        pinnedContainer && (cs[direction.p] = "-=" + scrollFunc());
        gsap.set([markerStart, markerEnd], cs);
      }

      if (
        pin &&
        !(_clampingMax && self.end >= _maxScroll(scroller, direction))
      ) {
        cs = _getComputedStyle(pin);
        isVertical = direction === _vertical;
        scroll = scrollFunc(); // recalculate because the triggers can affect the scroll

        pinStart = parseFloat(pinGetter(direction.a)) + otherPinOffset;

        if (!max && end > 1) {
          // makes sure the scroller has a scrollbar, otherwise if something has width: 100%, for example, it would be too big (exclude the scrollbar). See https://gsap.com/forums/topic/25182-scrolltrigger-width-of-page-increase-where-markers-are-set-to-false/
          forcedOverflow = (
            isViewport ? _doc.scrollingElement || _docEl : scroller
          ).style;
          forcedOverflow = {
            style: forcedOverflow,
            value: forcedOverflow["overflow" + direction.a.toUpperCase()],
          };

          if (
            isViewport &&
            _getComputedStyle(_body)["overflow" + direction.a.toUpperCase()] !==
              "scroll"
          ) {
            // avoid an extra scrollbar if BOTH <html> and <body> have overflow set to "scroll"
            forcedOverflow.style["overflow" + direction.a.toUpperCase()] =
              "scroll";
          }
        }

        _swapPinIn(pin, spacer, cs);

        pinState = _getState(pin); // transforms will interfere with the top/left/right/bottom placement, so remove them temporarily. getBoundingClientRect() factors in transforms.

        bounds = _getBounds(pin, true);
        oppositeScroll =
          useFixedPosition &&
          _getScrollFunc(scroller, isVertical ? _horizontal : _vertical)();

        if (pinSpacing) {
          spacerState = [
            pinSpacing + direction.os2,
            change + otherPinOffset + _px,
          ];
          spacerState.t = spacer;
          i =
            pinSpacing === _padding
              ? _getSize(pin, direction) + change + otherPinOffset
              : 0;

          if (i) {
            spacerState.push(direction.d, i + _px); // for box-sizing: border-box (must include padding).

            spacer.style.flexBasis !== "auto" &&
              (spacer.style.flexBasis = i + _px);
          }

          _setState(spacerState);

          if (pinnedContainer) {
            // in ScrollTrigger.refresh(), we need to re-evaluate the pinContainer's size because this pinSpacing may stretch it out, but we can't just add the exact distance because depending on layout, it may not push things down or it may only do so partially.
            _triggers.forEach(function (t) {
              if (t.pin === pinnedContainer && t.vars.pinSpacing !== false) {
                t._subPinOffset = true;
              }
            });
          }

          useFixedPosition && scrollFunc(prevScroll);
        } else {
          i = _getSize(pin, direction);
          i &&
            spacer.style.flexBasis !== "auto" &&
            (spacer.style.flexBasis = i + _px);
        }

        if (useFixedPosition) {
          override = {
            top:
              bounds.top + (isVertical ? scroll - start : oppositeScroll) + _px,
            left:
              bounds.left +
              (isVertical ? oppositeScroll : scroll - start) +
              _px,
            boxSizing: "border-box",
            position: "fixed",
          };
          override[_width] = override["max" + _Width] =
            Math.ceil(bounds.width) + _px;
          override[_height] = override["max" + _Height] =
            Math.ceil(bounds.height) + _px;
          override[_margin] =
            override[_margin + _Top] =
            override[_margin + _Right] =
            override[_margin + _Bottom] =
            override[_margin + _Left] =
              "0";
          override[_padding] = cs[_padding];
          override[_padding + _Top] = cs[_padding + _Top];
          override[_padding + _Right] = cs[_padding + _Right];
          override[_padding + _Bottom] = cs[_padding + _Bottom];
          override[_padding + _Left] = cs[_padding + _Left];
          pinActiveState = _copyState(pinOriginalState, override, pinReparent);
          _refreshingAll && scrollFunc(0);
        }

        if (animation) {
          // the animation might be affecting the transform, so we must jump to the end, check the value, and compensate accordingly. Otherwise, when it becomes unpinned, the pinSetter() will get set to a value that doesn't include whatever the animation did.
          initted = animation._initted; // if not, we must invalidate() after this step, otherwise it could lock in starting values prematurely.

          _suppressOverwrites(1);

          animation.render(animation.duration(), true, true);
          pinChange =
            pinGetter(direction.a) - pinStart + change + otherPinOffset;
          pinMoves = Math.abs(change - pinChange) > 1;
          useFixedPosition &&
            pinMoves &&
            pinActiveState.splice(pinActiveState.length - 2, 2); // transform is the last property/value set in the state Array. Since the animation is controlling that, we should omit it.

          animation.render(0, true, true);
          initted || animation.invalidate(true);
          animation.parent || animation.totalTime(animation.totalTime()); // if, for example, a toggleAction called play() and then refresh() happens and when we render(1) above, it would cause the animation to complete and get removed from its parent, so this makes sure it gets put back in.

          _suppressOverwrites(0);
        } else {
          pinChange = change;
        }

        forcedOverflow &&
          (forcedOverflow.value
            ? (forcedOverflow.style["overflow" + direction.a.toUpperCase()] =
                forcedOverflow.value)
            : forcedOverflow.style.removeProperty("overflow-" + direction.a));
      } else if (trigger && scrollFunc() && !containerAnimation) {
        // it may be INSIDE a pinned element, so walk up the tree and look for any elements with _pinOffset to compensate because anything with pinSpacing that's already scrolled would throw off the measurements in getBoundingClientRect()
        bounds = trigger.parentNode;

        while (bounds && bounds !== _body) {
          if (bounds._pinOffset) {
            start -= bounds._pinOffset;
            end -= bounds._pinOffset;
          }

          bounds = bounds.parentNode;
        }
      }

      revertedPins &&
        revertedPins.forEach(function (t) {
          return t.revert(false, true);
        });
      self.start = start;
      self.end = end;
      scroll1 = scroll2 = _refreshingAll ? prevScroll : scrollFunc(); // reset velocity

      if (!containerAnimation && !_refreshingAll) {
        scroll1 < prevScroll && scrollFunc(prevScroll);
        self.scroll.rec = 0;
      }

      self.revert(false, true);
      lastRefresh = _getTime();

      if (snapDelayedCall) {
        lastSnap = -1; // just so snapping gets re-enabled, clear out any recorded last value
        // self.isActive && scrollFunc(start + change * prevProgress); // previously this line was here to ensure that when snapping kicks in, it's from the previous progress but in some cases that's not desirable, like an all-page ScrollTrigger when new content gets added to the page, that'd totally change the progress.

        snapDelayedCall.restart(true);
      }

      _refreshing = 0;
      animation &&
        isToggle &&
        (animation._initted || prevAnimProgress) &&
        animation.progress() !== prevAnimProgress &&
        animation
          .progress(prevAnimProgress || 0, true)
          .render(animation.time(), true, true); // must force a re-render because if saveStyles() was used on the target(s), the styles could have been wiped out during the refresh().

      if (
        isFirstRefresh ||
        prevProgress !== self.progress ||
        containerAnimation ||
        invalidateOnRefresh ||
        (animation && !animation._initted)
      ) {
        // ensures that the direction is set properly (when refreshing, progress is set back to 0 initially, then back again to wherever it needs to be) and that callbacks are triggered.
        animation &&
          !isToggle &&
          (animation._initted ||
            prevProgress ||
            animation.vars.immediateRender !== false) &&
          animation.totalProgress(
            containerAnimation && start < -0.001 && !prevProgress
              ? gsap.utils.normalize(start, end, 0)
              : prevProgress,
            true
          ); // to avoid issues where animation callbacks like onStart aren't triggered.

        self.progress =
          isFirstRefresh || (scroll1 - start) / change === prevProgress
            ? 0
            : prevProgress;
      }

      pin &&
        pinSpacing &&
        (spacer._pinOffset = Math.round(self.progress * pinChange));
      scrubTween && scrubTween.invalidate();

      if (!isNaN(markerStartOffset)) {
        // numbers were passed in for the position which are absolute, so instead of just putting the markers at the very bottom of the viewport, we figure out how far they shifted down (it's safe to assume they were originally positioned in closer relation to the trigger element with values like "top", "center", a percentage or whatever, so we offset that much in the opposite direction to basically revert them to the relative position thy were at previously.
        markerStartOffset -= gsap.getProperty(markerStartTrigger, direction.p);
        markerEndOffset -= gsap.getProperty(markerEndTrigger, direction.p);

        _shiftMarker(markerStartTrigger, direction, markerStartOffset);

        _shiftMarker(
          markerStart,
          direction,
          markerStartOffset - (pinOffset || 0)
        );

        _shiftMarker(markerEndTrigger, direction, markerEndOffset);

        _shiftMarker(markerEnd, direction, markerEndOffset - (pinOffset || 0));
      }

      isFirstRefresh && !_refreshingAll && self.update(); // edge case - when you reload a page when it's already scrolled down, some browsers fire a "scroll" event before DOMContentLoaded, triggering an updateAll(). If we don't update the self.progress as part of refresh(), then when it happens next, it may record prevProgress as 0 when it really shouldn't, potentially causing a callback in an animation to fire again.

      if (onRefresh && !_refreshingAll && !executingOnRefresh) {
        // when refreshing all, we do extra work to correct pinnedContainer sizes and ensure things don't exceed the maxScroll, so we should do all the refreshes at the end after all that work so that the start/end values are corrected.
        executingOnRefresh = true;
        onRefresh(self);
        executingOnRefresh = false;
      }
    };

    self.getVelocity = function () {
      return ((scrollFunc() - scroll2) / (_getTime() - _time2)) * 1000 || 0;
    };

    self.endAnimation = function () {
      _endAnimation(self.callbackAnimation);

      if (animation) {
        scrubTween
          ? scrubTween.progress(1)
          : !animation.paused()
          ? _endAnimation(animation, animation.reversed())
          : isToggle || _endAnimation(animation, self.direction < 0, 1);
      }
    };

    self.labelToScroll = function (label) {
      return (
        (animation &&
          animation.labels &&
          (start || self.refresh() || start) +
            (animation.labels[label] / animation.duration()) * change) ||
        0
      );
    };

    self.getTrailing = function (name) {
      var i = _triggers.indexOf(self),
        a =
          self.direction > 0
            ? _triggers.slice(0, i).reverse()
            : _triggers.slice(i + 1);

      return (
        _isString(name)
          ? a.filter(function (t) {
              return t.vars.preventOverlaps === name;
            })
          : a
      ).filter(function (t) {
        return self.direction > 0 ? t.end <= start : t.start >= end;
      });
    };

    self.update = function (reset, recordVelocity, forceFake) {
      if (containerAnimation && !forceFake && !reset) {
        return;
      }

      var scroll = _refreshingAll === true ? prevScroll : self.scroll(),
        p = reset ? 0 : (scroll - start) / change,
        clipped = p < 0 ? 0 : p > 1 ? 1 : p || 0,
        prevProgress = self.progress,
        isActive,
        wasActive,
        toggleState,
        action,
        stateChanged,
        toggled,
        isAtMax,
        isTakingAction;

      if (recordVelocity) {
        scroll2 = scroll1;
        scroll1 = containerAnimation ? scrollFunc() : scroll;

        if (snap) {
          snap2 = snap1;
          snap1 = animation && !isToggle ? animation.totalProgress() : clipped;
        }
      } // anticipate the pinning a few ticks ahead of time based on velocity to avoid a visual glitch due to the fact that most browsers do scrolling on a separate thread (not synced with requestAnimationFrame).

      if (
        anticipatePin &&
        pin &&
        !_refreshing &&
        !_startup &&
        _lastScrollTime
      ) {
        if (
          !clipped &&
          start <
            scroll +
              ((scroll - scroll2) / (_getTime() - _time2)) * anticipatePin
        ) {
          clipped = 0.0001;
        } else if (
          clipped === 1 &&
          end >
            scroll +
              ((scroll - scroll2) / (_getTime() - _time2)) * anticipatePin
        ) {
          clipped = 0.9999;
        }
      }

      if (clipped !== prevProgress && self.enabled) {
        isActive = self.isActive = !!clipped && clipped < 1;
        wasActive = !!prevProgress && prevProgress < 1;
        toggled = isActive !== wasActive;
        stateChanged = toggled || !!clipped !== !!prevProgress; // could go from start all the way to end, thus it didn't toggle but it did change state in a sense (may need to fire a callback)

        self.direction = clipped > prevProgress ? 1 : -1;
        self.progress = clipped;

        if (stateChanged && !_refreshing) {
          toggleState =
            clipped && !prevProgress
              ? 0
              : clipped === 1
              ? 1
              : prevProgress === 1
              ? 2
              : 3; // 0 = enter, 1 = leave, 2 = enterBack, 3 = leaveBack (we prioritize the FIRST encounter, thus if you scroll really fast past the onEnter and onLeave in one tick, it'd prioritize onEnter.

          if (isToggle) {
            action =
              (!toggled &&
                toggleActions[toggleState + 1] !== "none" &&
                toggleActions[toggleState + 1]) ||
              toggleActions[toggleState]; // if it didn't toggle, that means it shot right past and since we prioritize the "enter" action, we should switch to the "leave" in this case (but only if one is defined)

            isTakingAction =
              animation &&
              (action === "complete" ||
                action === "reset" ||
                action in animation);
          }
        }

        preventOverlaps &&
          (toggled || isTakingAction) &&
          (isTakingAction || scrub || !animation) &&
          (_isFunction(preventOverlaps)
            ? preventOverlaps(self)
            : self.getTrailing(preventOverlaps).forEach(function (t) {
                return t.endAnimation();
              }));

        if (!isToggle) {
          if (scrubTween && !_refreshing && !_startup) {
            scrubTween._dp._time - scrubTween._start !== scrubTween._time &&
              scrubTween.render(scrubTween._dp._time - scrubTween._start); // if there's a scrub on both the container animation and this one (or a ScrollSmoother), the update order would cause this one not to have rendered yet, so it wouldn't make any progress before we .restart() it heading toward the new progress so it'd appear stuck thus we force a render here.

            if (scrubTween.resetTo) {
              scrubTween.resetTo(
                "totalProgress",
                clipped,
                animation._tTime / animation._tDur
              );
            } else {
              // legacy support (courtesy), before 3.10.0
              scrubTween.vars.totalProgress = clipped;
              scrubTween.invalidate().restart();
            }
          } else if (animation) {
            animation.totalProgress(
              clipped,
              !!(_refreshing && (lastRefresh || reset))
            );
          }
        }

        if (pin) {
          reset &&
            pinSpacing &&
            (spacer.style[pinSpacing + direction.os2] = spacingStart);

          if (!useFixedPosition) {
            pinSetter(_round(pinStart + pinChange * clipped));
          } else if (stateChanged) {
            isAtMax =
              !reset &&
              clipped > prevProgress &&
              end + 1 > scroll &&
              scroll + 1 >= _maxScroll(scroller, direction); // if it's at the VERY end of the page, don't switch away from position: fixed because it's pointless and it could cause a brief flash when the user scrolls back up (when it gets pinned again)

            if (pinReparent) {
              if (!reset && (isActive || isAtMax)) {
                var bounds = _getBounds(pin, true),
                  _offset = scroll - start;

                _reparent(
                  pin,
                  _body,
                  bounds.top + (direction === _vertical ? _offset : 0) + _px,
                  bounds.left + (direction === _vertical ? 0 : _offset) + _px
                );
              } else {
                _reparent(pin, spacer);
              }
            }

            _setState(isActive || isAtMax ? pinActiveState : pinState);

            (pinMoves && clipped < 1 && isActive) ||
              pinSetter(pinStart + (clipped === 1 && !isAtMax ? pinChange : 0));
          }
        }

        snap &&
          !tweenTo.tween &&
          !_refreshing &&
          !_startup &&
          snapDelayedCall.restart(true);
        toggleClass &&
          (toggled || (once && clipped && (clipped < 1 || !_limitCallbacks))) &&
          _toArray(toggleClass.targets).forEach(function (el) {
            return el.classList[isActive || once ? "add" : "remove"](
              toggleClass.className
            );
          }); // classes could affect positioning, so do it even if reset or refreshing is true.

        onUpdate && !isToggle && !reset && onUpdate(self);

        if (stateChanged && !_refreshing) {
          if (isToggle) {
            if (isTakingAction) {
              if (action === "complete") {
                animation.pause().totalProgress(1);
              } else if (action === "reset") {
                animation.restart(true).pause();
              } else if (action === "restart") {
                animation.restart(true);
              } else {
                animation[action]();
              }
            }

            onUpdate && onUpdate(self);
          }

          if (toggled || !_limitCallbacks) {
            // on startup, the page could be scrolled and we don't want to fire callbacks that didn't toggle. For example onEnter shouldn't fire if the ScrollTrigger isn't actually entered.
            onToggle && toggled && _callback(self, onToggle);
            callbacks[toggleState] && _callback(self, callbacks[toggleState]);
            once &&
              (clipped === 1
                ? self.kill(false, 1)
                : (callbacks[toggleState] = 0)); // a callback shouldn't be called again if once is true.

            if (!toggled) {
              // it's possible to go completely past, like from before the start to after the end (or vice-versa) in which case BOTH callbacks should be fired in that order
              toggleState = clipped === 1 ? 1 : 3;
              callbacks[toggleState] && _callback(self, callbacks[toggleState]);
            }
          }

          if (
            fastScrollEnd &&
            !isActive &&
            Math.abs(self.getVelocity()) >
              (_isNumber(fastScrollEnd) ? fastScrollEnd : 2500)
          ) {
            _endAnimation(self.callbackAnimation);

            scrubTween
              ? scrubTween.progress(1)
              : _endAnimation(
                  animation,
                  action === "reverse" ? 1 : !clipped,
                  1
                );
          }
        } else if (isToggle && onUpdate && !_refreshing) {
          onUpdate(self);
        }
      } // update absolutely-positioned markers (only if the scroller isn't the viewport)

      if (markerEndSetter) {
        var n = containerAnimation
          ? (scroll / containerAnimation.duration()) *
            (containerAnimation._caScrollDist || 0)
          : scroll;
        markerStartSetter(n + (markerStartTrigger._isFlipped ? 1 : 0));
        markerEndSetter(n);
      }

      caMarkerSetter &&
        caMarkerSetter(
          (-scroll / containerAnimation.duration()) *
            (containerAnimation._caScrollDist || 0)
        );
    };

    self.enable = function (reset, refresh) {
      if (!self.enabled) {
        self.enabled = true;

        _addListener(scroller, "resize", _onResize);

        isViewport || _addListener(scroller, "scroll", _onScroll);
        onRefreshInit &&
          _addListener(ScrollTrigger, "refreshInit", onRefreshInit);

        if (reset !== false) {
          self.progress = prevProgress = 0;
          scroll1 = scroll2 = lastSnap = scrollFunc();
        }

        refresh !== false && self.refresh();
      }
    };

    self.getTween = function (snap) {
      return snap && tweenTo ? tweenTo.tween : scrubTween;
    };

    self.setPositions = function (newStart, newEnd, keepClamp, pinOffset) {
      // doesn't persist after refresh()! Intended to be a way to override values that were set during refresh(), like you could set it in onRefresh()
      if (containerAnimation) {
        // convert ratios into scroll positions. Remember, start/end values on ScrollTriggers that have a containerAnimation refer to the time (in seconds), NOT scroll positions.
        var st = containerAnimation.scrollTrigger,
          duration = containerAnimation.duration(),
          _change = st.end - st.start;

        newStart = st.start + (_change * newStart) / duration;
        newEnd = st.start + (_change * newEnd) / duration;
      }

      self.refresh(
        false,
        false,
        {
          start: _keepClamp(newStart, keepClamp && !!self._startClamp),
          end: _keepClamp(newEnd, keepClamp && !!self._endClamp),
        },
        pinOffset
      );
      self.update();
    };

    self.adjustPinSpacing = function (amount) {
      if (spacerState && amount) {
        var i = spacerState.indexOf(direction.d) + 1;
        spacerState[i] = parseFloat(spacerState[i]) + amount + _px;
        spacerState[1] = parseFloat(spacerState[1]) + amount + _px;

        _setState(spacerState);
      }
    };

    self.disable = function (reset, allowAnimation) {
      if (self.enabled) {
        reset !== false && self.revert(true, true);
        self.enabled = self.isActive = false;
        allowAnimation || (scrubTween && scrubTween.pause());
        prevScroll = 0;
        pinCache && (pinCache.uncache = 1);
        onRefreshInit &&
          _removeListener(ScrollTrigger, "refreshInit", onRefreshInit);

        if (snapDelayedCall) {
          snapDelayedCall.pause();
          tweenTo.tween && tweenTo.tween.kill() && (tweenTo.tween = 0);
        }

        if (!isViewport) {
          var i = _triggers.length;

          while (i--) {
            if (_triggers[i].scroller === scroller && _triggers[i] !== self) {
              return; //don't remove the listeners if there are still other triggers referencing it.
            }
          }

          _removeListener(scroller, "resize", _onResize);

          isViewport || _removeListener(scroller, "scroll", _onScroll);
        }
      }
    };

    self.kill = function (revert, allowAnimation) {
      self.disable(revert, allowAnimation);
      scrubTween && !allowAnimation && scrubTween.kill();
      id && delete _ids[id];

      var i = _triggers.indexOf(self);

      i >= 0 && _triggers.splice(i, 1);
      i === _i && _direction > 0 && _i--; // if we're in the middle of a refresh() or update(), splicing would cause skips in the index, so adjust...
      // if no other ScrollTrigger instances of the same scroller are found, wipe out any recorded scroll position. Otherwise, in a single page application, for example, it could maintain scroll position when it really shouldn't.

      i = 0;

      _triggers.forEach(function (t) {
        return t.scroller === self.scroller && (i = 1);
      });

      i || _refreshingAll || (self.scroll.rec = 0);

      if (animation) {
        animation.scrollTrigger = null;
        revert &&
          animation.revert({
            kill: false,
          });
        allowAnimation || animation.kill();
      }

      markerStart &&
        [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(
          function (m) {
            return m.parentNode && m.parentNode.removeChild(m);
          }
        );
      _primary === self && (_primary = 0);

      if (pin) {
        pinCache && (pinCache.uncache = 1);
        i = 0;

        _triggers.forEach(function (t) {
          return t.pin === pin && i++;
        });

        i || (pinCache.spacer = 0); // if there aren't any more ScrollTriggers with the same pin, remove the spacer, otherwise it could be contaminated with old/stale values if the user re-creates a ScrollTrigger for the same element.
      }

      vars.onKill && vars.onKill(self);
    };

    _triggers.push(self);

    self.enable(false, false);
    customRevertReturn && customRevertReturn(self);

    if (animation && animation.add && !change) {
      // if the animation is a timeline, it may not have been populated yet, so it wouldn't render at the proper place on the first refresh(), thus we should schedule one for the next tick. If "change" is defined, we know it must be re-enabling, thus we can refresh() right away.
      var updateFunc = self.update; // some browsers may fire a scroll event BEFORE a tick elapses and/or the DOMContentLoaded fires. So there's a chance update() will be called BEFORE a refresh() has happened on a Timeline-attached ScrollTrigger which means the start/end won't be calculated yet. We don't want to add conditional logic inside the update() method (like check to see if end is defined and if not, force a refresh()) because that's a function that gets hit a LOT (performance). So we swap out the real update() method for this one that'll re-attach it the first time it gets called and of course forces a refresh().

      self.update = function () {
        self.update = updateFunc;
        _scrollers.cache++; // otherwise a cached scroll position may get used in the refresh() in a very rare scenario, like if ScrollTriggers are created inside a DOMContentLoaded event and the queued requestAnimationFrame() fires beforehand. See https://gsap.com/community/forums/topic/41267-scrolltrigger-breaks-on-refresh-when-using-domcontentloaded/

        start || end || self.refresh();
      };

      gsap.delayedCall(0.01, self.update);
      change = 0.01;
      start = end = 0;
    } else {
      self.refresh();
    }

    pin && _queueRefreshAll(); // pinning could affect the positions of other things, so make sure we queue a full refresh()
  };

  ScrollTrigger.register = function register(core) {
    if (!_coreInitted) {
      gsap = core || _getGSAP();
      _windowExists() && window.document && ScrollTrigger.enable();
      _coreInitted = _enabled;
    }

    return _coreInitted;
  };

  ScrollTrigger.defaults = function defaults(config) {
    if (config) {
      for (var p in config) {
        _defaults[p] = config[p];
      }
    }

    return _defaults;
  };

  ScrollTrigger.disable = function disable(reset, kill) {
    _enabled = 0;

    _triggers.forEach(function (trigger) {
      return trigger[kill ? "kill" : "disable"](reset);
    });

    _removeListener(_win, "wheel", _onScroll);

    _removeListener(_doc, "scroll", _onScroll);

    clearInterval(_syncInterval);

    _removeListener(_doc, "touchcancel", _passThrough);

    _removeListener(_body, "touchstart", _passThrough);

    _multiListener(
      _removeListener,
      _doc,
      "pointerdown,touchstart,mousedown",
      _pointerDownHandler
    );

    _multiListener(
      _removeListener,
      _doc,
      "pointerup,touchend,mouseup",
      _pointerUpHandler
    );

    _resizeDelay.kill();

    _iterateAutoRefresh(_removeListener);

    for (var i = 0; i < _scrollers.length; i += 3) {
      _wheelListener(_removeListener, _scrollers[i], _scrollers[i + 1]);

      _wheelListener(_removeListener, _scrollers[i], _scrollers[i + 2]);
    }
  };

  ScrollTrigger.enable = function enable() {
    _win = window;
    _doc = document;
    _docEl = _doc.documentElement;
    _body = _doc.body;

    if (gsap) {
      _toArray = gsap.utils.toArray;
      _clamp = gsap.utils.clamp;
      _context = gsap.core.context || _passThrough;
      _suppressOverwrites = gsap.core.suppressOverwrites || _passThrough;
      _scrollRestoration = _win.history.scrollRestoration || "auto";
      _lastScroll = _win.pageYOffset || 0;
      gsap.core.globals("ScrollTrigger", ScrollTrigger); // must register the global manually because in Internet Explorer, functions (classes) don't have a "name" property.

      if (_body) {
        _enabled = 1;
        _div100vh = document.createElement("div"); // to solve mobile browser address bar show/hide resizing, we shouldn't rely on window.innerHeight. Instead, use a <div> with its height set to 100vh and measure that since that's what the scrolling is based on anyway and it's not affected by address bar showing/hiding.

        _div100vh.style.height = "100vh";
        _div100vh.style.position = "absolute";

        _refresh100vh();

        _rafBugFix();

        Observer.register(gsap); // isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.

        ScrollTrigger.isTouch = Observer.isTouch;
        _fixIOSBug =
          Observer.isTouch &&
          /(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent); // since 2017, iOS has had a bug that causes event.clientX/Y to be inaccurate when a scroll occurs, thus we must alternate ignoring every other touchmove event to work around it. See https://bugs.webkit.org/show_bug.cgi?id=181954 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503

        _ignoreMobileResize = Observer.isTouch === 1;

        _addListener(_win, "wheel", _onScroll); // mostly for 3rd party smooth scrolling libraries.

        _root = [_win, _doc, _docEl, _body];

        if (gsap.matchMedia) {
          ScrollTrigger.matchMedia = function (vars) {
            var mm = gsap.matchMedia(),
              p;

            for (p in vars) {
              mm.add(p, vars[p]);
            }

            return mm;
          };

          gsap.addEventListener("matchMediaInit", function () {
            return _revertAll();
          });
          gsap.addEventListener("matchMediaRevert", function () {
            return _revertRecorded();
          });
          gsap.addEventListener("matchMedia", function () {
            _refreshAll(0, 1);

            _dispatch("matchMedia");
          });
          gsap.matchMedia().add("(orientation: portrait)", function () {
            // when orientation changes, we should take new base measurements for the ignoreMobileResize feature.
            _setBaseDimensions();

            return _setBaseDimensions;
          });
        } else {
          console.warn("Requires GSAP 3.11.0 or later");
        }

        _setBaseDimensions();

        _addListener(_doc, "scroll", _onScroll); // some browsers (like Chrome), the window stops dispatching scroll events on the window if you scroll really fast, but it's consistent on the document!

        var bodyHasStyle = _body.hasAttribute("style"),
          bodyStyle = _body.style,
          border = bodyStyle.borderTopStyle,
          AnimationProto = gsap.core.Animation.prototype,
          bounds,
          i;

        AnimationProto.revert ||
          Object.defineProperty(AnimationProto, "revert", {
            value: function value() {
              return this.time(-0.01, true);
            },
          }); // only for backwards compatibility (Animation.revert() was added after 3.10.4)

        bodyStyle.borderTopStyle = "solid"; // works around an issue where a margin of a child element could throw off the bounds of the _body, making it seem like there's a margin when there actually isn't. The border ensures that the bounds are accurate.

        bounds = _getBounds(_body);
        _vertical.m = Math.round(bounds.top + _vertical.sc()) || 0; // accommodate the offset of the <body> caused by margins and/or padding

        _horizontal.m = Math.round(bounds.left + _horizontal.sc()) || 0;
        border
          ? (bodyStyle.borderTopStyle = border)
          : bodyStyle.removeProperty("border-top-style");

        if (!bodyHasStyle) {
          // SSR frameworks like Next.js complain if this attribute gets added.
          _body.setAttribute("style", ""); // it's not enough to just removeAttribute() - we must first set it to empty, otherwise Next.js complains.

          _body.removeAttribute("style");
        } // TODO: (?) maybe move to leveraging the velocity mechanism in Observer and skip intervals.

        _syncInterval = setInterval(_sync, 250);
        gsap.delayedCall(0.5, function () {
          return (_startup = 0);
        });

        _addListener(_doc, "touchcancel", _passThrough); // some older Android devices intermittently stop dispatching "touchmove" events if we don't listen for "touchcancel" on the document.

        _addListener(_body, "touchstart", _passThrough); //works around Safari bug: https://gsap.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/

        _multiListener(
          _addListener,
          _doc,
          "pointerdown,touchstart,mousedown",
          _pointerDownHandler
        );

        _multiListener(
          _addListener,
          _doc,
          "pointerup,touchend,mouseup",
          _pointerUpHandler
        );

        _transformProp = gsap.utils.checkPrefix("transform");

        _stateProps.push(_transformProp);

        _coreInitted = _getTime();
        _resizeDelay = gsap.delayedCall(0.2, _refreshAll).pause();
        _autoRefresh = [
          _doc,
          "visibilitychange",
          function () {
            var w = _win.innerWidth,
              h = _win.innerHeight;

            if (_doc.hidden) {
              _prevWidth = w;
              _prevHeight = h;
            } else if (_prevWidth !== w || _prevHeight !== h) {
              _onResize();
            }
          },
          _doc,
          "DOMContentLoaded",
          _refreshAll,
          _win,
          "load",
          _refreshAll,
          _win,
          "resize",
          _onResize,
        ];

        _iterateAutoRefresh(_addListener);

        _triggers.forEach(function (trigger) {
          return trigger.enable(0, 1);
        });

        for (i = 0; i < _scrollers.length; i += 3) {
          _wheelListener(_removeListener, _scrollers[i], _scrollers[i + 1]);

          _wheelListener(_removeListener, _scrollers[i], _scrollers[i + 2]);
        }
      }
    }
  };

  ScrollTrigger.config = function config(vars) {
    "limitCallbacks" in vars && (_limitCallbacks = !!vars.limitCallbacks);
    var ms = vars.syncInterval;
    (ms && clearInterval(_syncInterval)) ||
      ((_syncInterval = ms) && setInterval(_sync, ms));
    "ignoreMobileResize" in vars &&
      (_ignoreMobileResize =
        ScrollTrigger.isTouch === 1 && vars.ignoreMobileResize);

    if ("autoRefreshEvents" in vars) {
      _iterateAutoRefresh(_removeListener) ||
        _iterateAutoRefresh(_addListener, vars.autoRefreshEvents || "none");
      _ignoreResize = (vars.autoRefreshEvents + "").indexOf("resize") === -1;
    }
  };

  ScrollTrigger.scrollerProxy = function scrollerProxy(target, vars) {
    var t = _getTarget(target),
      i = _scrollers.indexOf(t),
      isViewport = _isViewport(t);

    if (~i) {
      _scrollers.splice(i, isViewport ? 6 : 2);
    }

    if (vars) {
      isViewport
        ? _proxies.unshift(_win, vars, _body, vars, _docEl, vars)
        : _proxies.unshift(t, vars);
    }
  };

  ScrollTrigger.clearMatchMedia = function clearMatchMedia(query) {
    _triggers.forEach(function (t) {
      return t._ctx && t._ctx.query === query && t._ctx.kill(true, true);
    });
  };

  ScrollTrigger.isInViewport = function isInViewport(
    element,
    ratio,
    horizontal
  ) {
    var bounds = (
        _isString(element) ? _getTarget(element) : element
      ).getBoundingClientRect(),
      offset = bounds[horizontal ? _width : _height] * ratio || 0;
    return horizontal
      ? bounds.right - offset > 0 && bounds.left + offset < _win.innerWidth
      : bounds.bottom - offset > 0 && bounds.top + offset < _win.innerHeight;
  };

  ScrollTrigger.positionInViewport = function positionInViewport(
    element,
    referencePoint,
    horizontal
  ) {
    _isString(element) && (element = _getTarget(element));
    var bounds = element.getBoundingClientRect(),
      size = bounds[horizontal ? _width : _height],
      offset =
        referencePoint == null
          ? size / 2
          : referencePoint in _keywords
          ? _keywords[referencePoint] * size
          : ~referencePoint.indexOf("%")
          ? (parseFloat(referencePoint) * size) / 100
          : parseFloat(referencePoint) || 0;
    return horizontal
      ? (bounds.left + offset) / _win.innerWidth
      : (bounds.top + offset) / _win.innerHeight;
  };

  ScrollTrigger.killAll = function killAll(allowListeners) {
    _triggers.slice(0).forEach(function (t) {
      return t.vars.id !== "ScrollSmoother" && t.kill();
    });

    if (allowListeners !== true) {
      var listeners = _listeners.killAll || [];
      _listeners = {};
      listeners.forEach(function (f) {
        return f();
      });
    }
  };

  return ScrollTrigger;
})();
ScrollTrigger.version = "3.13.0";

ScrollTrigger.saveStyles = function (targets) {
  return targets
    ? _toArray(targets).forEach(function (target) {
        // saved styles are recorded in a consecutive alternating Array, like [element, cssText, transform attribute, cache, matchMedia, ...]
        if (target && target.style) {
          var i = _savedStyles.indexOf(target);

          i >= 0 && _savedStyles.splice(i, 5);

          _savedStyles.push(
            target,
            target.style.cssText,
            target.getBBox && target.getAttribute("transform"),
            gsap.core.getCache(target),
            _context()
          );
        }
      })
    : _savedStyles;
};

ScrollTrigger.revert = function (soft, media) {
  return _revertAll(!soft, media);
};

ScrollTrigger.create = function (vars, animation) {
  return new ScrollTrigger(vars, animation);
};

ScrollTrigger.refresh = function (safe) {
  return safe
    ? _onResize(true)
    : (_coreInitted || ScrollTrigger.register()) && _refreshAll(true);
};

ScrollTrigger.update = function (force) {
  return ++_scrollers.cache && _updateAll(force === true ? 2 : 0);
};

ScrollTrigger.clearScrollMemory = _clearScrollMemory;

ScrollTrigger.maxScroll = function (element, horizontal) {
  return _maxScroll(element, horizontal ? _horizontal : _vertical);
};

ScrollTrigger.getScrollFunc = function (element, horizontal) {
  return _getScrollFunc(
    _getTarget(element),
    horizontal ? _horizontal : _vertical
  );
};

ScrollTrigger.getById = function (id) {
  return _ids[id];
};

ScrollTrigger.getAll = function () {
  return _triggers.filter(function (t) {
    return t.vars.id !== "ScrollSmoother";
  });
}; // it's common for people to ScrollTrigger.getAll(t => t.kill()) on page routes, for example, and we don't want it to ruin smooth scrolling by killing the main ScrollSmoother one.

ScrollTrigger.isScrolling = function () {
  return !!_lastScrollTime;
};

ScrollTrigger.snapDirectional = _snapDirectional;

ScrollTrigger.addEventListener = function (type, callback) {
  var a = _listeners[type] || (_listeners[type] = []);
  ~a.indexOf(callback) || a.push(callback);
};

ScrollTrigger.removeEventListener = function (type, callback) {
  var a = _listeners[type],
    i = a && a.indexOf(callback);
  i >= 0 && a.splice(i, 1);
};

ScrollTrigger.batch = function (targets, vars) {
  var result = [],
    varsCopy = {},
    interval = vars.interval || 0.016,
    batchMax = vars.batchMax || 1e9,
    proxyCallback = function proxyCallback(type, callback) {
      var elements = [],
        triggers = [],
        delay = gsap
          .delayedCall(interval, function () {
            callback(elements, triggers);
            elements = [];
            triggers = [];
          })
          .pause();
      return function (self) {
        elements.length || delay.restart(true);
        elements.push(self.trigger);
        triggers.push(self);
        batchMax <= elements.length && delay.progress(1);
      };
    },
    p;

  for (p in vars) {
    varsCopy[p] =
      p.substr(0, 2) === "on" && _isFunction(vars[p]) && p !== "onRefreshInit"
        ? proxyCallback(p, vars[p])
        : vars[p];
  }

  if (_isFunction(batchMax)) {
    batchMax = batchMax();

    _addListener(ScrollTrigger, "refresh", function () {
      return (batchMax = vars.batchMax());
    });
  }

  _toArray(targets).forEach(function (target) {
    var config = {};

    for (p in varsCopy) {
      config[p] = varsCopy[p];
    }

    config.trigger = target;
    result.push(ScrollTrigger.create(config));
  });

  return result;
}; // to reduce file size. clamps the scroll and also returns a duration multiplier so that if the scroll gets chopped shorter, the duration gets curtailed as well (otherwise if you're very close to the top of the page, for example, and swipe up really fast, it'll suddenly slow down and take a long time to reach the top).

var _clampScrollAndGetDurationMultiplier =
    function _clampScrollAndGetDurationMultiplier(
      scrollFunc,
      current,
      end,
      max
    ) {
      current > max ? scrollFunc(max) : current < 0 && scrollFunc(0);
      return end > max
        ? (max - current) / (end - current)
        : end < 0
        ? current / (current - end)
        : 1;
    },
  _allowNativePanning = function _allowNativePanning(target, direction) {
    if (direction === true) {
      target.style.removeProperty("touch-action");
    } else {
      target.style.touchAction =
        direction === true
          ? "auto"
          : direction
          ? "pan-" + direction + (Observer.isTouch ? " pinch-zoom" : "")
          : "none"; // note: Firefox doesn't support it pinch-zoom properly, at least in addition to a pan-x or pan-y.
    }

    target === _docEl && _allowNativePanning(_body, direction);
  },
  _overflow = {
    auto: 1,
    scroll: 1,
  },
  _nestedScroll = function _nestedScroll(_ref5) {
    var event = _ref5.event,
      target = _ref5.target,
      axis = _ref5.axis;

    var node = (event.changedTouches ? event.changedTouches[0] : event).target,
      cache = node._gsap || gsap.core.getCache(node),
      time = _getTime(),
      cs;

    if (!cache._isScrollT || time - cache._isScrollT > 2000) {
      // cache for 2 seconds to improve performance.
      while (
        node &&
        node !== _body &&
        ((node.scrollHeight <= node.clientHeight &&
          node.scrollWidth <= node.clientWidth) ||
          !(
            _overflow[(cs = _getComputedStyle(node)).overflowY] ||
            _overflow[cs.overflowX]
          ))
      ) {
        node = node.parentNode;
      }

      cache._isScroll =
        node &&
        node !== target &&
        !_isViewport(node) &&
        (_overflow[(cs = _getComputedStyle(node)).overflowY] ||
          _overflow[cs.overflowX]);
      cache._isScrollT = time;
    }

    if (cache._isScroll || axis === "x") {
      event.stopPropagation();
      event._gsapAllow = true;
    }
  },
  // capture events on scrollable elements INSIDE the <body> and allow those by calling stopPropagation() when we find a scrollable ancestor
  _inputObserver = function _inputObserver(target, type, inputs, nested) {
    return Observer.create({
      target: target,
      capture: true,
      debounce: false,
      lockAxis: true,
      type: type,
      onWheel: (nested = nested && _nestedScroll),
      onPress: nested,
      onDrag: nested,
      onScroll: nested,
      onEnable: function onEnable() {
        return (
          inputs &&
          _addListener(
            _doc,
            Observer.eventTypes[0],
            _captureInputs,
            false,
            true
          )
        );
      },
      onDisable: function onDisable() {
        return _removeListener(
          _doc,
          Observer.eventTypes[0],
          _captureInputs,
          true
        );
      },
    });
  },
  _inputExp = /(input|label|select|textarea)/i,
  _inputIsFocused,
  _captureInputs = function _captureInputs(e) {
    var isInput = _inputExp.test(e.target.tagName);

    if (isInput || _inputIsFocused) {
      e._gsapAllow = true;
      _inputIsFocused = isInput;
    }
  },
  _getScrollNormalizer = function _getScrollNormalizer(vars) {
    _isObject(vars) || (vars = {});
    vars.preventDefault = vars.isNormalizer = vars.allowClicks = true;
    vars.type || (vars.type = "wheel,touch");
    vars.debounce = !!vars.debounce;
    vars.id = vars.id || "normalizer";

    var _vars2 = vars,
      normalizeScrollX = _vars2.normalizeScrollX,
      momentum = _vars2.momentum,
      allowNestedScroll = _vars2.allowNestedScroll,
      onRelease = _vars2.onRelease,
      self,
      maxY,
      target = _getTarget(vars.target) || _docEl,
      smoother = gsap.core.globals().ScrollSmoother,
      smootherInstance = smoother && smoother.get(),
      content =
        _fixIOSBug &&
        ((vars.content && _getTarget(vars.content)) ||
          (smootherInstance &&
            vars.content !== false &&
            !smootherInstance.smooth() &&
            smootherInstance.content())),
      scrollFuncY = _getScrollFunc(target, _vertical),
      scrollFuncX = _getScrollFunc(target, _horizontal),
      scale = 1,
      initialScale =
        (Observer.isTouch && _win.visualViewport
          ? _win.visualViewport.scale * _win.visualViewport.width
          : _win.outerWidth) / _win.innerWidth,
      wheelRefresh = 0,
      resolveMomentumDuration = _isFunction(momentum)
        ? function () {
            return momentum(self);
          }
        : function () {
            return momentum || 2.8;
          },
      lastRefreshID,
      skipTouchMove,
      inputObserver = _inputObserver(
        target,
        vars.type,
        true,
        allowNestedScroll
      ),
      resumeTouchMove = function resumeTouchMove() {
        return (skipTouchMove = false);
      },
      scrollClampX = _passThrough,
      scrollClampY = _passThrough,
      updateClamps = function updateClamps() {
        maxY = _maxScroll(target, _vertical);
        scrollClampY = _clamp(_fixIOSBug ? 1 : 0, maxY);
        normalizeScrollX &&
          (scrollClampX = _clamp(0, _maxScroll(target, _horizontal)));
        lastRefreshID = _refreshID;
      },
      removeContentOffset = function removeContentOffset() {
        content._gsap.y =
          _round(parseFloat(content._gsap.y) + scrollFuncY.offset) + "px";
        content.style.transform =
          "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " +
          parseFloat(content._gsap.y) +
          ", 0, 1)";
        scrollFuncY.offset = scrollFuncY.cacheID = 0;
      },
      ignoreDrag = function ignoreDrag() {
        if (skipTouchMove) {
          requestAnimationFrame(resumeTouchMove);

          var offset = _round(self.deltaY / 2),
            scroll = scrollClampY(scrollFuncY.v - offset);

          if (content && scroll !== scrollFuncY.v + scrollFuncY.offset) {
            scrollFuncY.offset = scroll - scrollFuncY.v;

            var y = _round(
              (parseFloat(content && content._gsap.y) || 0) - scrollFuncY.offset
            );

            content.style.transform =
              "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " +
              y +
              ", 0, 1)";
            content._gsap.y = y + "px";
            scrollFuncY.cacheID = _scrollers.cache;

            _updateAll();
          }

          return true;
        }

        scrollFuncY.offset && removeContentOffset();
        skipTouchMove = true;
      },
      tween,
      startScrollX,
      startScrollY,
      onStopDelayedCall,
      onResize = function onResize() {
        // if the window resizes, like on an iPhone which Apple FORCES the address bar to show/hide even if we event.preventDefault(), it may be scrolling too far now that the address bar is showing, so we must dynamically adjust the momentum tween.
        updateClamps();

        if (tween.isActive() && tween.vars.scrollY > maxY) {
          scrollFuncY() > maxY
            ? tween.progress(1) && scrollFuncY(maxY)
            : tween.resetTo("scrollY", maxY);
        }
      };

    content &&
      gsap.set(content, {
        y: "+=0",
      }); // to ensure there's a cache (element._gsap)

    vars.ignoreCheck = function (e) {
      return (
        (_fixIOSBug && e.type === "touchmove" && ignoreDrag()) ||
        (scale > 1.05 && e.type !== "touchstart") ||
        self.isGesturing ||
        (e.touches && e.touches.length > 1)
      );
    };

    vars.onPress = function () {
      skipTouchMove = false;
      var prevScale = scale;
      scale = _round(
        ((_win.visualViewport && _win.visualViewport.scale) || 1) / initialScale
      );
      tween.pause();
      prevScale !== scale &&
        _allowNativePanning(
          target,
          scale > 1.01 ? true : normalizeScrollX ? false : "x"
        );
      startScrollX = scrollFuncX();
      startScrollY = scrollFuncY();
      updateClamps();
      lastRefreshID = _refreshID;
    };

    vars.onRelease = vars.onGestureStart = function (self, wasDragging) {
      scrollFuncY.offset && removeContentOffset();

      if (!wasDragging) {
        onStopDelayedCall.restart(true);
      } else {
        _scrollers.cache++; // make sure we're pulling the non-cached value
        // alternate algorithm: durX = Math.min(6, Math.abs(self.velocityX / 800)),	dur = Math.max(durX, Math.min(6, Math.abs(self.velocityY / 800))); dur = dur * (0.4 + (1 - _power4In(dur / 6)) * 0.6)) * (momentumSpeed || 1)

        var dur = resolveMomentumDuration(),
          currentScroll,
          endScroll;

        if (normalizeScrollX) {
          currentScroll = scrollFuncX();
          endScroll = currentScroll + (dur * 0.05 * -self.velocityX) / 0.227; // the constant .227 is from power4(0.05). velocity is inverted because scrolling goes in the opposite direction.

          dur *= _clampScrollAndGetDurationMultiplier(
            scrollFuncX,
            currentScroll,
            endScroll,
            _maxScroll(target, _horizontal)
          );
          tween.vars.scrollX = scrollClampX(endScroll);
        }

        currentScroll = scrollFuncY();
        endScroll = currentScroll + (dur * 0.05 * -self.velocityY) / 0.227; // the constant .227 is from power4(0.05)

        dur *= _clampScrollAndGetDurationMultiplier(
          scrollFuncY,
          currentScroll,
          endScroll,
          _maxScroll(target, _vertical)
        );
        tween.vars.scrollY = scrollClampY(endScroll);
        tween.invalidate().duration(dur).play(0.01);

        if (
          (_fixIOSBug && tween.vars.scrollY >= maxY) ||
          currentScroll >= maxY - 1
        ) {
          // iOS bug: it'll show the address bar but NOT fire the window "resize" event until the animation is done but we must protect against overshoot so we leverage an onUpdate to do so.
          gsap.to(
            {},
            {
              onUpdate: onResize,
              duration: dur,
            }
          );
        }
      }

      onRelease && onRelease(self);
    };

    vars.onWheel = function () {
      tween._ts && tween.pause();

      if (_getTime() - wheelRefresh > 1000) {
        // after 1 second, refresh the clamps otherwise that'll only happen when ScrollTrigger.refresh() is called or for touch-scrolling.
        lastRefreshID = 0;
        wheelRefresh = _getTime();
      }
    };

    vars.onChange = function (self, dx, dy, xArray, yArray) {
      _refreshID !== lastRefreshID && updateClamps();
      dx &&
        normalizeScrollX &&
        scrollFuncX(
          scrollClampX(
            xArray[2] === dx
              ? startScrollX + (self.startX - self.x)
              : scrollFuncX() + dx - xArray[1]
          )
        ); // for more precision, we track pointer/touch movement from the start, otherwise it'll drift.

      if (dy) {
        scrollFuncY.offset && removeContentOffset();
        var isTouch = yArray[2] === dy,
          y = isTouch
            ? startScrollY + self.startY - self.y
            : scrollFuncY() + dy - yArray[1],
          yClamped = scrollClampY(y);
        isTouch && y !== yClamped && (startScrollY += yClamped - y);
        scrollFuncY(yClamped);
      }

      (dy || dx) && _updateAll();
    };

    vars.onEnable = function () {
      _allowNativePanning(target, normalizeScrollX ? false : "x");

      ScrollTrigger.addEventListener("refresh", onResize);

      _addListener(_win, "resize", onResize);

      if (scrollFuncY.smooth) {
        scrollFuncY.target.style.scrollBehavior = "auto";
        scrollFuncY.smooth = scrollFuncX.smooth = false;
      }

      inputObserver.enable();
    };

    vars.onDisable = function () {
      _allowNativePanning(target, true);

      _removeListener(_win, "resize", onResize);

      ScrollTrigger.removeEventListener("refresh", onResize);
      inputObserver.kill();
    };

    vars.lockAxis = vars.lockAxis !== false;
    self = new Observer(vars);
    self.iOS = _fixIOSBug; // used in the Observer getCachedScroll() function to work around an iOS bug that wreaks havoc with TouchEvent.clientY if we allow scroll to go all the way back to 0.

    _fixIOSBug && !scrollFuncY() && scrollFuncY(1); // iOS bug causes event.clientY values to freak out (wildly inaccurate) if the scroll position is exactly 0.

    _fixIOSBug && gsap.ticker.add(_passThrough); // prevent the ticker from sleeping

    onStopDelayedCall = self._dc;
    tween = gsap.to(self, {
      ease: "power4",
      paused: true,
      inherit: false,
      scrollX: normalizeScrollX ? "+=0.1" : "+=0",
      scrollY: "+=0.1",
      modifiers: {
        scrollY: _interruptionTracker(scrollFuncY, scrollFuncY(), function () {
          return tween.pause();
        }),
      },
      onUpdate: _updateAll,
      onComplete: onStopDelayedCall.vars.onComplete,
    }); // we need the modifier to sense if the scroll position is altered outside of the momentum tween (like with a scrollTo tween) so we can pause() it to prevent conflicts.

    return self;
  };

ScrollTrigger.sort = function (func) {
  if (_isFunction(func)) {
    return _triggers.sort(func);
  }

  var scroll = _win.pageYOffset || 0;
  ScrollTrigger.getAll().forEach(function (t) {
    return (t._sortY = t.trigger
      ? scroll + t.trigger.getBoundingClientRect().top
      : t.start + _win.innerHeight);
  });
  return _triggers.sort(
    func ||
      function (a, b) {
        return (
          (a.vars.refreshPriority || 0) * -1e6 +
          (a.vars.containerAnimation ? 1e6 : a._sortY) -
          ((b.vars.containerAnimation ? 1e6 : b._sortY) +
            (b.vars.refreshPriority || 0) * -1e6)
        );
      }
  ); // anything with a containerAnimation should refresh last.
};

ScrollTrigger.observe = function (vars) {
  return new Observer(vars);
};

ScrollTrigger.normalizeScroll = function (vars) {
  if (typeof vars === "undefined") {
    return _normalizer;
  }

  if (vars === true && _normalizer) {
    return _normalizer.enable();
  }

  if (vars === false) {
    _normalizer && _normalizer.kill();
    _normalizer = vars;
    return;
  }

  var normalizer = vars instanceof Observer ? vars : _getScrollNormalizer(vars);
  _normalizer && _normalizer.target === normalizer.target && _normalizer.kill();
  _isViewport(normalizer.target) && (_normalizer = normalizer);
  return normalizer;
};

ScrollTrigger.core = {
  // smaller file size way to leverage in ScrollSmoother and Observer
  _getVelocityProp: _getVelocityProp,
  _inputObserver: _inputObserver,
  _scrollers: _scrollers,
  _proxies: _proxies,
  bridge: {
    // when normalizeScroll sets the scroll position (ss = setScroll)
    ss: function ss() {
      _lastScrollTime || _dispatch("scrollStart");
      _lastScrollTime = _getTime();
    },
    // a way to get the _refreshing value in Observer
    ref: function ref() {
      return _refreshing;
    },
  },
};
_getGSAP() && gsap.registerPlugin(ScrollTrigger);

/* locomotive-scroll v4.1.3 | MIT License | https://github.com/locomotivemtl/locomotive-scroll */
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true,
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(
          target,
          key,
          Object.getOwnPropertyDescriptor(source, key)
        );
      });
    }
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true,
    },
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf
    ? Object.getPrototypeOf
    : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf =
    Object.setPrototypeOf ||
    function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called"
    );
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
      result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);

      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

function _slicedToArray(arr, i) {
  return (
    _arrayWithHoles(arr) ||
    _iterableToArrayLimit(arr, i) ||
    _unsupportedIterableToArray(arr, i) ||
    _nonIterableRest()
  );
}

function _toConsumableArray(arr) {
  return (
    _arrayWithoutHoles(arr) ||
    _iterableToArray(arr) ||
    _unsupportedIterableToArray(arr) ||
    _nonIterableSpread()
  );
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
    return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (
      var _i = arr[Symbol.iterator](), _s;
      !(_n = (_s = _i.next()).done);
      _n = true
    ) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError(
    "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
  );
}

function _nonIterableRest() {
  throw new TypeError(
    "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
  );
}

var defaults = {
  el: document,
  name: "scroll",
  offset: [0, 0],
  repeat: false,
  smooth: false,
  initPosition: {
    x: 0,
    y: 0,
  },
  direction: "vertical",
  gestureDirection: "vertical",
  reloadOnContextChange: false,
  lerp: 0.1,
  class: "is-inview",
  scrollbarContainer: false,
  scrollbarClass: "c-scrollbar",
  scrollingClass: "has-scroll-scrolling",
  draggingClass: "has-scroll-dragging",
  smoothClass: "has-scroll-smooth",
  initClass: "has-scroll-init",
  getSpeed: false,
  getDirection: false,
  scrollFromAnywhere: false,
  multiplier: 1,
  firefoxMultiplier: 50,
  touchMultiplier: 2,
  resetNativeScroll: true,
  tablet: {
    smooth: false,
    direction: "vertical",
    gestureDirection: "vertical",
    breakpoint: 1024,
  },
  smartphone: {
    smooth: false,
    direction: "vertical",
    gestureDirection: "vertical",
  },
};

var _default = /*#__PURE__*/ (function () {
  function _default() {
    var options =
      arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, _default);

    Object.assign(this, defaults, options);
    this.smartphone = defaults.smartphone;
    if (options.smartphone) Object.assign(this.smartphone, options.smartphone);
    this.tablet = defaults.tablet;
    if (options.tablet) Object.assign(this.tablet, options.tablet);
    this.namespace = "locomotive";
    this.html = document.documentElement;
    this.windowHeight = window.innerHeight;
    this.windowWidth = window.innerWidth;
    this.windowMiddle = {
      x: this.windowWidth / 2,
      y: this.windowHeight / 2,
    };
    this.els = {};
    this.currentElements = {};
    this.listeners = {};
    this.hasScrollTicking = false;
    this.hasCallEventSet = false;
    this.checkScroll = this.checkScroll.bind(this);
    this.checkResize = this.checkResize.bind(this);
    this.checkEvent = this.checkEvent.bind(this);
    this.instance = {
      scroll: {
        x: 0,
        y: 0,
      },
      limit: {
        x: this.html.offsetWidth,
        y: this.html.offsetHeight,
      },
      currentElements: this.currentElements,
    };

    if (this.isMobile) {
      if (this.isTablet) {
        this.context = "tablet";
      } else {
        this.context = "smartphone";
      }
    } else {
      this.context = "desktop";
    }

    if (this.isMobile) this.direction = this[this.context].direction;

    if (this.direction === "horizontal") {
      this.directionAxis = "x";
    } else {
      this.directionAxis = "y";
    }

    if (this.getDirection) {
      this.instance.direction = null;
    }

    if (this.getDirection) {
      this.instance.speed = 0;
    }

    this.html.classList.add(this.initClass);
    window.addEventListener("resize", this.checkResize, false);
  }

  _createClass(_default, [
    {
      key: "init",
      value: function init() {
        this.initEvents();
      },
    },
    {
      key: "checkScroll",
      value: function checkScroll() {
        this.dispatchScroll();
      },
    },
    {
      key: "checkResize",
      value: function checkResize() {
        var _this = this;

        if (!this.resizeTick) {
          this.resizeTick = true;
          requestAnimationFrame(function () {
            _this.resize();

            _this.resizeTick = false;
          });
        }
      },
    },
    {
      key: "resize",
      value: function resize() {},
    },
    {
      key: "checkContext",
      value: function checkContext() {
        if (!this.reloadOnContextChange) return;
        this.isMobile =
          /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
            navigator.userAgent
          ) ||
          (navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1) ||
          this.windowWidth < this.tablet.breakpoint;
        this.isTablet =
          this.isMobile && this.windowWidth >= this.tablet.breakpoint;
        var oldContext = this.context;

        if (this.isMobile) {
          if (this.isTablet) {
            this.context = "tablet";
          } else {
            this.context = "smartphone";
          }
        } else {
          this.context = "desktop";
        }

        if (oldContext != this.context) {
          var oldSmooth =
            oldContext == "desktop" ? this.smooth : this[oldContext].smooth;
          var newSmooth =
            this.context == "desktop" ? this.smooth : this[this.context].smooth;
          if (oldSmooth != newSmooth) window.location.reload();
        }
      },
    },
    {
      key: "initEvents",
      value: function initEvents() {
        var _this2 = this;

        this.scrollToEls = this.el.querySelectorAll(
          "[data-".concat(this.name, "-to]")
        );
        this.setScrollTo = this.setScrollTo.bind(this);
        this.scrollToEls.forEach(function (el) {
          el.addEventListener("click", _this2.setScrollTo, false);
        });
      },
    },
    {
      key: "setScrollTo",
      value: function setScrollTo(event) {
        event.preventDefault();
        this.scrollTo(
          event.currentTarget.getAttribute(
            "data-".concat(this.name, "-href")
          ) || event.currentTarget.getAttribute("href"),
          {
            offset: event.currentTarget.getAttribute(
              "data-".concat(this.name, "-offset")
            ),
          }
        );
      },
    },
    {
      key: "addElements",
      value: function addElements() {},
    },
    {
      key: "detectElements",
      value: function detectElements(hasCallEventSet) {
        var _this3 = this;

        var scrollTop = this.instance.scroll.y;
        var scrollBottom = scrollTop + this.windowHeight;
        var scrollLeft = this.instance.scroll.x;
        var scrollRight = scrollLeft + this.windowWidth;
        Object.entries(this.els).forEach(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
            i = _ref2[0],
            el = _ref2[1];

          if (el && (!el.inView || hasCallEventSet)) {
            if (_this3.direction === "horizontal") {
              if (scrollRight >= el.left && scrollLeft < el.right) {
                _this3.setInView(el, i);
              }
            } else {
              if (scrollBottom >= el.top && scrollTop < el.bottom) {
                _this3.setInView(el, i);
              }
            }
          }

          if (el && el.inView) {
            if (_this3.direction === "horizontal") {
              var width = el.right - el.left;
              el.progress =
                (_this3.instance.scroll.x - (el.left - _this3.windowWidth)) /
                (width + _this3.windowWidth);

              if (scrollRight < el.left || scrollLeft > el.right) {
                _this3.setOutOfView(el, i);
              }
            } else {
              var height = el.bottom - el.top;
              el.progress =
                (_this3.instance.scroll.y - (el.top - _this3.windowHeight)) /
                (height + _this3.windowHeight);

              if (scrollBottom < el.top || scrollTop > el.bottom) {
                _this3.setOutOfView(el, i);
              }
            }
          }
        }); // this.els = this.els.filter((current, i) => {
        //     return current !== null;
        // });

        this.hasScrollTicking = false;
      },
    },
    {
      key: "setInView",
      value: function setInView(current, i) {
        this.els[i].inView = true;
        current.el.classList.add(current["class"]);
        this.currentElements[i] = current;

        if (current.call && this.hasCallEventSet) {
          this.dispatchCall(current, "enter");

          if (!current.repeat) {
            this.els[i].call = false;
          }
        } // if (!current.repeat && !current.speed && !current.sticky) {
        //     if (!current.call || current.call && this.hasCallEventSet) {
        //        this.els[i] = null
        //     }
        // }
      },
    },
    {
      key: "setOutOfView",
      value: function setOutOfView(current, i) {
        var _this4 = this;

        // if (current.repeat || current.speed !== undefined) {
        this.els[i].inView = false; // }

        Object.keys(this.currentElements).forEach(function (el) {
          el === i && delete _this4.currentElements[el];
        });

        if (current.call && this.hasCallEventSet) {
          this.dispatchCall(current, "exit");
        }

        if (current.repeat) {
          current.el.classList.remove(current["class"]);
        }
      },
    },
    {
      key: "dispatchCall",
      value: function dispatchCall(current, way) {
        this.callWay = way;
        this.callValue = current.call.split(",").map(function (item) {
          return item.trim();
        });
        this.callObj = current;
        if (this.callValue.length == 1) this.callValue = this.callValue[0];
        var callEvent = new Event(this.namespace + "call");
        this.el.dispatchEvent(callEvent);
      },
    },
    {
      key: "dispatchScroll",
      value: function dispatchScroll() {
        var scrollEvent = new Event(this.namespace + "scroll");
        this.el.dispatchEvent(scrollEvent);
      },
    },
    {
      key: "setEvents",
      value: function setEvents(event, func) {
        if (!this.listeners[event]) {
          this.listeners[event] = [];
        }

        var list = this.listeners[event];
        list.push(func);

        if (list.length === 1) {
          this.el.addEventListener(
            this.namespace + event,
            this.checkEvent,
            false
          );
        }

        if (event === "call") {
          this.hasCallEventSet = true;
          this.detectElements(true);
        }
      },
    },
    {
      key: "unsetEvents",
      value: function unsetEvents(event, func) {
        if (!this.listeners[event]) return;
        var list = this.listeners[event];
        var index = list.indexOf(func);
        if (index < 0) return;
        list.splice(index, 1);

        if (list.index === 0) {
          this.el.removeEventListener(
            this.namespace + event,
            this.checkEvent,
            false
          );
        }
      },
    },
    {
      key: "checkEvent",
      value: function checkEvent(event) {
        var _this5 = this;

        var name = event.type.replace(this.namespace, "");
        var list = this.listeners[name];
        if (!list || list.length === 0) return;
        list.forEach(function (func) {
          switch (name) {
            case "scroll":
              return func(_this5.instance);

            case "call":
              return func(_this5.callValue, _this5.callWay, _this5.callObj);

            default:
              return func();
          }
        });
      },
    },
    {
      key: "startScroll",
      value: function startScroll() {},
    },
    {
      key: "stopScroll",
      value: function stopScroll() {},
    },
    {
      key: "setScroll",
      value: function setScroll(x, y) {
        this.instance.scroll = {
          x: 0,
          y: 0,
        };
      },
    },
    {
      key: "destroy",
      value: function destroy() {
        var _this6 = this;

        window.removeEventListener("resize", this.checkResize, false);
        Object.keys(this.listeners).forEach(function (event) {
          _this6.el.removeEventListener(
            _this6.namespace + event,
            _this6.checkEvent,
            false
          );
        });
        this.listeners = {};
        this.scrollToEls.forEach(function (el) {
          el.removeEventListener("click", _this6.setScrollTo, false);
        });
        this.html.classList.remove(this.initClass);
      },
    },
  ]);

  return _default;
})();

var commonjsGlobal =
  typeof globalThis !== "undefined"
    ? globalThis
    : typeof window !== "undefined"
    ? window
    : typeof global !== "undefined"
    ? global
    : typeof self !== "undefined"
    ? self
    : {};

function createCommonjsModule(fn, module) {
  return (module = { exports: {} }), fn(module, module.exports), module.exports;
}

var smoothscroll = createCommonjsModule(function (module, exports) {
  /* smoothscroll v0.4.4 - 2019 - Dustan Kasten, Jeremias Menichelli - MIT License */
  (function () {
    // polyfill
    function polyfill() {
      // aliases
      var w = window;
      var d = document;

      // return if scroll behavior is supported and polyfill is not forced
      if (
        "scrollBehavior" in d.documentElement.style &&
        w.__forceSmoothScrollPolyfill__ !== true
      ) {
        return;
      }

      // globals
      var Element = w.HTMLElement || w.Element;
      var SCROLL_TIME = 468;

      // object gathering original scroll methods
      var original = {
        scroll: w.scroll || w.scrollTo,
        scrollBy: w.scrollBy,
        elementScroll: Element.prototype.scroll || scrollElement,
        scrollIntoView: Element.prototype.scrollIntoView,
      };

      // define timing method
      var now =
        w.performance && w.performance.now
          ? w.performance.now.bind(w.performance)
          : Date.now;

      /**
       * indicates if a the current browser is made by Microsoft
       * @method isMicrosoftBrowser
       * @param {String} userAgent
       * @returns {Boolean}
       */
      function isMicrosoftBrowser(userAgent) {
        var userAgentPatterns = ["MSIE ", "Trident/", "Edge/"];

        return new RegExp(userAgentPatterns.join("|")).test(userAgent);
      }

      /*
       * IE has rounding bug rounding down clientHeight and clientWidth and
       * rounding up scrollHeight and scrollWidth causing false positives
       * on hasScrollableSpace
       */
      var ROUNDING_TOLERANCE = isMicrosoftBrowser(w.navigator.userAgent)
        ? 1
        : 0;

      /**
       * changes scroll position inside an element
       * @method scrollElement
       * @param {Number} x
       * @param {Number} y
       * @returns {undefined}
       */
      function scrollElement(x, y) {
        this.scrollLeft = x;
        this.scrollTop = y;
      }

      /**
       * returns result of applying ease math function to a number
       * @method ease
       * @param {Number} k
       * @returns {Number}
       */
      function ease(k) {
        return 0.5 * (1 - Math.cos(Math.PI * k));
      }

      /**
       * indicates if a smooth behavior should be applied
       * @method shouldBailOut
       * @param {Number|Object} firstArg
       * @returns {Boolean}
       */
      function shouldBailOut(firstArg) {
        if (
          firstArg === null ||
          typeof firstArg !== "object" ||
          firstArg.behavior === undefined ||
          firstArg.behavior === "auto" ||
          firstArg.behavior === "instant"
        ) {
          // first argument is not an object/null
          // or behavior is auto, instant or undefined
          return true;
        }

        if (typeof firstArg === "object" && firstArg.behavior === "smooth") {
          // first argument is an object and behavior is smooth
          return false;
        }

        // throw error when behavior is not supported
        throw new TypeError(
          "behavior member of ScrollOptions " +
            firstArg.behavior +
            " is not a valid value for enumeration ScrollBehavior."
        );
      }

      /**
       * indicates if an element has scrollable space in the provided axis
       * @method hasScrollableSpace
       * @param {Node} el
       * @param {String} axis
       * @returns {Boolean}
       */
      function hasScrollableSpace(el, axis) {
        if (axis === "Y") {
          return el.clientHeight + ROUNDING_TOLERANCE < el.scrollHeight;
        }

        if (axis === "X") {
          return el.clientWidth + ROUNDING_TOLERANCE < el.scrollWidth;
        }
      }

      /**
       * indicates if an element has a scrollable overflow property in the axis
       * @method canOverflow
       * @param {Node} el
       * @param {String} axis
       * @returns {Boolean}
       */
      function canOverflow(el, axis) {
        var overflowValue = w.getComputedStyle(el, null)["overflow" + axis];

        return overflowValue === "auto" || overflowValue === "scroll";
      }

      /**
       * indicates if an element can be scrolled in either axis
       * @method isScrollable
       * @param {Node} el
       * @param {String} axis
       * @returns {Boolean}
       */
      function isScrollable(el) {
        var isScrollableY = hasScrollableSpace(el, "Y") && canOverflow(el, "Y");
        var isScrollableX = hasScrollableSpace(el, "X") && canOverflow(el, "X");

        return isScrollableY || isScrollableX;
      }

      /**
       * finds scrollable parent of an element
       * @method findScrollableParent
       * @param {Node} el
       * @returns {Node} el
       */
      function findScrollableParent(el) {
        while (el !== d.body && isScrollable(el) === false) {
          el = el.parentNode || el.host;
        }

        return el;
      }

      /**
       * self invoked function that, given a context, steps through scrolling
       * @method step
       * @param {Object} context
       * @returns {undefined}
       */
      function step(context) {
        var time = now();
        var value;
        var currentX;
        var currentY;
        var elapsed = (time - context.startTime) / SCROLL_TIME;

        // avoid elapsed times higher than one
        elapsed = elapsed > 1 ? 1 : elapsed;

        // apply easing to elapsed time
        value = ease(elapsed);

        currentX = context.startX + (context.x - context.startX) * value;
        currentY = context.startY + (context.y - context.startY) * value;

        context.method.call(context.scrollable, currentX, currentY);

        // scroll more if we have not reached our destination
        if (currentX !== context.x || currentY !== context.y) {
          w.requestAnimationFrame(step.bind(w, context));
        }
      }

      /**
       * scrolls window or element with a smooth behavior
       * @method smoothScroll
       * @param {Object|Node} el
       * @param {Number} x
       * @param {Number} y
       * @returns {undefined}
       */
      function smoothScroll(el, x, y) {
        var scrollable;
        var startX;
        var startY;
        var method;
        var startTime = now();

        // define scroll context
        if (el === d.body) {
          scrollable = w;
          startX = w.scrollX || w.pageXOffset;
          startY = w.scrollY || w.pageYOffset;
          method = original.scroll;
        } else {
          scrollable = el;
          startX = el.scrollLeft;
          startY = el.scrollTop;
          method = scrollElement;
        }

        // scroll looping over a frame
        step({
          scrollable: scrollable,
          method: method,
          startTime: startTime,
          startX: startX,
          startY: startY,
          x: x,
          y: y,
        });
      }

      // ORIGINAL METHODS OVERRIDES
      // w.scroll and w.scrollTo
      w.scroll = w.scrollTo = function () {
        // avoid action when no arguments are passed
        if (arguments[0] === undefined) {
          return;
        }

        // avoid smooth behavior if not required
        if (shouldBailOut(arguments[0]) === true) {
          original.scroll.call(
            w,
            arguments[0].left !== undefined
              ? arguments[0].left
              : typeof arguments[0] !== "object"
              ? arguments[0]
              : w.scrollX || w.pageXOffset,
            // use top prop, second argument if present or fallback to scrollY
            arguments[0].top !== undefined
              ? arguments[0].top
              : arguments[1] !== undefined
              ? arguments[1]
              : w.scrollY || w.pageYOffset
          );

          return;
        }

        // LET THE SMOOTHNESS BEGIN!
        smoothScroll.call(
          w,
          d.body,
          arguments[0].left !== undefined
            ? ~~arguments[0].left
            : w.scrollX || w.pageXOffset,
          arguments[0].top !== undefined
            ? ~~arguments[0].top
            : w.scrollY || w.pageYOffset
        );
      };

      // w.scrollBy
      w.scrollBy = function () {
        // avoid action when no arguments are passed
        if (arguments[0] === undefined) {
          return;
        }

        // avoid smooth behavior if not required
        if (shouldBailOut(arguments[0])) {
          original.scrollBy.call(
            w,
            arguments[0].left !== undefined
              ? arguments[0].left
              : typeof arguments[0] !== "object"
              ? arguments[0]
              : 0,
            arguments[0].top !== undefined
              ? arguments[0].top
              : arguments[1] !== undefined
              ? arguments[1]
              : 0
          );

          return;
        }

        // LET THE SMOOTHNESS BEGIN!
        smoothScroll.call(
          w,
          d.body,
          ~~arguments[0].left + (w.scrollX || w.pageXOffset),
          ~~arguments[0].top + (w.scrollY || w.pageYOffset)
        );
      };

      // Element.prototype.scroll and Element.prototype.scrollTo
      Element.prototype.scroll = Element.prototype.scrollTo = function () {
        // avoid action when no arguments are passed
        if (arguments[0] === undefined) {
          return;
        }

        // avoid smooth behavior if not required
        if (shouldBailOut(arguments[0]) === true) {
          // if one number is passed, throw error to match Firefox implementation
          if (typeof arguments[0] === "number" && arguments[1] === undefined) {
            throw new SyntaxError("Value could not be converted");
          }

          original.elementScroll.call(
            this,
            // use left prop, first number argument or fallback to scrollLeft
            arguments[0].left !== undefined
              ? ~~arguments[0].left
              : typeof arguments[0] !== "object"
              ? ~~arguments[0]
              : this.scrollLeft,
            // use top prop, second argument or fallback to scrollTop
            arguments[0].top !== undefined
              ? ~~arguments[0].top
              : arguments[1] !== undefined
              ? ~~arguments[1]
              : this.scrollTop
          );

          return;
        }

        var left = arguments[0].left;
        var top = arguments[0].top;

        // LET THE SMOOTHNESS BEGIN!
        smoothScroll.call(
          this,
          this,
          typeof left === "undefined" ? this.scrollLeft : ~~left,
          typeof top === "undefined" ? this.scrollTop : ~~top
        );
      };

      // Element.prototype.scrollBy
      Element.prototype.scrollBy = function () {
        // avoid action when no arguments are passed
        if (arguments[0] === undefined) {
          return;
        }

        // avoid smooth behavior if not required
        if (shouldBailOut(arguments[0]) === true) {
          original.elementScroll.call(
            this,
            arguments[0].left !== undefined
              ? ~~arguments[0].left + this.scrollLeft
              : ~~arguments[0] + this.scrollLeft,
            arguments[0].top !== undefined
              ? ~~arguments[0].top + this.scrollTop
              : ~~arguments[1] + this.scrollTop
          );

          return;
        }

        this.scroll({
          left: ~~arguments[0].left + this.scrollLeft,
          top: ~~arguments[0].top + this.scrollTop,
          behavior: arguments[0].behavior,
        });
      };

      // Element.prototype.scrollIntoView
      Element.prototype.scrollIntoView = function () {
        // avoid smooth behavior if not required
        if (shouldBailOut(arguments[0]) === true) {
          original.scrollIntoView.call(
            this,
            arguments[0] === undefined ? true : arguments[0]
          );

          return;
        }

        // LET THE SMOOTHNESS BEGIN!
        var scrollableParent = findScrollableParent(this);
        var parentRects = scrollableParent.getBoundingClientRect();
        var clientRects = this.getBoundingClientRect();

        if (scrollableParent !== d.body) {
          // reveal element inside parent
          smoothScroll.call(
            this,
            scrollableParent,
            scrollableParent.scrollLeft + clientRects.left - parentRects.left,
            scrollableParent.scrollTop + clientRects.top - parentRects.top
          );

          // reveal parent in viewport unless is fixed
          if (w.getComputedStyle(scrollableParent).position !== "fixed") {
            w.scrollBy({
              left: parentRects.left,
              top: parentRects.top,
              behavior: "smooth",
            });
          }
        } else {
          // reveal element in viewport
          w.scrollBy({
            left: clientRects.left,
            top: clientRects.top,
            behavior: "smooth",
          });
        }
      };
    }

    {
      // commonjs
      module.exports = { polyfill: polyfill };
    }
  })();
});
smoothscroll.polyfill;

var _default$1 = /*#__PURE__*/ (function (_Core) {
  _inherits(_default, _Core);

  var _super = _createSuper(_default);

  function _default() {
    var _this;

    var options =
      arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, _default);

    _this = _super.call(this, options);

    if (_this.resetNativeScroll) {
      if (history.scrollRestoration) {
        history.scrollRestoration = "manual";
      }

      window.scrollTo(0, 0);
    }

    window.addEventListener("scroll", _this.checkScroll, false);

    if (window.smoothscrollPolyfill === undefined) {
      window.smoothscrollPolyfill = smoothscroll;
      window.smoothscrollPolyfill.polyfill();
    }

    return _this;
  }

  _createClass(_default, [
    {
      key: "init",
      value: function init() {
        this.instance.scroll.y = window.pageYOffset;
        this.addElements();
        this.detectElements();

        _get(_getPrototypeOf(_default.prototype), "init", this).call(this);
      },
    },
    {
      key: "checkScroll",
      value: function checkScroll() {
        var _this2 = this;

        _get(_getPrototypeOf(_default.prototype), "checkScroll", this).call(
          this
        );

        if (this.getDirection) {
          this.addDirection();
        }

        if (this.getSpeed) {
          this.addSpeed();
          this.speedTs = Date.now();
        }

        this.instance.scroll.y = window.pageYOffset;

        if (Object.entries(this.els).length) {
          if (!this.hasScrollTicking) {
            requestAnimationFrame(function () {
              _this2.detectElements();
            });
            this.hasScrollTicking = true;
          }
        }
      },
    },
    {
      key: "addDirection",
      value: function addDirection() {
        if (window.pageYOffset > this.instance.scroll.y) {
          if (this.instance.direction !== "down") {
            this.instance.direction = "down";
          }
        } else if (window.pageYOffset < this.instance.scroll.y) {
          if (this.instance.direction !== "up") {
            this.instance.direction = "up";
          }
        }
      },
    },
    {
      key: "addSpeed",
      value: function addSpeed() {
        if (window.pageYOffset != this.instance.scroll.y) {
          this.instance.speed =
            (window.pageYOffset - this.instance.scroll.y) /
            Math.max(1, Date.now() - this.speedTs);
        } else {
          this.instance.speed = 0;
        }
      },
    },
    {
      key: "resize",
      value: function resize() {
        if (Object.entries(this.els).length) {
          this.windowHeight = window.innerHeight;
          this.updateElements();
        }
      },
    },
    {
      key: "addElements",
      value: function addElements() {
        var _this3 = this;

        this.els = {};
        var els = this.el.querySelectorAll("[data-" + this.name + "]");
        els.forEach(function (el, index) {
          el.getBoundingClientRect();
          var cl = el.dataset[_this3.name + "Class"] || _this3["class"];
          var id =
            typeof el.dataset[_this3.name + "Id"] === "string"
              ? el.dataset[_this3.name + "Id"]
              : index;
          var top;
          var left;
          var offset =
            typeof el.dataset[_this3.name + "Offset"] === "string"
              ? el.dataset[_this3.name + "Offset"].split(",")
              : _this3.offset;
          var repeat = el.dataset[_this3.name + "Repeat"];
          var call = el.dataset[_this3.name + "Call"];
          var target = el.dataset[_this3.name + "Target"];
          var targetEl;

          if (target !== undefined) {
            targetEl = document.querySelector("".concat(target));
          } else {
            targetEl = el;
          }

          var targetElBCR = targetEl.getBoundingClientRect();
          top = targetElBCR.top + _this3.instance.scroll.y;
          left = targetElBCR.left + _this3.instance.scroll.x;
          var bottom = top + targetEl.offsetHeight;
          var right = left + targetEl.offsetWidth;

          if (repeat == "false") {
            repeat = false;
          } else if (repeat != undefined) {
            repeat = true;
          } else {
            repeat = _this3.repeat;
          }

          var relativeOffset = _this3.getRelativeOffset(offset);

          top = top + relativeOffset[0];
          bottom = bottom - relativeOffset[1];
          var mappedEl = {
            el: el,
            targetEl: targetEl,
            id: id,
            class: cl,
            top: top,
            bottom: bottom,
            left: left,
            right: right,
            offset: offset,
            progress: 0,
            repeat: repeat,
            inView: false,
            call: call,
          };
          _this3.els[id] = mappedEl;

          if (el.classList.contains(cl)) {
            _this3.setInView(_this3.els[id], id);
          }
        });
      },
    },
    {
      key: "updateElements",
      value: function updateElements() {
        var _this4 = this;

        Object.entries(this.els).forEach(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
            i = _ref2[0],
            el = _ref2[1];

          var top =
            el.targetEl.getBoundingClientRect().top + _this4.instance.scroll.y;

          var bottom = top + el.targetEl.offsetHeight;

          var relativeOffset = _this4.getRelativeOffset(el.offset);

          _this4.els[i].top = top + relativeOffset[0];
          _this4.els[i].bottom = bottom - relativeOffset[1];
        });
        this.hasScrollTicking = false;
      },
    },
    {
      key: "getRelativeOffset",
      value: function getRelativeOffset(offset) {
        var relativeOffset = [0, 0];

        if (offset) {
          for (var i = 0; i < offset.length; i++) {
            if (typeof offset[i] == "string") {
              if (offset[i].includes("%")) {
                relativeOffset[i] = parseInt(
                  (offset[i].replace("%", "") * this.windowHeight) / 100
                );
              } else {
                relativeOffset[i] = parseInt(offset[i]);
              }
            } else {
              relativeOffset[i] = offset[i];
            }
          }
        }

        return relativeOffset;
      },
      /**
       * Scroll to a desired target.
       *
       * @param  Available options :
       *          target {node, string, "top", "bottom", int} - The DOM element we want to scroll to
       *          options {object} - Options object for additionnal settings.
       * @return {void}
       */
    },
    {
      key: "scrollTo",
      value: function scrollTo(target) {
        var options =
          arguments.length > 1 && arguments[1] !== undefined
            ? arguments[1]
            : {};
        // Parse options
        var offset = parseInt(options.offset) || 0; // An offset to apply on top of given `target` or `sourceElem`'s target

        var callback = options.callback ? options.callback : false; // function called when scrollTo completes (note that it won't wait for lerp to stabilize)

        if (typeof target === "string") {
          // Selector or boundaries
          if (target === "top") {
            target = this.html;
          } else if (target === "bottom") {
            target = this.html.offsetHeight - window.innerHeight;
          } else {
            target = document.querySelector(target); // If the query fails, abort

            if (!target) {
              return;
            }
          }
        } else if (typeof target === "number") {
          // Absolute coordinate
          target = parseInt(target);
        } else if (target && target.tagName);
        else {
          console.warn("`target` parameter is not valid");
          return;
        } // We have a target that is not a coordinate yet, get it

        if (typeof target !== "number") {
          offset =
            target.getBoundingClientRect().top +
            offset +
            this.instance.scroll.y;
        } else {
          offset = target + offset;
        }

        var isTargetReached = function isTargetReached() {
          return parseInt(window.pageYOffset) === parseInt(offset);
        };

        if (callback) {
          if (isTargetReached()) {
            callback();
            return;
          } else {
            var onScroll = function onScroll() {
              if (isTargetReached()) {
                window.removeEventListener("scroll", onScroll);
                callback();
              }
            };

            window.addEventListener("scroll", onScroll);
          }
        }

        window.scrollTo({
          top: offset,
          behavior: options.duration === 0 ? "auto" : "smooth",
        });
      },
    },
    {
      key: "update",
      value: function update() {
        this.addElements();
        this.detectElements();
      },
    },
    {
      key: "destroy",
      value: function destroy() {
        _get(_getPrototypeOf(_default.prototype), "destroy", this).call(this);

        window.removeEventListener("scroll", this.checkScroll, false);
      },
    },
  ]);

  return _default;
})(_default);

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError(
      "Object.assign cannot be called with null or undefined"
    );
  }

  return Object(val);
}

function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    }

    // Detect buggy property enumeration order in older V8 versions.

    // https://bugs.chromium.org/p/v8/issues/detail?id=4118
    var test1 = new String("abc"); // eslint-disable-line no-new-wrappers
    test1[5] = "de";
    if (Object.getOwnPropertyNames(test1)[0] === "5") {
      return false;
    }

    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
    var test2 = {};
    for (var i = 0; i < 10; i++) {
      test2["_" + String.fromCharCode(i)] = i;
    }
    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });
    if (order2.join("") !== "0123456789") {
      return false;
    }

    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
    var test3 = {};
    "abcdefghijklmnopqrst".split("").forEach(function (letter) {
      test3[letter] = letter;
    });
    if (
      Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst"
    ) {
      return false;
    }

    return true;
  } catch (err) {
    // We don't expect any of the above to throw, but better to be safe.
    return false;
  }
}

var objectAssign = shouldUseNative()
  ? Object.assign
  : function (target, source) {
      var from;
      var to = toObject(target);
      var symbols;

      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);

        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }

        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }

      return to;
    };

function E() {
  // Keep this empty so it's easier to inherit from
  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
}

E.prototype = {
  on: function (name, callback, ctx) {
    var e = this.e || (this.e = {});

    (e[name] || (e[name] = [])).push({
      fn: callback,
      ctx: ctx,
    });

    return this;
  },

  once: function (name, callback, ctx) {
    var self = this;
    function listener() {
      self.off(name, listener);
      callback.apply(ctx, arguments);
    }
    listener._ = callback;
    return this.on(name, listener, ctx);
  },

  emit: function (name) {
    var data = [].slice.call(arguments, 1);
    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
    var i = 0;
    var len = evtArr.length;

    for (i; i < len; i++) {
      evtArr[i].fn.apply(evtArr[i].ctx, data);
    }

    return this;
  },

  off: function (name, callback) {
    var e = this.e || (this.e = {});
    var evts = e[name];
    var liveEvents = [];

    if (evts && callback) {
      for (var i = 0, len = evts.length; i < len; i++) {
        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
          liveEvents.push(evts[i]);
      }
    }

    // Remove event from queue to prevent memory leak
    // Suggested by https://github.com/lazd
    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

    liveEvents.length ? (e[name] = liveEvents) : delete e[name];

    return this;
  },
};

var tinyEmitter = E;

var lethargy = createCommonjsModule(function (module, exports) {
  // Generated by CoffeeScript 1.9.2
  (function () {
    var root;

    root = exports !== null ? exports : this;

    root.Lethargy = (function () {
      function Lethargy(stability, sensitivity, tolerance, delay) {
        this.stability = stability != null ? Math.abs(stability) : 8;
        this.sensitivity =
          sensitivity != null ? 1 + Math.abs(sensitivity) : 100;
        this.tolerance = tolerance != null ? 1 + Math.abs(tolerance) : 1.1;
        this.delay = delay != null ? delay : 150;
        this.lastUpDeltas = function () {
          var i, ref, results;
          results = [];
          for (
            i = 1, ref = this.stability * 2;
            1 <= ref ? i <= ref : i >= ref;
            1 <= ref ? i++ : i--
          ) {
            results.push(null);
          }
          return results;
        }.call(this);
        this.lastDownDeltas = function () {
          var i, ref, results;
          results = [];
          for (
            i = 1, ref = this.stability * 2;
            1 <= ref ? i <= ref : i >= ref;
            1 <= ref ? i++ : i--
          ) {
            results.push(null);
          }
          return results;
        }.call(this);
        this.deltasTimestamp = function () {
          var i, ref, results;
          results = [];
          for (
            i = 1, ref = this.stability * 2;
            1 <= ref ? i <= ref : i >= ref;
            1 <= ref ? i++ : i--
          ) {
            results.push(null);
          }
          return results;
        }.call(this);
      }

      Lethargy.prototype.check = function (e) {
        var lastDelta;
        e = e.originalEvent || e;
        if (e.wheelDelta != null) {
          lastDelta = e.wheelDelta;
        } else if (e.deltaY != null) {
          lastDelta = e.deltaY * -40;
        } else if (e.detail != null || e.detail === 0) {
          lastDelta = e.detail * -40;
        }
        this.deltasTimestamp.push(Date.now());
        this.deltasTimestamp.shift();
        if (lastDelta > 0) {
          this.lastUpDeltas.push(lastDelta);
          this.lastUpDeltas.shift();
          return this.isInertia(1);
        } else {
          this.lastDownDeltas.push(lastDelta);
          this.lastDownDeltas.shift();
          return this.isInertia(-1);
        }
      };

      Lethargy.prototype.isInertia = function (direction) {
        var lastDeltas,
          lastDeltasNew,
          lastDeltasOld,
          newAverage,
          newSum,
          oldAverage,
          oldSum;
        lastDeltas = direction === -1 ? this.lastDownDeltas : this.lastUpDeltas;
        if (lastDeltas[0] === null) {
          return direction;
        }
        if (
          this.deltasTimestamp[this.stability * 2 - 2] + this.delay >
            Date.now() &&
          lastDeltas[0] === lastDeltas[this.stability * 2 - 1]
        ) {
          return false;
        }
        lastDeltasOld = lastDeltas.slice(0, this.stability);
        lastDeltasNew = lastDeltas.slice(this.stability, this.stability * 2);
        oldSum = lastDeltasOld.reduce(function (t, s) {
          return t + s;
        });
        newSum = lastDeltasNew.reduce(function (t, s) {
          return t + s;
        });
        oldAverage = oldSum / lastDeltasOld.length;
        newAverage = newSum / lastDeltasNew.length;
        if (
          Math.abs(oldAverage) < Math.abs(newAverage * this.tolerance) &&
          this.sensitivity < Math.abs(newAverage)
        ) {
          return direction;
        } else {
          return false;
        }
      };

      Lethargy.prototype.showLastUpDeltas = function () {
        return this.lastUpDeltas;
      };

      Lethargy.prototype.showLastDownDeltas = function () {
        return this.lastDownDeltas;
      };

      return Lethargy;
    })();
  }).call(commonjsGlobal);
});

var support = (function getSupport() {
  return {
    hasWheelEvent: "onwheel" in document,
    hasMouseWheelEvent: "onmousewheel" in document,
    hasTouch:
      "ontouchstart" in window ||
      window.TouchEvent ||
      (window.DocumentTouch && document instanceof DocumentTouch),
    hasTouchWin: navigator.msMaxTouchPoints && navigator.msMaxTouchPoints > 1,
    hasPointer: !!window.navigator.msPointerEnabled,
    hasKeyDown: "onkeydown" in document,
    isFirefox: navigator.userAgent.indexOf("Firefox") > -1,
  };
})();

var toString = Object.prototype.toString,
  hasOwnProperty$1 = Object.prototype.hasOwnProperty;

var bindallStandalone = function (object) {
  if (!object) return console.warn("bindAll requires at least one argument.");

  var functions = Array.prototype.slice.call(arguments, 1);

  if (functions.length === 0) {
    for (var method in object) {
      if (hasOwnProperty$1.call(object, method)) {
        if (
          typeof object[method] == "function" &&
          toString.call(object[method]) == "[object Function]"
        ) {
          functions.push(method);
        }
      }
    }
  }

  for (var i = 0; i < functions.length; i++) {
    var f = functions[i];
    object[f] = bind(object[f], object);
  }
};

/*
    Faster bind without specific-case checking. (see https://coderwall.com/p/oi3j3w).
    bindAll is only needed for events binding so no need to make slow fixes for constructor
    or partial application.
*/
function bind(func, context) {
  return function () {
    return func.apply(context, arguments);
  };
}

var Lethargy = lethargy.Lethargy;

var EVT_ID = "virtualscroll";

var src = VirtualScroll;

var keyCodes = {
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40,
  SPACE: 32,
};

function VirtualScroll(options) {
  bindallStandalone(
    this,
    "_onWheel",
    "_onMouseWheel",
    "_onTouchStart",
    "_onTouchMove",
    "_onKeyDown"
  );

  this.el = window;
  if (options && options.el) {
    this.el = options.el;
    delete options.el;
  }
  this.options = objectAssign(
    {
      mouseMultiplier: 1,
      touchMultiplier: 2,
      firefoxMultiplier: 15,
      keyStep: 120,
      preventTouch: false,
      unpreventTouchClass: "vs-touchmove-allowed",
      limitInertia: false,
      useKeyboard: true,
      useTouch: true,
    },
    options
  );

  if (this.options.limitInertia) this._lethargy = new Lethargy();

  this._emitter = new tinyEmitter();
  this._event = {
    y: 0,
    x: 0,
    deltaX: 0,
    deltaY: 0,
  };
  this.touchStartX = null;
  this.touchStartY = null;
  this.bodyTouchAction = null;

  if (this.options.passive !== undefined) {
    this.listenerOptions = { passive: this.options.passive };
  }
}

VirtualScroll.prototype._notify = function (e) {
  var evt = this._event;
  evt.x += evt.deltaX;
  evt.y += evt.deltaY;

  this._emitter.emit(EVT_ID, {
    x: evt.x,
    y: evt.y,
    deltaX: evt.deltaX,
    deltaY: evt.deltaY,
    originalEvent: e,
  });
};

VirtualScroll.prototype._onWheel = function (e) {
  var options = this.options;
  if (this._lethargy && this._lethargy.check(e) === false) return;
  var evt = this._event;

  // In Chrome and in Firefox (at least the new one)
  evt.deltaX = e.wheelDeltaX || e.deltaX * -1;
  evt.deltaY = e.wheelDeltaY || e.deltaY * -1;

  // for our purpose deltamode = 1 means user is on a wheel mouse, not touch pad
  // real meaning: https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent#Delta_modes
  if (support.isFirefox && e.deltaMode == 1) {
    evt.deltaX *= options.firefoxMultiplier;
    evt.deltaY *= options.firefoxMultiplier;
  }

  evt.deltaX *= options.mouseMultiplier;
  evt.deltaY *= options.mouseMultiplier;

  this._notify(e);
};

VirtualScroll.prototype._onMouseWheel = function (e) {
  if (this.options.limitInertia && this._lethargy.check(e) === false) return;

  var evt = this._event;

  // In Safari, IE and in Chrome if 'wheel' isn't defined
  evt.deltaX = e.wheelDeltaX ? e.wheelDeltaX : 0;
  evt.deltaY = e.wheelDeltaY ? e.wheelDeltaY : e.wheelDelta;

  this._notify(e);
};

VirtualScroll.prototype._onTouchStart = function (e) {
  var t = e.targetTouches ? e.targetTouches[0] : e;
  this.touchStartX = t.pageX;
  this.touchStartY = t.pageY;
};

VirtualScroll.prototype._onTouchMove = function (e) {
  var options = this.options;
  if (
    options.preventTouch &&
    !e.target.classList.contains(options.unpreventTouchClass)
  ) {
    e.preventDefault();
  }

  var evt = this._event;

  var t = e.targetTouches ? e.targetTouches[0] : e;

  evt.deltaX = (t.pageX - this.touchStartX) * options.touchMultiplier;
  evt.deltaY = (t.pageY - this.touchStartY) * options.touchMultiplier;

  this.touchStartX = t.pageX;
  this.touchStartY = t.pageY;

  this._notify(e);
};

VirtualScroll.prototype._onKeyDown = function (e) {
  var evt = this._event;
  evt.deltaX = evt.deltaY = 0;
  var windowHeight = window.innerHeight - 40;

  switch (e.keyCode) {
    case keyCodes.LEFT:
    case keyCodes.UP:
      evt.deltaY = this.options.keyStep;
      break;

    case keyCodes.RIGHT:
    case keyCodes.DOWN:
      evt.deltaY = -this.options.keyStep;
      break;
    case e.shiftKey:
      evt.deltaY = windowHeight;
      break;
    case keyCodes.SPACE:
      evt.deltaY = -windowHeight;
      break;
    default:
      return;
  }

  this._notify(e);
};

VirtualScroll.prototype._bind = function () {
  if (support.hasWheelEvent)
    this.el.addEventListener("wheel", this._onWheel, this.listenerOptions);
  if (support.hasMouseWheelEvent)
    this.el.addEventListener(
      "mousewheel",
      this._onMouseWheel,
      this.listenerOptions
    );

  if (support.hasTouch && this.options.useTouch) {
    this.el.addEventListener(
      "touchstart",
      this._onTouchStart,
      this.listenerOptions
    );
    this.el.addEventListener(
      "touchmove",
      this._onTouchMove,
      this.listenerOptions
    );
  }

  if (support.hasPointer && support.hasTouchWin) {
    this.bodyTouchAction = document.body.style.msTouchAction;
    document.body.style.msTouchAction = "none";
    this.el.addEventListener("MSPointerDown", this._onTouchStart, true);
    this.el.addEventListener("MSPointerMove", this._onTouchMove, true);
  }

  if (support.hasKeyDown && this.options.useKeyboard)
    document.addEventListener("keydown", this._onKeyDown);
};

VirtualScroll.prototype._unbind = function () {
  if (support.hasWheelEvent)
    this.el.removeEventListener("wheel", this._onWheel);
  if (support.hasMouseWheelEvent)
    this.el.removeEventListener("mousewheel", this._onMouseWheel);

  if (support.hasTouch) {
    this.el.removeEventListener("touchstart", this._onTouchStart);
    this.el.removeEventListener("touchmove", this._onTouchMove);
  }

  if (support.hasPointer && support.hasTouchWin) {
    document.body.style.msTouchAction = this.bodyTouchAction;
    this.el.removeEventListener("MSPointerDown", this._onTouchStart, true);
    this.el.removeEventListener("MSPointerMove", this._onTouchMove, true);
  }

  if (support.hasKeyDown && this.options.useKeyboard)
    document.removeEventListener("keydown", this._onKeyDown);
};

VirtualScroll.prototype.on = function (cb, ctx) {
  this._emitter.on(EVT_ID, cb, ctx);

  var events = this._emitter.e;
  if (events && events[EVT_ID] && events[EVT_ID].length === 1) this._bind();
};

VirtualScroll.prototype.off = function (cb, ctx) {
  this._emitter.off(EVT_ID, cb, ctx);

  var events = this._emitter.e;
  if (!events[EVT_ID] || events[EVT_ID].length <= 0) this._unbind();
};

VirtualScroll.prototype.reset = function () {
  var evt = this._event;
  evt.x = 0;
  evt.y = 0;
};

VirtualScroll.prototype.destroy = function () {
  this._emitter.off();
  this._unbind();
};

function lerp(start, end, amt) {
  return (1 - amt) * start + amt * end;
}

function getTranslate(el) {
  var translate = {};
  if (!window.getComputedStyle) return;
  var style = getComputedStyle(el);
  var transform =
    style.transform || style.webkitTransform || style.mozTransform;
  var mat = transform.match(/^matrix3d\((.+)\)$/);

  if (mat) {
    translate.x = mat ? parseFloat(mat[1].split(", ")[12]) : 0;
    translate.y = mat ? parseFloat(mat[1].split(", ")[13]) : 0;
  } else {
    mat = transform.match(/^matrix\((.+)\)$/);
    translate.x = mat ? parseFloat(mat[1].split(", ")[4]) : 0;
    translate.y = mat ? parseFloat(mat[1].split(", ")[5]) : 0;
  }

  return translate;
}

/**
 * Returns an array containing all the parent nodes of the given node
 * @param  {object} node
 * @return {array} parent nodes
 */
function getParents(elem) {
  // Set up a parent array
  var parents = []; // Push each parent element to the array

  for (; elem && elem !== document; elem = elem.parentNode) {
    parents.push(elem);
  } // Return our parent array

  return parents;
} // https://gomakethings.com/how-to-get-the-closest-parent-element-with-a-matching-selector-using-vanilla-javascript/

/**
 * https://github.com/gre/bezier-easing
 * BezierEasing - use bezier curve for transition easing function
 * by Gaëtan Renaudeau 2014 - 2015 – MIT License
 */

// These values are established by empiricism with tests (tradeoff: performance VS precision)
var NEWTON_ITERATIONS = 4;
var NEWTON_MIN_SLOPE = 0.001;
var SUBDIVISION_PRECISION = 0.0000001;
var SUBDIVISION_MAX_ITERATIONS = 10;

var kSplineTableSize = 11;
var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

var float32ArraySupported = typeof Float32Array === "function";

function A(aA1, aA2) {
  return 1.0 - 3.0 * aA2 + 3.0 * aA1;
}
function B(aA1, aA2) {
  return 3.0 * aA2 - 6.0 * aA1;
}
function C(aA1) {
  return 3.0 * aA1;
}

// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
function calcBezier(aT, aA1, aA2) {
  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
}

// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
function getSlope(aT, aA1, aA2) {
  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
}

function binarySubdivide(aX, aA, aB, mX1, mX2) {
  var currentX,
    currentT,
    i = 0;
  do {
    currentT = aA + (aB - aA) / 2.0;
    currentX = calcBezier(currentT, mX1, mX2) - aX;
    if (currentX > 0.0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (
    Math.abs(currentX) > SUBDIVISION_PRECISION &&
    ++i < SUBDIVISION_MAX_ITERATIONS
  );
  return currentT;
}

function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
    var currentSlope = getSlope(aGuessT, mX1, mX2);
    if (currentSlope === 0.0) {
      return aGuessT;
    }
    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
    aGuessT -= currentX / currentSlope;
  }
  return aGuessT;
}

function LinearEasing(x) {
  return x;
}

var src$1 = function bezier(mX1, mY1, mX2, mY2) {
  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
    throw new Error("bezier x values must be in [0, 1] range");
  }

  if (mX1 === mY1 && mX2 === mY2) {
    return LinearEasing;
  }

  // Precompute samples table
  var sampleValues = float32ArraySupported
    ? new Float32Array(kSplineTableSize)
    : new Array(kSplineTableSize);
  for (var i = 0; i < kSplineTableSize; ++i) {
    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
  }

  function getTForX(aX) {
    var intervalStart = 0.0;
    var currentSample = 1;
    var lastSample = kSplineTableSize - 1;

    for (
      ;
      currentSample !== lastSample && sampleValues[currentSample] <= aX;
      ++currentSample
    ) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;

    // Interpolate to provide an initial guess for t
    var dist =
      (aX - sampleValues[currentSample]) /
      (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    var guessForT = intervalStart + dist * kSampleStepSize;

    var initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0.0) {
      return guessForT;
    } else {
      return binarySubdivide(
        aX,
        intervalStart,
        intervalStart + kSampleStepSize,
        mX1,
        mX2
      );
    }
  }

  return function BezierEasing(x) {
    // Because JavaScript number are imprecise, we should guarantee the extremes are right.
    if (x === 0) {
      return 0;
    }
    if (x === 1) {
      return 1;
    }
    return calcBezier(getTForX(x), mY1, mY2);
  };
};

var keyCodes$1 = {
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40,
  SPACE: 32,
  TAB: 9,
  PAGEUP: 33,
  PAGEDOWN: 34,
  HOME: 36,
  END: 35,
};

var _default$2 = /*#__PURE__*/ (function (_Core) {
  _inherits(_default, _Core);

  var _super = _createSuper(_default);

  function _default() {
    var _this;

    var options =
      arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, _default);

    if (history.scrollRestoration) {
      history.scrollRestoration = "manual";
    }

    window.scrollTo(0, 0);
    _this = _super.call(this, options);
    if (_this.inertia) _this.lerp = _this.inertia * 0.1;
    _this.isScrolling = false;
    _this.isDraggingScrollbar = false;
    _this.isTicking = false;
    _this.hasScrollTicking = false;
    _this.parallaxElements = {};
    _this.stop = false;
    _this.scrollbarContainer = options.scrollbarContainer;
    _this.checkKey = _this.checkKey.bind(_assertThisInitialized(_this));
    window.addEventListener("keydown", _this.checkKey, false);
    return _this;
  }

  _createClass(_default, [
    {
      key: "init",
      value: function init() {
        var _this2 = this;

        this.html.classList.add(this.smoothClass);
        this.html.setAttribute(
          "data-".concat(this.name, "-direction"),
          this.direction
        );
        this.instance = _objectSpread2(
          {
            delta: {
              x: this.initPosition.x,
              y: this.initPosition.y,
            },
            scroll: {
              x: this.initPosition.x,
              y: this.initPosition.y,
            },
          },
          this.instance
        );
        this.vs = new src({
          el: this.scrollFromAnywhere ? document : this.el,
          mouseMultiplier: navigator.platform.indexOf("Win") > -1 ? 1 : 0.4,
          firefoxMultiplier: this.firefoxMultiplier,
          touchMultiplier: this.touchMultiplier,
          useKeyboard: false,
          passive: true,
        });
        this.vs.on(function (e) {
          if (_this2.stop) {
            return;
          }

          if (!_this2.isDraggingScrollbar) {
            requestAnimationFrame(function () {
              _this2.updateDelta(e);

              if (!_this2.isScrolling) _this2.startScrolling();
            });
          }
        });
        this.setScrollLimit();
        this.initScrollBar();
        this.addSections();
        this.addElements();
        this.checkScroll(true);
        this.transformElements(true, true);

        _get(_getPrototypeOf(_default.prototype), "init", this).call(this);
      },
    },
    {
      key: "setScrollLimit",
      value: function setScrollLimit() {
        this.instance.limit.y = this.el.offsetHeight - this.windowHeight;

        if (this.direction === "horizontal") {
          var totalWidth = 0;
          var nodes = this.el.children;

          for (var i = 0; i < nodes.length; i++) {
            totalWidth += nodes[i].offsetWidth;
          }

          this.instance.limit.x = totalWidth - this.windowWidth;
        }
      },
    },
    {
      key: "startScrolling",
      value: function startScrolling() {
        this.startScrollTs = Date.now(); // Record timestamp

        this.isScrolling = true;
        this.checkScroll();
        this.html.classList.add(this.scrollingClass);
      },
    },
    {
      key: "stopScrolling",
      value: function stopScrolling() {
        cancelAnimationFrame(this.checkScrollRaf); // Prevent checkScroll to continue looping
        //Pevent scrollbar glitch/locking

        this.startScrollTs = undefined;

        if (this.scrollToRaf) {
          cancelAnimationFrame(this.scrollToRaf);
          this.scrollToRaf = null;
        }

        this.isScrolling = false;
        this.instance.scroll.y = Math.round(this.instance.scroll.y);
        this.html.classList.remove(this.scrollingClass);
      },
    },
    {
      key: "checkKey",
      value: function checkKey(e) {
        var _this3 = this;

        if (this.stop) {
          // If we are stopped, we don't want any scroll to occur because of a keypress
          // Prevent tab to scroll to activeElement
          if (e.keyCode == keyCodes$1.TAB) {
            requestAnimationFrame(function () {
              // Make sure native scroll is always at top of page
              _this3.html.scrollTop = 0;
              document.body.scrollTop = 0;
              _this3.html.scrollLeft = 0;
              document.body.scrollLeft = 0;
            });
          }

          return;
        }

        switch (e.keyCode) {
          case keyCodes$1.TAB:
            // Do not remove the RAF
            // It allows to override the browser's native scrollTo, which is essential
            requestAnimationFrame(function () {
              // Make sure native scroll is always at top of page
              _this3.html.scrollTop = 0;
              document.body.scrollTop = 0;
              _this3.html.scrollLeft = 0;
              document.body.scrollLeft = 0; // Request scrollTo on the focusedElement, putting it at the center of the screen

              _this3.scrollTo(document.activeElement, {
                offset: -window.innerHeight / 2,
              });
            });
            break;

          case keyCodes$1.UP:
            if (this.isActiveElementScrollSensitive()) {
              this.instance.delta[this.directionAxis] -= 240;
            }

            break;

          case keyCodes$1.DOWN:
            if (this.isActiveElementScrollSensitive()) {
              this.instance.delta[this.directionAxis] += 240;
            }

            break;

          case keyCodes$1.PAGEUP:
            this.instance.delta[this.directionAxis] -= window.innerHeight;
            break;

          case keyCodes$1.PAGEDOWN:
            this.instance.delta[this.directionAxis] += window.innerHeight;
            break;

          case keyCodes$1.HOME:
            this.instance.delta[this.directionAxis] -=
              this.instance.limit[this.directionAxis];
            break;

          case keyCodes$1.END:
            this.instance.delta[this.directionAxis] +=
              this.instance.limit[this.directionAxis];
            break;

          case keyCodes$1.SPACE:
            if (this.isActiveElementScrollSensitive()) {
              if (e.shiftKey) {
                this.instance.delta[this.directionAxis] -= window.innerHeight;
              } else {
                this.instance.delta[this.directionAxis] += window.innerHeight;
              }
            }

            break;

          default:
            return;
        }

        if (this.instance.delta[this.directionAxis] < 0)
          this.instance.delta[this.directionAxis] = 0;
        if (
          this.instance.delta[this.directionAxis] >
          this.instance.limit[this.directionAxis]
        )
          this.instance.delta[this.directionAxis] =
            this.instance.limit[this.directionAxis];
        this.stopScrolling(); // Stop any movement, allows to kill any other `scrollTo` still happening

        this.isScrolling = true;
        this.checkScroll();
        this.html.classList.add(this.scrollingClass);
      },
    },
    {
      key: "isActiveElementScrollSensitive",
      value: function isActiveElementScrollSensitive() {
        return (
          !(document.activeElement instanceof HTMLInputElement) &&
          !(document.activeElement instanceof HTMLTextAreaElement) &&
          !(document.activeElement instanceof HTMLButtonElement) &&
          !(document.activeElement instanceof HTMLSelectElement)
        );
      },
    },
    {
      key: "checkScroll",
      value: function checkScroll() {
        var _this4 = this;

        var forced =
          arguments.length > 0 && arguments[0] !== undefined
            ? arguments[0]
            : false;

        if (forced || this.isScrolling || this.isDraggingScrollbar) {
          if (!this.hasScrollTicking) {
            this.checkScrollRaf = requestAnimationFrame(function () {
              return _this4.checkScroll();
            });
            this.hasScrollTicking = true;
          }

          this.updateScroll();
          var distance = Math.abs(
            this.instance.delta[this.directionAxis] -
              this.instance.scroll[this.directionAxis]
          );
          var timeSinceStart = Date.now() - this.startScrollTs; // Get the time since the scroll was started: the scroll can be stopped again only past 100ms

          if (
            !this.animatingScroll &&
            timeSinceStart > 100 &&
            ((distance < 0.5 && this.instance.delta[this.directionAxis] != 0) ||
              (distance < 0.5 && this.instance.delta[this.directionAxis] == 0))
          ) {
            this.stopScrolling();
          }

          Object.entries(this.sections).forEach(function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2);
            _ref2[0];
            var section = _ref2[1];

            if (
              section.persistent ||
              (_this4.instance.scroll[_this4.directionAxis] >
                section.offset[_this4.directionAxis] &&
                _this4.instance.scroll[_this4.directionAxis] <
                  section.limit[_this4.directionAxis])
            ) {
              if (_this4.direction === "horizontal") {
                _this4.transform(
                  section.el,
                  -_this4.instance.scroll[_this4.directionAxis],
                  0
                );
              } else {
                _this4.transform(
                  section.el,
                  0,
                  -_this4.instance.scroll[_this4.directionAxis]
                );
              }

              if (!section.inView) {
                section.inView = true;
                section.el.style.opacity = 1;
                section.el.style.pointerEvents = "all";
                section.el.setAttribute(
                  "data-".concat(_this4.name, "-section-inview"),
                  ""
                );
              }
            } else {
              if (section.inView || forced) {
                section.inView = false;
                section.el.style.opacity = 0;
                section.el.style.pointerEvents = "none";
                section.el.removeAttribute(
                  "data-".concat(_this4.name, "-section-inview")
                );
              }

              _this4.transform(section.el, 0, 0);
            }
          });

          if (this.getDirection) {
            this.addDirection();
          }

          if (this.getSpeed) {
            this.addSpeed();
            this.speedTs = Date.now();
          }

          this.detectElements();
          this.transformElements();

          if (this.hasScrollbar) {
            var scrollBarTranslation =
              (this.instance.scroll[this.directionAxis] /
                this.instance.limit[this.directionAxis]) *
              this.scrollBarLimit[this.directionAxis];

            if (this.direction === "horizontal") {
              this.transform(this.scrollbarThumb, scrollBarTranslation, 0);
            } else {
              this.transform(this.scrollbarThumb, 0, scrollBarTranslation);
            }
          }

          _get(_getPrototypeOf(_default.prototype), "checkScroll", this).call(
            this
          );

          this.hasScrollTicking = false;
        }
      },
    },
    {
      key: "resize",
      value: function resize() {
        this.windowHeight = window.innerHeight;
        this.windowWidth = window.innerWidth;
        this.checkContext();
        this.windowMiddle = {
          x: this.windowWidth / 2,
          y: this.windowHeight / 2,
        };
        this.update();
      },
    },
    {
      key: "updateDelta",
      value: function updateDelta(e) {
        var delta;
        var gestureDirection =
          this[this.context] && this[this.context].gestureDirection
            ? this[this.context].gestureDirection
            : this.gestureDirection;

        if (gestureDirection === "both") {
          delta = e.deltaX + e.deltaY;
        } else if (gestureDirection === "vertical") {
          delta = e.deltaY;
        } else if (gestureDirection === "horizontal") {
          delta = e.deltaX;
        } else {
          delta = e.deltaY;
        }

        this.instance.delta[this.directionAxis] -= delta * this.multiplier;
        if (this.instance.delta[this.directionAxis] < 0)
          this.instance.delta[this.directionAxis] = 0;
        if (
          this.instance.delta[this.directionAxis] >
          this.instance.limit[this.directionAxis]
        )
          this.instance.delta[this.directionAxis] =
            this.instance.limit[this.directionAxis];
      },
    },
    {
      key: "updateScroll",
      value: function updateScroll(e) {
        if (this.isScrolling || this.isDraggingScrollbar) {
          this.instance.scroll[this.directionAxis] = lerp(
            this.instance.scroll[this.directionAxis],
            this.instance.delta[this.directionAxis],
            this.lerp
          );
        } else {
          if (
            this.instance.scroll[this.directionAxis] >
            this.instance.limit[this.directionAxis]
          ) {
            this.setScroll(
              this.instance.scroll[this.directionAxis],
              this.instance.limit[this.directionAxis]
            );
          } else if (this.instance.scroll.y < 0) {
            this.setScroll(this.instance.scroll[this.directionAxis], 0);
          } else {
            this.setScroll(
              this.instance.scroll[this.directionAxis],
              this.instance.delta[this.directionAxis]
            );
          }
        }
      },
    },
    {
      key: "addDirection",
      value: function addDirection() {
        if (this.instance.delta.y > this.instance.scroll.y) {
          if (this.instance.direction !== "down") {
            this.instance.direction = "down";
          }
        } else if (this.instance.delta.y < this.instance.scroll.y) {
          if (this.instance.direction !== "up") {
            this.instance.direction = "up";
          }
        }

        if (this.instance.delta.x > this.instance.scroll.x) {
          if (this.instance.direction !== "right") {
            this.instance.direction = "right";
          }
        } else if (this.instance.delta.x < this.instance.scroll.x) {
          if (this.instance.direction !== "left") {
            this.instance.direction = "left";
          }
        }
      },
    },
    {
      key: "addSpeed",
      value: function addSpeed() {
        if (
          this.instance.delta[this.directionAxis] !=
          this.instance.scroll[this.directionAxis]
        ) {
          this.instance.speed =
            (this.instance.delta[this.directionAxis] -
              this.instance.scroll[this.directionAxis]) /
            Math.max(1, Date.now() - this.speedTs);
        } else {
          this.instance.speed = 0;
        }
      },
    },
    {
      key: "initScrollBar",
      value: function initScrollBar() {
        this.scrollbar = document.createElement("span");
        this.scrollbarThumb = document.createElement("span");
        this.scrollbar.classList.add("".concat(this.scrollbarClass));
        this.scrollbarThumb.classList.add(
          "".concat(this.scrollbarClass, "_thumb")
        );
        this.scrollbar.append(this.scrollbarThumb);

        if (this.scrollbarContainer) {
          this.scrollbarContainer.append(this.scrollbar);
        } else {
          document.body.append(this.scrollbar);
        } // Scrollbar Events

        this.getScrollBar = this.getScrollBar.bind(this);
        this.releaseScrollBar = this.releaseScrollBar.bind(this);
        this.moveScrollBar = this.moveScrollBar.bind(this);
        this.scrollbarThumb.addEventListener("mousedown", this.getScrollBar);
        window.addEventListener("mouseup", this.releaseScrollBar);
        window.addEventListener("mousemove", this.moveScrollBar); // Set scrollbar values

        this.hasScrollbar = false;

        if (this.direction == "horizontal") {
          if (this.instance.limit.x + this.windowWidth <= this.windowWidth) {
            return;
          }
        } else {
          if (this.instance.limit.y + this.windowHeight <= this.windowHeight) {
            return;
          }
        }

        this.hasScrollbar = true;
        this.scrollbarBCR = this.scrollbar.getBoundingClientRect();
        this.scrollbarHeight = this.scrollbarBCR.height;
        this.scrollbarWidth = this.scrollbarBCR.width;

        if (this.direction === "horizontal") {
          this.scrollbarThumb.style.width = "".concat(
            (this.scrollbarWidth * this.scrollbarWidth) /
              (this.instance.limit.x + this.scrollbarWidth),
            "px"
          );
        } else {
          this.scrollbarThumb.style.height = "".concat(
            (this.scrollbarHeight * this.scrollbarHeight) /
              (this.instance.limit.y + this.scrollbarHeight),
            "px"
          );
        }

        this.scrollbarThumbBCR = this.scrollbarThumb.getBoundingClientRect();
        this.scrollBarLimit = {
          x: this.scrollbarWidth - this.scrollbarThumbBCR.width,
          y: this.scrollbarHeight - this.scrollbarThumbBCR.height,
        };
      },
    },
    {
      key: "reinitScrollBar",
      value: function reinitScrollBar() {
        this.hasScrollbar = false;

        if (this.direction == "horizontal") {
          if (this.instance.limit.x + this.windowWidth <= this.windowWidth) {
            return;
          }
        } else {
          if (this.instance.limit.y + this.windowHeight <= this.windowHeight) {
            return;
          }
        }

        this.hasScrollbar = true;
        this.scrollbarBCR = this.scrollbar.getBoundingClientRect();
        this.scrollbarHeight = this.scrollbarBCR.height;
        this.scrollbarWidth = this.scrollbarBCR.width;

        if (this.direction === "horizontal") {
          this.scrollbarThumb.style.width = "".concat(
            (this.scrollbarWidth * this.scrollbarWidth) /
              (this.instance.limit.x + this.scrollbarWidth),
            "px"
          );
        } else {
          this.scrollbarThumb.style.height = "".concat(
            (this.scrollbarHeight * this.scrollbarHeight) /
              (this.instance.limit.y + this.scrollbarHeight),
            "px"
          );
        }

        this.scrollbarThumbBCR = this.scrollbarThumb.getBoundingClientRect();
        this.scrollBarLimit = {
          x: this.scrollbarWidth - this.scrollbarThumbBCR.width,
          y: this.scrollbarHeight - this.scrollbarThumbBCR.height,
        };
      },
    },
    {
      key: "destroyScrollBar",
      value: function destroyScrollBar() {
        this.scrollbarThumb.removeEventListener("mousedown", this.getScrollBar);
        window.removeEventListener("mouseup", this.releaseScrollBar);
        window.removeEventListener("mousemove", this.moveScrollBar);
        this.scrollbar.remove();
      },
    },
    {
      key: "getScrollBar",
      value: function getScrollBar(e) {
        this.isDraggingScrollbar = true;
        this.checkScroll();
        this.html.classList.remove(this.scrollingClass);
        this.html.classList.add(this.draggingClass);
      },
    },
    {
      key: "releaseScrollBar",
      value: function releaseScrollBar(e) {
        this.isDraggingScrollbar = false;

        if (this.isScrolling) {
          this.html.classList.add(this.scrollingClass);
        }

        this.html.classList.remove(this.draggingClass);
      },
    },
    {
      key: "moveScrollBar",
      value: function moveScrollBar(e) {
        var _this5 = this;

        if (this.isDraggingScrollbar) {
          requestAnimationFrame(function () {
            var x =
              ((((e.clientX - _this5.scrollbarBCR.left) * 100) /
                _this5.scrollbarWidth) *
                _this5.instance.limit.x) /
              100;
            var y =
              ((((e.clientY - _this5.scrollbarBCR.top) * 100) /
                _this5.scrollbarHeight) *
                _this5.instance.limit.y) /
              100;

            if (y > 0 && y < _this5.instance.limit.y) {
              _this5.instance.delta.y = y;
            }

            if (x > 0 && x < _this5.instance.limit.x) {
              _this5.instance.delta.x = x;
            }
          });
        }
      },
    },
    {
      key: "addElements",
      value: function addElements() {
        var _this6 = this;

        this.els = {};
        this.parallaxElements = {}; // this.sections.forEach((section, y) => {

        var els = this.el.querySelectorAll("[data-".concat(this.name, "]"));
        els.forEach(function (el, index) {
          // Try and find the target's parent section
          var targetParents = getParents(el);
          var section = Object.entries(_this6.sections)
            .map(function (_ref3) {
              var _ref4 = _slicedToArray(_ref3, 2);
              _ref4[0];
              var section = _ref4[1];

              return section;
            })
            .find(function (section) {
              return targetParents.includes(section.el);
            });
          var cl = el.dataset[_this6.name + "Class"] || _this6["class"];
          var id =
            typeof el.dataset[_this6.name + "Id"] === "string"
              ? el.dataset[_this6.name + "Id"]
              : "el" + index;
          var top;
          var left;
          var repeat = el.dataset[_this6.name + "Repeat"];
          var call = el.dataset[_this6.name + "Call"];
          var position = el.dataset[_this6.name + "Position"];
          var delay = el.dataset[_this6.name + "Delay"];
          var direction = el.dataset[_this6.name + "Direction"];
          var sticky = typeof el.dataset[_this6.name + "Sticky"] === "string";
          var speed = el.dataset[_this6.name + "Speed"]
            ? parseFloat(el.dataset[_this6.name + "Speed"]) / 10
            : false;
          var offset =
            typeof el.dataset[_this6.name + "Offset"] === "string"
              ? el.dataset[_this6.name + "Offset"].split(",")
              : _this6.offset;
          var target = el.dataset[_this6.name + "Target"];
          var targetEl;

          if (target !== undefined) {
            targetEl = document.querySelector("".concat(target));
          } else {
            targetEl = el;
          }

          var targetElBCR = targetEl.getBoundingClientRect();

          if (section === null) {
            top =
              targetElBCR.top +
              _this6.instance.scroll.y -
              getTranslate(targetEl).y;
            left =
              targetElBCR.left +
              _this6.instance.scroll.x -
              getTranslate(targetEl).x;
          } else {
            if (!section.inView) {
              top =
                targetElBCR.top -
                getTranslate(section.el).y -
                getTranslate(targetEl).y;
              left =
                targetElBCR.left -
                getTranslate(section.el).x -
                getTranslate(targetEl).x;
            } else {
              top =
                targetElBCR.top +
                _this6.instance.scroll.y -
                getTranslate(targetEl).y;
              left =
                targetElBCR.left +
                _this6.instance.scroll.x -
                getTranslate(targetEl).x;
            }
          }

          var bottom = top + targetEl.offsetHeight;
          var right = left + targetEl.offsetWidth;
          var middle = {
            x: (right - left) / 2 + left,
            y: (bottom - top) / 2 + top,
          };

          if (sticky) {
            var elBCR = el.getBoundingClientRect();
            var elTop = elBCR.top;
            var elLeft = elBCR.left;
            var elDistance = {
              x: elLeft - left,
              y: elTop - top,
            };
            top += window.innerHeight;
            left += window.innerWidth;
            bottom =
              elTop +
              targetEl.offsetHeight -
              el.offsetHeight -
              elDistance[_this6.directionAxis];
            right =
              elLeft +
              targetEl.offsetWidth -
              el.offsetWidth -
              elDistance[_this6.directionAxis];
            middle = {
              x: (right - left) / 2 + left,
              y: (bottom - top) / 2 + top,
            };
          }

          if (repeat == "false") {
            repeat = false;
          } else if (repeat != undefined) {
            repeat = true;
          } else {
            repeat = _this6.repeat;
          }

          var relativeOffset = [0, 0];

          if (offset) {
            if (_this6.direction === "horizontal") {
              for (var i = 0; i < offset.length; i++) {
                if (typeof offset[i] == "string") {
                  if (offset[i].includes("%")) {
                    relativeOffset[i] = parseInt(
                      (offset[i].replace("%", "") * _this6.windowWidth) / 100
                    );
                  } else {
                    relativeOffset[i] = parseInt(offset[i]);
                  }
                } else {
                  relativeOffset[i] = offset[i];
                }
              }

              left = left + relativeOffset[0];
              right = right - relativeOffset[1];
            } else {
              for (var i = 0; i < offset.length; i++) {
                if (typeof offset[i] == "string") {
                  if (offset[i].includes("%")) {
                    relativeOffset[i] = parseInt(
                      (offset[i].replace("%", "") * _this6.windowHeight) / 100
                    );
                  } else {
                    relativeOffset[i] = parseInt(offset[i]);
                  }
                } else {
                  relativeOffset[i] = offset[i];
                }
              }

              top = top + relativeOffset[0];
              bottom = bottom - relativeOffset[1];
            }
          }

          var mappedEl = {
            el: el,
            id: id,
            class: cl,
            section: section,
            top: top,
            middle: middle,
            bottom: bottom,
            left: left,
            right: right,
            offset: offset,
            progress: 0,
            repeat: repeat,
            inView: false,
            call: call,
            speed: speed,
            delay: delay,
            position: position,
            target: targetEl,
            direction: direction,
            sticky: sticky,
          };
          _this6.els[id] = mappedEl;

          if (el.classList.contains(cl)) {
            _this6.setInView(_this6.els[id], id);
          }

          if (speed !== false || sticky) {
            _this6.parallaxElements[id] = mappedEl;
          }
        }); // });
      },
    },
    {
      key: "addSections",
      value: function addSections() {
        var _this7 = this;

        this.sections = {};
        var sections = this.el.querySelectorAll(
          "[data-".concat(this.name, "-section]")
        );

        if (sections.length === 0) {
          sections = [this.el];
        }

        sections.forEach(function (section, index) {
          var id =
            typeof section.dataset[_this7.name + "Id"] === "string"
              ? section.dataset[_this7.name + "Id"]
              : "section" + index;
          var sectionBCR = section.getBoundingClientRect();
          var offset = {
            x:
              sectionBCR.left -
              window.innerWidth * 1.5 -
              getTranslate(section).x,
            y:
              sectionBCR.top -
              window.innerHeight * 1.5 -
              getTranslate(section).y,
          };
          var limit = {
            x: offset.x + sectionBCR.width + window.innerWidth * 2,
            y: offset.y + sectionBCR.height + window.innerHeight * 2,
          };
          var persistent =
            typeof section.dataset[_this7.name + "Persistent"] === "string";
          section.setAttribute("data-scroll-section-id", id);
          var mappedSection = {
            el: section,
            offset: offset,
            limit: limit,
            inView: false,
            persistent: persistent,
            id: id,
          };
          _this7.sections[id] = mappedSection;
        });
      },
    },
    {
      key: "transform",
      value: function transform(element, x, y, delay) {
        var transform;

        if (!delay) {
          transform = "matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,"
            .concat(x, ",")
            .concat(y, ",0,1)");
        } else {
          var start = getTranslate(element);
          var lerpX = lerp(start.x, x, delay);
          var lerpY = lerp(start.y, y, delay);
          transform = "matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,"
            .concat(lerpX, ",")
            .concat(lerpY, ",0,1)");
        }

        element.style.webkitTransform = transform;
        element.style.msTransform = transform;
        element.style.transform = transform;
      },
    },
    {
      key: "transformElements",
      value: function transformElements(isForced) {
        var _this8 = this;

        var setAllElements =
          arguments.length > 1 && arguments[1] !== undefined
            ? arguments[1]
            : false;
        var scrollRight = this.instance.scroll.x + this.windowWidth;
        var scrollBottom = this.instance.scroll.y + this.windowHeight;
        var scrollMiddle = {
          x: this.instance.scroll.x + this.windowMiddle.x,
          y: this.instance.scroll.y + this.windowMiddle.y,
        };
        Object.entries(this.parallaxElements).forEach(function (_ref5) {
          var _ref6 = _slicedToArray(_ref5, 2);
          _ref6[0];
          var current = _ref6[1];

          var transformDistance = false;

          if (isForced) {
            transformDistance = 0;
          }

          if (current.inView || setAllElements) {
            switch (current.position) {
              case "top":
                transformDistance =
                  _this8.instance.scroll[_this8.directionAxis] * -current.speed;
                break;

              case "elementTop":
                transformDistance =
                  (scrollBottom - current.top) * -current.speed;
                break;

              case "bottom":
                transformDistance =
                  (_this8.instance.limit[_this8.directionAxis] -
                    scrollBottom +
                    _this8.windowHeight) *
                  current.speed;
                break;

              case "left":
                transformDistance =
                  _this8.instance.scroll[_this8.directionAxis] * -current.speed;
                break;

              case "elementLeft":
                transformDistance =
                  (scrollRight - current.left) * -current.speed;
                break;

              case "right":
                transformDistance =
                  (_this8.instance.limit[_this8.directionAxis] -
                    scrollRight +
                    _this8.windowHeight) *
                  current.speed;
                break;

              default:
                transformDistance =
                  (scrollMiddle[_this8.directionAxis] -
                    current.middle[_this8.directionAxis]) *
                  -current.speed;
                break;
            }
          }

          if (current.sticky) {
            if (current.inView) {
              if (_this8.direction === "horizontal") {
                transformDistance =
                  _this8.instance.scroll.x - current.left + window.innerWidth;
              } else {
                transformDistance =
                  _this8.instance.scroll.y - current.top + window.innerHeight;
              }
            } else {
              if (_this8.direction === "horizontal") {
                if (
                  _this8.instance.scroll.x < current.left - window.innerWidth &&
                  _this8.instance.scroll.x <
                    current.left - window.innerWidth / 2
                ) {
                  transformDistance = 0;
                } else if (
                  _this8.instance.scroll.x > current.right &&
                  _this8.instance.scroll.x > current.right + 100
                ) {
                  transformDistance =
                    current.right - current.left + window.innerWidth;
                } else {
                  transformDistance = false;
                }
              } else {
                if (
                  _this8.instance.scroll.y < current.top - window.innerHeight &&
                  _this8.instance.scroll.y <
                    current.top - window.innerHeight / 2
                ) {
                  transformDistance = 0;
                } else if (
                  _this8.instance.scroll.y > current.bottom &&
                  _this8.instance.scroll.y > current.bottom + 100
                ) {
                  transformDistance =
                    current.bottom - current.top + window.innerHeight;
                } else {
                  transformDistance = false;
                }
              }
            }
          }

          if (transformDistance !== false) {
            if (
              current.direction === "horizontal" ||
              (_this8.direction === "horizontal" &&
                current.direction !== "vertical")
            ) {
              _this8.transform(
                current.el,
                transformDistance,
                0,
                isForced ? false : current.delay
              );
            } else {
              _this8.transform(
                current.el,
                0,
                transformDistance,
                isForced ? false : current.delay
              );
            }
          }
        });
      },
      /**
       * Scroll to a desired target.
       *
       * @param  Available options :
       *          target {node, string, "top", "bottom", int} - The DOM element we want to scroll to
       *          options {object} - Options object for additionnal settings.
       * @return {void}
       */
    },
    {
      key: "scrollTo",
      value: function scrollTo(target) {
        var _this9 = this;

        var options =
          arguments.length > 1 && arguments[1] !== undefined
            ? arguments[1]
            : {};
        // Parse options
        var offset = parseInt(options.offset) || 0; // An offset to apply on top of given `target` or `sourceElem`'s target

        var duration = !isNaN(parseInt(options.duration))
          ? parseInt(options.duration)
          : 1000; // Duration of the scroll animation in milliseconds

        var easing = options.easing || [0.25, 0.0, 0.35, 1.0]; // An array of 4 floats between 0 and 1 defining the bezier curve for the animation's easing. See http://greweb.me/bezier-easing-editor/example/

        var disableLerp = options.disableLerp ? true : false; // Lerp effect won't be applied if set to true

        var callback = options.callback ? options.callback : false; // function called when scrollTo completes (note that it won't wait for lerp to stabilize)

        easing = src$1.apply(void 0, _toConsumableArray(easing));

        if (typeof target === "string") {
          // Selector or boundaries
          if (target === "top") {
            target = 0;
          } else if (target === "bottom") {
            target = this.instance.limit.y;
          } else if (target === "left") {
            target = 0;
          } else if (target === "right") {
            target = this.instance.limit.x;
          } else {
            target = document.querySelector(target); // If the query fails, abort

            if (!target) {
              return;
            }
          }
        } else if (typeof target === "number") {
          // Absolute coordinate
          target = parseInt(target);
        } else if (target && target.tagName);
        else {
          console.warn("`target` parameter is not valid");
          return;
        } // We have a target that is not a coordinate yet, get it

        if (typeof target !== "number") {
          // Verify the given target belongs to this scroll scope
          var targetInScope = getParents(target).includes(this.el);

          if (!targetInScope) {
            // If the target isn't inside our main element, abort any action
            return;
          } // Get target offset from top

          var targetBCR = target.getBoundingClientRect();
          var offsetTop = targetBCR.top;
          var offsetLeft = targetBCR.left; // Try and find the target's parent section

          var targetParents = getParents(target);
          var parentSection = targetParents.find(function (candidate) {
            return Object.entries(_this9.sections) // Get sections associative array as a regular array
              .map(function (_ref7) {
                var _ref8 = _slicedToArray(_ref7, 2);
                _ref8[0];
                var section = _ref8[1];

                return section;
              }) // map to section only (we dont need the key here)
              .find(function (section) {
                return section.el == candidate;
              }); // finally find the section that matches the candidate
          });
          var parentSectionOffset = 0;

          if (parentSection) {
            parentSectionOffset =
              getTranslate(parentSection)[this.directionAxis]; // We got a parent section, store it's current offset to remove it later
          } else {
            // if no parent section is found we need to use instance scroll directly
            parentSectionOffset = -this.instance.scroll[this.directionAxis];
          } // Final value of scroll destination : offsetTop + (optional offset given in options) - (parent's section translate)

          if (this.direction === "horizontal") {
            offset = offsetLeft + offset - parentSectionOffset;
          } else {
            offset = offsetTop + offset - parentSectionOffset;
          }
        } else {
          offset = target + offset;
        } // Actual scrollto
        // ==========================================================================
        // Setup

        var scrollStart = parseFloat(this.instance.delta[this.directionAxis]);
        var scrollTarget = Math.max(
          0,
          Math.min(offset, this.instance.limit[this.directionAxis])
        ); // Make sure our target is in the scroll boundaries

        var scrollDiff = scrollTarget - scrollStart;

        var render = function render(p) {
          if (disableLerp) {
            if (_this9.direction === "horizontal") {
              _this9.setScroll(
                scrollStart + scrollDiff * p,
                _this9.instance.delta.y
              );
            } else {
              _this9.setScroll(
                _this9.instance.delta.x,
                scrollStart + scrollDiff * p
              );
            }
          } else {
            _this9.instance.delta[_this9.directionAxis] =
              scrollStart + scrollDiff * p;
          }
        }; // Prepare the scroll

        this.animatingScroll = true; // This boolean allows to prevent `checkScroll()` from calling `stopScrolling` when the animation is slow (i.e. at the beginning of an EaseIn)

        this.stopScrolling(); // Stop any movement, allows to kill any other `scrollTo` still happening

        this.startScrolling(); // Restart the scroll
        // Start the animation loop

        var start = Date.now();

        var loop = function loop() {
          var p = (Date.now() - start) / duration; // Animation progress

          if (p > 1) {
            // Animation ends
            render(1);
            _this9.animatingScroll = false;
            if (duration == 0) _this9.update();
            if (callback) callback();
          } else {
            _this9.scrollToRaf = requestAnimationFrame(loop);
            render(easing(p));
          }
        };

        loop();
      },
    },
    {
      key: "update",
      value: function update() {
        this.setScrollLimit();
        this.addSections();
        this.addElements();
        this.detectElements();
        this.updateScroll();
        this.transformElements(true);
        this.reinitScrollBar();
        this.checkScroll(true);
      },
    },
    {
      key: "startScroll",
      value: function startScroll() {
        this.stop = false;
      },
    },
    {
      key: "stopScroll",
      value: function stopScroll() {
        this.stop = true;
      },
    },
    {
      key: "setScroll",
      value: function setScroll(x, y) {
        this.instance = _objectSpread2(
          _objectSpread2({}, this.instance),
          {},
          {
            scroll: {
              x: x,
              y: y,
            },
            delta: {
              x: x,
              y: y,
            },
            speed: 0,
          }
        );
      },
    },
    {
      key: "destroy",
      value: function destroy() {
        _get(_getPrototypeOf(_default.prototype), "destroy", this).call(this);

        this.stopScrolling();
        this.html.classList.remove(this.smoothClass);
        this.vs.destroy();
        this.destroyScrollBar();
        window.removeEventListener("keydown", this.checkKey, false);
      },
    },
  ]);

  return _default;
})(_default);

var Smooth = /*#__PURE__*/ (function () {
  function Smooth() {
    var options =
      arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Smooth);

    this.options = options; // Override default options with given ones

    Object.assign(this, defaults, options);
    this.smartphone = defaults.smartphone;
    if (options.smartphone) Object.assign(this.smartphone, options.smartphone);
    this.tablet = defaults.tablet;
    if (options.tablet) Object.assign(this.tablet, options.tablet);
    if (!this.smooth && this.direction == "horizontal")
      console.warn(
        "🚨 `smooth:false` & `horizontal` direction are not yet compatible"
      );
    if (!this.tablet.smooth && this.tablet.direction == "horizontal")
      console.warn(
        "🚨 `smooth:false` & `horizontal` direction are not yet compatible (tablet)"
      );
    if (!this.smartphone.smooth && this.smartphone.direction == "horizontal")
      console.warn(
        "🚨 `smooth:false` & `horizontal` direction are not yet compatible (smartphone)"
      );
    this.init();
  }

  _createClass(Smooth, [
    {
      key: "init",
      value: function init() {
        this.options.isMobile =
          /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
            navigator.userAgent
          ) ||
          (navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1) ||
          window.innerWidth < this.tablet.breakpoint;
        this.options.isTablet =
          this.options.isMobile && window.innerWidth >= this.tablet.breakpoint;

        if (
          (this.smooth && !this.options.isMobile) ||
          (this.tablet.smooth && this.options.isTablet) ||
          (this.smartphone.smooth &&
            this.options.isMobile &&
            !this.options.isTablet)
        ) {
          this.scroll = new _default$2(this.options);
        } else {
          this.scroll = new _default$1(this.options);
        }

        this.scroll.init();

        if (window.location.hash) {
          // Get the hash without the '#' and find the matching element
          var id = window.location.hash.slice(1, window.location.hash.length);
          var target = document.getElementById(id); // If found, scroll to the element

          if (target) this.scroll.scrollTo(target);
        }
      },
    },
    {
      key: "update",
      value: function update() {
        this.scroll.update();
      },
    },
    {
      key: "start",
      value: function start() {
        this.scroll.startScroll();
      },
    },
    {
      key: "stop",
      value: function stop() {
        this.scroll.stopScroll();
      },
    },
    {
      key: "scrollTo",
      value: function scrollTo(target, options) {
        this.scroll.scrollTo(target, options);
      },
    },
    {
      key: "setScroll",
      value: function setScroll(x, y) {
        this.scroll.setScroll(x, y);
      },
    },
    {
      key: "on",
      value: function on(event, func) {
        this.scroll.setEvents(event, func);
      },
    },
    {
      key: "off",
      value: function off(event, func) {
        this.scroll.unsetEvents(event, func);
      },
    },
    {
      key: "destroy",
      value: function destroy() {
        this.scroll.destroy();
      },
    },
  ]);

  return Smooth;
})();

const windowHeight = window.innerHeight;
const windowWidth = window.innerWidth;

gsapWithCSS.registerPlugin(MotionPathPlugin, ScrollTrigger);
const locoScroll = new Smooth({
  el: document.querySelector(".wrapper"),
  smooth: true,
  multiplier: 0.7,
  // tablet: {
  //   smooth: true,
  //   breakpoint: 0,
  // },
  lerp: 0.08,
});
const sectionBtn$1 = document.querySelector(".projects__btn");
locoScroll.on("scroll", ScrollTrigger.update);
ScrollTrigger.scrollerProxy(".wrapper", {
  scrollTop(value) {
    const instance = locoScroll;
    if (arguments.length && value !== void 0) {
      instance.scroll.instance.scroll.y = value;
    }
    return instance.scroll.instance.scroll.y;
  },
  getBoundingClientRect() {
    return {
      top: 0,
      left: 0,
      width: window.innerWidth,
      height: window.innerHeight,
    };
  },
  // нужен, если у тебя вертикальный скролл
  pinType: document.querySelector(".wrapper")?.style.transform
    ? "transform"
    : "fixed",
});
ScrollTrigger.addEventListener("refresh", () => {
  locoScroll.update();
});
ScrollTrigger.refresh();
const section = document.querySelector(".projects__list");
sectionBtn$1?.addEventListener("click", () => {
  const onTransitionEnd = () => {
    locoScroll.update();
    ScrollTrigger.refresh();
    section?.removeEventListener("transitionend", onTransitionEnd);
  };
  section?.addEventListener("transitionend", onTransitionEnd);
});
const itemsLinks = document.querySelectorAll("[data-scroll-to]");
itemsLinks.forEach((link) => {
  link.addEventListener("click", (event) => {
    event.preventDefault();
    const targetId = link.dataset.scrollTo;
    const targetElement = document.getElementById(targetId);
    locoScroll.scrollTo(targetElement, {
      offset: 0,
      // или -50, если есть fixed header
      duration: 1e3,
      easing: [0.25, 0, 0.35, 1],
    });
    ScrollTrigger.refresh();
  });
});
const wrapperTag = document.querySelector("body");
function tweenProperty(target) {
  const htmlTag = document.querySelector("html")?.classList;
  let gradient;
  if (htmlTag && htmlTag.contains("dark-theme")) {
    gradient = `linear-gradient(random(0,180)deg,
      rgb(random(0,102), random(0,30),random(0, 255)) random(0, 50)%,
      rgb(random(0,69), random(5,8), random(0,168)) random(0, 50)%,
      rgb(random(100,169), random(0,30), random(200,255)) random(0,50)%)`;
  } else if (htmlTag && htmlTag.contains("light-theme")) {
    gradient = `linear-gradient(random(0,180)deg,
      rgb(255, random(150, 205), random(10,30)) random(0,10)%,
      rgb(random(200,255), random(150,229), 0 ) random(0, 50)%,
      rgb(random(200, 255), random(50, 70), random(10,30)) random(0,50)%)`;
  }
  if (target) {
    const randomToX = gsapWithCSS.utils.random(0, windowWidth);
    const randomToY = gsapWithCSS.utils.random(0, windowHeight);
    const randomFromX = gsapWithCSS.utils.random(0, windowWidth);
    const randomFromY = gsapWithCSS.utils.random(0, windowHeight);
    gsapWithCSS.to(target, {
      motionPath: {
        path: [
          { x: randomFromX, y: randomFromY },
          { x: randomToX, y: randomToY },
        ],
        curviness: 3,
      },
      scale: "random(0, 1.2)",
      duration: "random(5, 8)",
      ease: "linear",
      opacity: "random(0, 1)",
      backgroundImage: gradient,
      onComplete: tweenProperty,
      onCompleteParams: [target],
    });
  }
}
const changeThemeListener = (el) => {
  el?.addEventListener("change", (e) => {
    const htmlTag = document.querySelector("html")?.classList;
    const lights = Array.from(document.getElementsByClassName("light"));
    if (htmlTag && htmlTag.contains("dark-theme")) {
      htmlTag?.remove("dark-theme");
      htmlTag?.add("light-theme");
      lights.forEach((el2) => {
        gsapWithCSS.killTweensOf(el2);
        tweenProperty(el2);
      });
    } else if (htmlTag && htmlTag.contains("light-theme")) {
      htmlTag?.remove("light-theme");
      htmlTag?.add("dark-theme");
      lights.forEach((el2) => {
        gsapWithCSS.killTweensOf(el2);
        tweenProperty(el2);
      });
    }
  });
};
const decor = Array.from({ length: gsapWithCSS.utils.random(5, 10) }, () => ({
  id: nanoid(),
}));
function startBackgroundDecor() {
  decor.forEach(({ id }) => {
    const shape = document.createElement("div");
    shape.classList.add(id);
    shape.classList.add("light");
    wrapperTag?.appendChild(shape);
    gsapWithCSS.set(shape, {
      x: gsapWithCSS.utils.random(0, windowWidth),
      y: gsapWithCSS.utils.random(0, windowHeight),
    });
    tweenProperty(shape);
  });
  const themeSwitherTop = document.querySelector(".theme-switch__input");
  const themeSwitherBottom = document.querySelector(".theme-switch2__input");
  changeThemeListener(themeSwitherTop);
  changeThemeListener(themeSwitherBottom);
}
function updatePath() {
  const pageWidth = window.innerWidth;
  const endX = 1.2 * pageWidth;
  const controlX1 = 0.3 * pageWidth;
  const controlX2 = 0.7 * pageWidth;
  const pathData = `M -100, 0 C${controlX1},20 ${controlX2},180 ${endX},100`;
  document.getElementById("dynamicCurve-js").setAttribute("d", pathData);
  gsapWithCSS.to(".float_icon-js", {
    duration: 5,
    motionPath: {
      path: "#dynamicCurve-js",
      align: "#dynamicCurve-js",
      autoRotate: true,
      alignOrigin: [0.5, 0.5],
    },
    yoyo: true,
    scrollTrigger: {
      scroller: ".wrapper",
      trigger: ".float_icon-js",
      start: "top bottom",
      // Начнем, когда верх элемента достигнет низа экрана
      scrub: 1.5,
      // Плавность синхронизации
      markers: false,
      // Убрать маркеры (для разработки)
      invalidateOnRefresh: true,
      // Обновляем ScrollTrigger при изменении контента
    },
  });
  document.getElementById("dynamicCurve-react").setAttribute("d", pathData);
  gsapWithCSS.to(".float_icon-react", {
    duration: 5,
    motionPath: {
      path: "#dynamicCurve-react",
      align: "#dynamicCurve-react",
      autoRotate: true,
      alignOrigin: [0.5, 0.5],
      start: 1,
      end: 0,
    },
    yoyo: true,
    scrollTrigger: {
      scroller: ".wrapper",
      trigger: ".float_icon-react",
      start: "top bottom",
      // Начнем, когда верх элемента достигнет низа экрана
      scrub: 1.5,
      // Плавность синхронизации
      markers: false,
      // Убрать маркеры (для разработки)
      invalidateOnRefresh: true,
      // Обновляем ScrollTrigger при изменении контента
    },
  });
  document.getElementById("dynamicCurve-html").setAttribute("d", pathData);
  gsapWithCSS.to(".float_icon-html", {
    duration: 5,
    motionPath: {
      path: "#dynamicCurve-html",
      align: "#dynamicCurve-html",
      autoRotate: true,
      alignOrigin: [0.5, 0.5],
    },
    yoyo: true,
    scrollTrigger: {
      scroller: ".wrapper",
      trigger: ".float_icon-html",
      start: "top bottom",
      scrub: 1.5,
      // Плавность синхронизации
      markers: false,
      // Убрать маркеры (для разработки)
      invalidateOnRefresh: true,
      // Обновляем ScrollTrigger при изменении контента
    },
  });
}
updatePath();

const ATTR_IDLING = "data-scramble-text-idling";
const ATTR_RUNNING = "data-scramble-text-running";
class ScrambleText {
  _startTime;
  _elapsedTime;
  _running;
  _idling;
  _position;
  _contents;
  _anim;
  el;
  timeOffset;
  fps;
  chars;
  callback;
  constructor(el, option = {}) {
    this._startTime = 0;
    this._elapsedTime = 0;
    this._running = false;
    this._idling = true;
    this._position = 0;
    this._contents = split(el.innerHTML);
    this._anim = anim.bind(this);
    this.el = el;
    this.timeOffset = option.timeOffset || 100;
    this.fps = option.fps || 60;
    this.chars = option.chars || [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      "!",
      "#",
      "$",
      "%",
      "&",
      ":",
      ";",
      "?",
      "@",
      "[",
      "]",
      "^",
      "_",
      "{",
      "|",
      "}",
      "~",
    ];
    this.callback =
      typeof option.callback === "function" ? option.callback : () => {};
    this.play();
  }
  play() {
    if (this._running) return this;
    this._idling = true;
    this._running = true;
    this._position = 0;
    this.el.setAttribute(ATTR_IDLING, "");
    this.el.setAttribute(ATTR_RUNNING, "");
    this._anim();
    return this;
  }
  start() {
    this._idling = false;
    this._startTime = Date.now();
    this._elapsedTime = 0;
    this._position = 0;
    this.el.removeAttribute(ATTR_IDLING);
    return this;
  }
  stop() {
    this._running = false;
    this.el.removeAttribute(ATTR_IDLING);
    this.el.removeAttribute(ATTR_RUNNING);
    return this;
  }
}
function anim() {
  const elapsedTime = Date.now() - this._startTime;
  const deltaTime = elapsedTime - this._elapsedTime;
  const needsUpdate = 1e3 / this.fps <= deltaTime;
  if (!needsUpdate) {
    requestAnimationFrame(this._anim);
    return;
  }
  this._elapsedTime = elapsedTime;
  this._position = this._idling ? 0 : (this._elapsedTime / this.timeOffset) | 0;
  if (!this._running) return;
  if (this._position >= this._contents.length) {
    this._running = false;
    this.el.innerHTML = this._contents.map((el) => el.content).join("");
    this.el.removeAttribute("data-scramble-text-running");
    this.callback();
    return;
  }
  requestAnimationFrame(this._anim);
  const textArray = suffle(this._contents, this.chars, this._position);
  this.el.innerText = textArray.join("");
}
function suffle(contents, chars, position) {
  const textArray = [];
  for (let i = 0, l = contents.length; i < l; i++) {
    if (contents[i].type === "tag") {
      textArray.push(contents[i].content);
      continue;
    }
    if (i < position) {
      textArray.push(contents[i].content);
      continue;
    }
    if (/\s/.test(contents[i].content)) {
      textArray.push(contents[i].content);
    }
    textArray.push(getRandCharacter(chars));
  }
  return textArray;
}
function getRandCharacter(chars) {
  const randNum = Math.floor(Math.random() * chars.length);
  const lowChoice = -0.5 + Math.random();
  const picketCharacter = chars[randNum];
  const choosen =
    lowChoice < 0 ? picketCharacter.toLowerCase() : picketCharacter;
  return choosen;
}
function split(string) {
  const array = [];
  const tag = /^(\s*)?<\/?[a-z](.*?)>(\s*)?/i;
  const space = /^\s+/;
  let newString = string;
  newString = newString.replace(space, "").replace(/\s+$/, "");
  while (newString.length !== 0) {
    const matchTag = newString.match(tag);
    if (matchTag) {
      array.push({
        type: "tag",
        content: matchTag[0].replace(/^(\s*)(.+)(\s*)$/, "$1$2$3"),
      });
      newString = newString.replace(matchTag[0], "");
      continue;
    }
    const matchSpace = newString.match(space);
    if (matchSpace) {
      array.push({
        type: "space",
        content: " ",
      });
      newString = newString.replace(matchSpace[0], "");
      continue;
    }
    array.push({
      type: "character",
      content: newString[0],
    });
    newString = newString.slice(1);
  }
  return array;
}

document.querySelectorAll(".skills__innerList").forEach((el) => {
  new SimpleBar(el, { autoHide: false });
});
let touchStartY = 0;
let touchStartX = 0;
document.querySelectorAll(".projects__about").forEach((el) => {
  new SimpleBar(el, { autoHide: false });
  const wrapper = el.querySelector(".simplebar-content-wrapper");
  if (!wrapper) return;
  const shouldStop = (dir) => {
    const { scrollTop } = wrapper;
    const { scrollHeight } = wrapper;
    const height = wrapper.clientHeight;
    const atTop = scrollTop === 0;
    const atBottom = scrollTop + height >= scrollHeight - 1;
    return !(dir < 0 && atTop) && !(dir > 0 && atBottom);
  };
  wrapper.addEventListener(
    "wheel",
    (e) => {
      if (shouldStop(e.deltaY)) e.stopPropagation();
    },
    { passive: true }
  );
  el.addEventListener(
    "touchstart",
    (e) => {
      const touchEvent = e;
      touchStartY = touchEvent.touches[0].clientY;
      touchStartX = touchEvent.touches[0].clientX;
    },
    { passive: false }
  );
  el.addEventListener(
    "touchmove",
    (e) => {
      const touchEvent = e;
      const deltaY = Math.abs(touchEvent.touches[0].clientY - touchStartY);
      const deltaX = Math.abs(touchEvent.touches[0].clientX - touchStartX);
      if (deltaX > deltaY) {
        e.preventDefault();
      }
    },
    { passive: false }
  );
});
const element = document.querySelector(".hero__text_highlight");
const scrambleText = new ScrambleText(element).play().start();
setInterval(() => {
  scrambleText.play().start();
}, 5e3);
function addClass(className, selector) {
  document.querySelector(className)?.classList.add(selector);
}
function removeClass(className, selector) {
  document.querySelector(className)?.classList.remove(selector);
}
const menuButton = document.querySelector(".header__burger");
if (menuButton) {
  menuButton.addEventListener("click", () => {
    const menu = document.querySelector(".header__nav");
    menuButton.classList.toggle("active");
    menu?.classList.toggle("active");
  });
}
const projectsList = document.querySelector(".projects__list");
const sectionBtn = document.querySelector(".projects__btn");
sectionBtn?.addEventListener("click", (e) => {
  projectsList?.classList.add("projects__list_active");
  sectionBtn.style.display = "none";
});
let projectsSlider = null;
const md = 1395;
const projectsSliderInit = () => {
  projectsSlider = new Swiper(".projects_listContainer", {
    // Optional parameters
    loop: true,
    spaceBetween: 30,
    slidesPerGroup: 1,
    updateOnWindowResize: true,
    slidesPerView: 3,
    modules: [Navigation, Pagination],
    simulateTouch: true,
    // Чувствительность свайпа
    touchRatio: 1,
    // Угол срабатывания свайпа/перетаскивания
    touchAngle: 45,
    pagination: {
      el: ".swiper-pagination",
      type: "progressbar",
    },
    breakpoints: {
      1241: { slidesPerView: 3 },
      1161: {
        slidesPerView: 2,
      },
      1080: {
        slidesPerView: 3,
      },
      650: {
        slidesPerView: 2,
      },
      120: {
        slidesPerView: 1,
      },
    },
  });
};
const projectsItems = document.querySelectorAll(".projects__item");
if (window.innerWidth <= md) {
  projectsItems.forEach((el) => {
    el.classList.add("swiper-slide");
  });
  addClass(".projects_listContainer", "swiper");
  addClass(".projects__list", "swiper-wrapper");
  projectsSliderInit();
}
window.addEventListener("resize", function (ev) {
  if (this.innerWidth <= md && !projectsSlider) {
    projectsItems.forEach((el) => {
      el.classList.add("swiper-slide");
    });
    addClass(".projects_listContainer", "swiper");
    addClass(".projects__list", "swiper-wrapper");
    projectsSliderInit();
  } else if (this.innerWidth > md && projectsSlider) {
    projectsSlider.destroy();
    projectsSlider = null;
    projectsItems.forEach((el) => {
      el.classList.remove("swiper-slide");
    });
    removeClass(".projects_listContainer", "swiper");
    removeClass(".projects__list", "swiper-wrapper");
  }
});
const createProgressBar = (className, percent) => {
  const htmlTag = document.querySelector("html")?.classList;
  if (!document.querySelector(className)?.children[0]) {
    const progressApi = new ProgressBar.Circle(className, {
      strokeWidth: 10,
      trailColor: "transparent",
      trailWidth: 0.8,
      color: "#3a3a3a",
      svgStyle: {
        display: "block",
        // Important: make sure that your container has same
        // aspect ratio as the SVG canvas. See SVG canvas sizes above.
        width: "100%",
      },
      text: {
        // Initial value for text.
        // Default: null
        value: "Text",
        // Class name for text element.
        // Default: 'progressbar-text'
        className: "tools__label",
      },
      duration: 1200,
      easing: "easeInOut",
    }).animate(percent, {
      duration: 1200,
      from: {
        color:
          htmlTag && htmlTag[0] === "dark-theme"
            ? "rgb(169, 30, 255)"
            : "rgb(255, 205, 30)",
      },
      to: {
        color: htmlTag && htmlTag[0] === "dark-theme" ? "#864dff" : "#ff891d",
      },
      attachment: document.querySelector(className)?.children[1],
      step(state, circle, attatch) {
        const element2 = attatch;
        element2.innerText = `${Math.round(circle.value() * 100)}%`;
        circle.path?.setAttribute("stroke", state.color);
      },
    });
    return progressApi;
  }
  return void 0;
};
const inViewport = (entries) => {
  entries.forEach((entrie) => {
    if (entrie.isIntersecting) {
      switch (entrie.target.classList[1]) {
        case "tools__circle-react":
          createProgressBar(`.${entrie.target.classList[1]}`, 0.9);
          break;
        case "tools__circle-redux":
          createProgressBar(`.${entrie.target.classList[1]}`, 0.8);
          break;
        case "tools__circle-js":
          createProgressBar(`.${entrie.target.classList[1]}`, 0.9);
          break;
        case "tools__circle-layout":
          createProgressBar(`.${entrie.target.classList[1]}`, 0.8);
          break;
        case "tools__circle-nodejs":
          createProgressBar(`.${entrie.target.classList[1]}`, 0.5);
          break;
        case "tools__circle-webpack":
          createProgressBar(`.${entrie.target.classList[1]}`, 0.7);
          break;
        default:
          createProgressBar(`.${entrie.target.classList[1]}`, 0.5);
      }
    }
  });
};
const Obs = new IntersectionObserver(inViewport);
Obs.observe(document.querySelector(".tools__circle-react"));
Obs.observe(document.querySelector(".tools__circle-redux"));
Obs.observe(document.querySelector(".tools__circle-js"));
Obs.observe(document.querySelector(".tools__circle-layout"));
Obs.observe(document.querySelector(".tools__circle-nodejs"));
Obs.observe(document.querySelector(".tools__circle-webpack"));
document
  .querySelector(".contacts__copy")
  ?.addEventListener("click", () =>
    navigator.clipboard.writeText("a.kochanov31@yandex.ru")
  );
startBackgroundDecor();
const vh = window.innerHeight * 0.01;
document.documentElement.style.setProperty("--vh", `${vh}px`);
window.addEventListener("resize", () => {
  const vh2 = window.innerHeight * 0.01;
  document.documentElement.style.setProperty("--vh", `${vh2}px`);
});
